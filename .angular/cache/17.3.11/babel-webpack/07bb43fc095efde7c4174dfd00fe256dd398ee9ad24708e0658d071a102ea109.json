{"ast":null,"code":"import { COMMA, ENTER } from '@angular/cdk/keycodes';\nimport { UntypedFormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { map, startWith } from 'rxjs/operators';\nimport { AsyncPipe } from '@angular/common';\nimport { MatOptionModule } from '@angular/material/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { BreadcrumbComponent } from '@shared/components/breadcrumb/breadcrumb.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/chips\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/material/form-field\";\nimport * as i4 from \"@angular/material/icon\";\nimport * as i5 from \"@angular/material/autocomplete\";\nimport * as i6 from \"@angular/material/core\";\nconst _c0 = [\"fruitInput\"];\nconst _c1 = [\"auto\"];\nfunction ChipsComponent_For_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵelement(1, \"app-breadcrumb\", 27);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const breadscrum_r2 = ctx.$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"title\", breadscrum_r2.title)(\"items\", breadscrum_r2.items)(\"active_item\", breadscrum_r2.active);\n  }\n}\nfunction ChipsComponent_For_34_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-chip-row\", 28);\n    i0.ɵɵlistener(\"removed\", function ChipsComponent_For_34_Template_mat_chip_row_removed_0_listener() {\n      const fruit_r4 = i0.ɵɵrestoreView(_r3).$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.remove(fruit_r4));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"button\", 29)(3, \"mat-icon\");\n    i0.ɵɵtext(4, \"cancel\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const fruit_r4 = ctx.$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", fruit_r4, \" \");\n    i0.ɵɵadvance();\n    i0.ɵɵattribute(\"aria-label\", \"remove \" + fruit_r4);\n  }\n}\nfunction ChipsComponent_For_40_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 18);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const fruit_r6 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", fruit_r6);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", fruit_r6, \" \");\n  }\n}\nfunction ChipsComponent_For_68_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-chip-option\", 26);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const chip_r7 = ctx.$implicit;\n    i0.ɵɵproperty(\"color\", chip_r7.color);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", chip_r7.name, \" \");\n  }\n}\nexport class ChipsComponent {\n  constructor() {\n    this.breadscrums = [{\n      title: 'Chips',\n      items: ['UI'],\n      active: 'Chips'\n    }];\n    this.visible = true;\n    this.selectable = true;\n    this.removable = true;\n    this.separatorKeysCodes = [ENTER, COMMA];\n    this.fruitCtrl = new UntypedFormControl();\n    this.fruits = ['Lemon'];\n    this.allFruits = ['Apple', 'Lemon', 'Lime', 'Orange', 'Strawberry'];\n    this.availableColors = [{\n      name: 'none',\n      color: ''\n    }, {\n      name: 'Primary',\n      color: 'primary'\n    }, {\n      name: 'Accent',\n      color: 'accent'\n    }, {\n      name: 'Warn',\n      color: 'warn'\n    }];\n    this.filteredFruits = this.fruitCtrl.valueChanges.pipe(startWith(null), map(fruit => fruit ? this._filter(fruit) : this.allFruits.slice()));\n  }\n  add(event) {\n    const input = event.input;\n    const value = event.value;\n    // Add our fruit\n    if ((value || '').trim()) {\n      this.fruits.push(value.trim());\n    }\n    // Reset the input value\n    if (input) {\n      input.value = '';\n    }\n    this.fruitCtrl.setValue(null);\n  }\n  remove(fruit) {\n    const index = this.fruits.indexOf(fruit);\n    if (index >= 0) {\n      this.fruits.splice(index, 1);\n    }\n  }\n  selected(event) {\n    this.fruits.push(event.option.viewValue);\n    if (this.fruitInput) {\n      this.fruitInput.nativeElement.value = '';\n    }\n    this.fruitCtrl.setValue(null);\n  }\n  _filter(value) {\n    const filterValue = value.toLowerCase();\n    return this.allFruits.filter(fruit => fruit.toLowerCase().indexOf(filterValue) === 0);\n  }\n  static {\n    this.ɵfac = function ChipsComponent_Factory(t) {\n      return new (t || ChipsComponent)();\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ChipsComponent,\n      selectors: [[\"app-chips\"]],\n      viewQuery: function ChipsComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 7);\n          i0.ɵɵviewQuery(_c1, 7);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fruitInput = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.matAutocomplete = _t.first);\n        }\n      },\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 69,\n      vars: 6,\n      consts: [[\"chipGrid\", \"\"], [\"fruitInput\", \"\"], [\"auto\", \"matAutocomplete\"], [1, \"content\"], [1, \"content-block\"], [1, \"block-header\"], [1, \"row\"], [1, \"col-lg-12\", \"col-md-12\", \"col-sm-12\", \"col-12\"], [1, \"card\"], [1, \"header\"], [1, \"body\"], [\"aria-label\", \"Fish selection\"], [\"color\", \"accent\", \"selected\", \"\"], [\"color\", \"warn\"], [\"appearance\", \"fill\", 1, \"example-chip-list\"], [\"aria-label\", \"Fruit selection\"], [\"placeholder\", \"New Fruit...\", 3, \"matChipInputTokenEnd\", \"formControl\", \"matChipInputFor\", \"matAutocomplete\", \"matChipInputSeparatorKeyCodes\"], [3, \"optionSelected\"], [3, \"value\"], [\"aria-label\", \"Dog selection\"], [\"matChipAvatar\", \"\", \"src\", \"../../../assets/images/user/user1.jpg\", \"alt\", \"User image\"], [\"color\", \"primary\"], [\"matChipAvatar\", \"\", \"src\", \"../../../assets/images/user/user3.jpg\", \"alt\", \"User image\"], [\"color\", \"accent\"], [\"matChipAvatar\", \"\", \"src\", \"../../../assets/images/user/user2.jpg\", \"alt\", \"User image\"], [\"aria-label\", \"Color selection\", 1, \"mat-mdc-chip-set-stacked\"], [\"selected\", \"\", 3, \"color\"], [3, \"title\", \"items\", \"active_item\"], [3, \"removed\"], [\"matChipRemove\", \"\"]],\n      template: function ChipsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          const _r1 = i0.ɵɵgetCurrentView();\n          i0.ɵɵelementStart(0, \"section\", 3)(1, \"div\", 4);\n          i0.ɵɵrepeaterCreate(2, ChipsComponent_For_3_Template, 2, 3, \"div\", 5, i0.ɵɵrepeaterTrackByIdentity);\n          i0.ɵɵelementStart(4, \"div\", 6)(5, \"div\", 7)(6, \"div\", 8)(7, \"div\", 9)(8, \"h2\");\n          i0.ɵɵtext(9, \"Basic chips\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(10, \"div\", 10)(11, \"mat-chip-listbox\", 11)(12, \"mat-chip-option\");\n          i0.ɵɵtext(13, \"One fish\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(14, \"mat-chip-option\");\n          i0.ɵɵtext(15, \"Two fish\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(16, \"mat-chip-option\", 12);\n          i0.ɵɵtext(17, \"Accent fish\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(18, \"mat-chip-option\", 13);\n          i0.ɵɵtext(19, \"Warn fish\");\n          i0.ɵɵelementEnd()()()()()();\n          i0.ɵɵelementStart(20, \"div\", 6)(21, \"div\", 7)(22, \"div\", 8)(23, \"div\", 9)(24, \"h2\");\n          i0.ɵɵtext(25, \"Chips Autocomplete\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(26, \"div\", 10)(27, \"form\")(28, \"mat-form-field\", 14)(29, \"mat-label\");\n          i0.ɵɵtext(30, \"Favorite Fruits\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(31, \"mat-chip-grid\", 15, 0);\n          i0.ɵɵrepeaterCreate(33, ChipsComponent_For_34_Template, 5, 2, \"mat-chip-row\", null, i0.ɵɵrepeaterTrackByIdentity);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(35, \"input\", 16, 1);\n          i0.ɵɵlistener(\"matChipInputTokenEnd\", function ChipsComponent_Template_input_matChipInputTokenEnd_35_listener($event) {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.add($event));\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(37, \"mat-autocomplete\", 17, 2);\n          i0.ɵɵlistener(\"optionSelected\", function ChipsComponent_Template_mat_autocomplete_optionSelected_37_listener($event) {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.selected($event));\n          });\n          i0.ɵɵrepeaterCreate(39, ChipsComponent_For_40_Template, 2, 2, \"mat-option\", 18, i0.ɵɵrepeaterTrackByIdentity);\n          i0.ɵɵpipe(41, \"async\");\n          i0.ɵɵelementEnd()()()()()()();\n          i0.ɵɵelementStart(42, \"div\", 6)(43, \"div\", 7)(44, \"div\", 8)(45, \"div\", 9)(46, \"h2\");\n          i0.ɵɵtext(47, \"Chips avatar\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(48, \"div\", 10)(49, \"mat-chip-listbox\", 19)(50, \"mat-chip\");\n          i0.ɵɵelement(51, \"img\", 20);\n          i0.ɵɵtext(52, \" Dog one \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(53, \"mat-chip\", 21);\n          i0.ɵɵelement(54, \"img\", 22);\n          i0.ɵɵtext(55, \" Dog two \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(56, \"mat-chip\", 23);\n          i0.ɵɵelement(57, \"img\", 24);\n          i0.ɵɵtext(58, \" Dog three \");\n          i0.ɵɵelementEnd()()()()()();\n          i0.ɵɵelementStart(59, \"div\", 6)(60, \"div\", 7)(61, \"div\", 8)(62, \"div\", 9)(63, \"h2\");\n          i0.ɵɵtext(64, \"Stacked chips\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(65, \"div\", 10)(66, \"mat-chip-listbox\", 25);\n          i0.ɵɵrepeaterCreate(67, ChipsComponent_For_68_Template, 2, 2, \"mat-chip-option\", 26, i0.ɵɵrepeaterTrackByIdentity);\n          i0.ɵɵelementEnd()()()()()()();\n        }\n        if (rf & 2) {\n          const chipGrid_r8 = i0.ɵɵreference(32);\n          const auto_r9 = i0.ɵɵreference(38);\n          i0.ɵɵadvance(2);\n          i0.ɵɵrepeater(ctx.breadscrums);\n          i0.ɵɵadvance(31);\n          i0.ɵɵrepeater(ctx.fruits);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"formControl\", ctx.fruitCtrl)(\"matChipInputFor\", chipGrid_r8)(\"matAutocomplete\", auto_r9)(\"matChipInputSeparatorKeyCodes\", ctx.separatorKeysCodes);\n          i0.ɵɵadvance(4);\n          i0.ɵɵrepeater(i0.ɵɵpipeBind1(41, 4, ctx.filteredFruits));\n          i0.ɵɵadvance(28);\n          i0.ɵɵrepeater(ctx.availableColors);\n        }\n      },\n      dependencies: [BreadcrumbComponent, MatChipsModule, i1.MatChip, i1.MatChipAvatar, i1.MatChipGrid, i1.MatChipInput, i1.MatChipListbox, i1.MatChipOption, i1.MatChipRemove, i1.MatChipRow, FormsModule, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.NgForm, MatFormFieldModule, i3.MatFormField, i3.MatLabel, MatIconModule, i4.MatIcon, MatAutocompleteModule, i5.MatAutocomplete, i6.MatOption, i5.MatAutocompleteTrigger, ReactiveFormsModule, i2.FormControlDirective, MatOptionModule, AsyncPipe],\n      styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["COMMA","ENTER","UntypedFormControl","FormsModule","ReactiveFormsModule","MatAutocompleteModule","MatChipsModule","map","startWith","AsyncPipe","MatOptionModule","MatIconModule","MatFormFieldModule","BreadcrumbComponent","i0","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵadvance","ɵɵproperty","breadscrum_r2","title","items","active","ɵɵlistener","ChipsComponent_For_34_Template_mat_chip_row_removed_0_listener","fruit_r4","ɵɵrestoreView","_r3","$implicit","ctx_r4","ɵɵnextContext","ɵɵresetView","remove","ɵɵtext","ɵɵtextInterpolate1","fruit_r6","chip_r7","color","name","ChipsComponent","constructor","breadscrums","visible","selectable","removable","separatorKeysCodes","fruitCtrl","fruits","allFruits","availableColors","filteredFruits","valueChanges","pipe","fruit","_filter","slice","add","event","input","value","trim","push","setValue","index","indexOf","splice","selected","option","viewValue","fruitInput","nativeElement","filterValue","toLowerCase","filter","selectors","viewQuery","ChipsComponent_Query","rf","ctx","ɵɵrepeaterCreate","ChipsComponent_For_3_Template","ɵɵrepeaterTrackByIdentity","ChipsComponent_For_34_Template","ChipsComponent_Template_input_matChipInputTokenEnd_35_listener","$event","_r1","ChipsComponent_Template_mat_autocomplete_optionSelected_37_listener","ChipsComponent_For_40_Template","ChipsComponent_For_68_Template","ɵɵrepeater","chipGrid_r8","auto_r9","ɵɵpipeBind1","i1","MatChip","MatChipAvatar","MatChipGrid","MatChipInput","MatChipListbox","MatChipOption","MatChipRemove","MatChipRow","i2","ɵNgNoValidate","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","NgForm","i3","MatFormField","MatLabel","i4","MatIcon","i5","MatAutocomplete","i6","MatOption","MatAutocompleteTrigger","FormControlDirective","styles"],"sources":["/home/hugo/Documentos/TF-594345-hdelboy/themeforest-jtUTY/smart/source/main/src/app/ui/chips/chips.component.ts","/home/hugo/Documentos/TF-594345-hdelboy/themeforest-jtUTY/smart/source/main/src/app/ui/chips/chips.component.html"],"sourcesContent":["import { COMMA, ENTER } from '@angular/cdk/keycodes';\r\nimport { Component, ElementRef, ViewChild } from '@angular/core';\r\nimport { UntypedFormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatAutocompleteSelectedEvent, MatAutocomplete, MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatChipInputEvent, MatChipsModule } from '@angular/material/chips';\r\nimport { Observable } from 'rxjs';\r\nimport { map, startWith } from 'rxjs/operators';\r\nimport { AsyncPipe } from '@angular/common';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { BreadcrumbComponent } from '@shared/components/breadcrumb/breadcrumb.component';\r\nexport interface ChipColor {\r\n  name: string;\r\n  color: string;\r\n}\r\nexport interface Fruit {\r\n  name: string;\r\n}\r\n@Component({\r\n  selector: 'app-chips',\r\n  templateUrl: './chips.component.html',\r\n  styleUrls: ['./chips.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    BreadcrumbComponent,\r\n    MatChipsModule,\r\n    FormsModule,\r\n    MatFormFieldModule,\r\n    MatIconModule,\r\n    MatAutocompleteModule,\r\n    ReactiveFormsModule,\r\n    MatOptionModule,\r\n    AsyncPipe,\r\n  ],\r\n})\r\nexport class ChipsComponent {\r\n  breadscrums = [\r\n    {\r\n      title: 'Chips',\r\n      items: ['UI'],\r\n      active: 'Chips',\r\n    },\r\n  ];\r\n\r\n  visible = true;\r\n  selectable = true;\r\n  removable = true;\r\n  separatorKeysCodes: number[] = [ENTER, COMMA];\r\n  fruitCtrl = new UntypedFormControl();\r\n  filteredFruits: Observable<string[]>;\r\n  fruits: string[] = ['Lemon'];\r\n  allFruits: string[] = ['Apple', 'Lemon', 'Lime', 'Orange', 'Strawberry'];\r\n  availableColors: ChipColor[] = [\r\n    { name: 'none', color: '' },\r\n    { name: 'Primary', color: 'primary' },\r\n    { name: 'Accent', color: 'accent' },\r\n    { name: 'Warn', color: 'warn' },\r\n  ];\r\n  @ViewChild('fruitInput', { static: true })\r\n  fruitInput?: ElementRef<HTMLInputElement>;\r\n  @ViewChild('auto', { static: true }) matAutocomplete?: MatAutocomplete;\r\n  constructor() {\r\n    this.filteredFruits = this.fruitCtrl.valueChanges.pipe(\r\n      startWith(null),\r\n      map((fruit: string | null) =>\r\n        fruit ? this._filter(fruit) : this.allFruits.slice()\r\n      )\r\n    );\r\n  }\r\n  add(event: MatChipInputEvent): void {\r\n    const input = event.input;\r\n    const value = event.value;\r\n    // Add our fruit\r\n    if ((value || '').trim()) {\r\n      this.fruits.push(value.trim());\r\n    }\r\n    // Reset the input value\r\n    if (input) {\r\n      input.value = '';\r\n    }\r\n    this.fruitCtrl.setValue(null);\r\n  }\r\n  remove(fruit: string): void {\r\n    const index = this.fruits.indexOf(fruit);\r\n    if (index >= 0) {\r\n      this.fruits.splice(index, 1);\r\n    }\r\n  }\r\n  selected(event: MatAutocompleteSelectedEvent): void {\r\n    this.fruits.push(event.option.viewValue);\r\n\r\n    if (this.fruitInput) {\r\n      this.fruitInput.nativeElement.value = '';\r\n    }\r\n    this.fruitCtrl.setValue(null);\r\n  }\r\n  private _filter(value: string): string[] {\r\n    const filterValue = value.toLowerCase();\r\n    return this.allFruits.filter(\r\n      (fruit) => fruit.toLowerCase().indexOf(filterValue) === 0\r\n    );\r\n  }\r\n}\r\n","<section class=\"content\">\n  <div class=\"content-block\">\n    @for (breadscrum of breadscrums; track breadscrum) {\n    <div class=\"block-header\">\n      <!-- breadcrumb -->\n      <app-breadcrumb [title]=\"breadscrum.title\" [items]=\"breadscrum.items\" [active_item]=\"breadscrum.active\">\n      </app-breadcrumb>\n    </div>\n    }\n    <div class=\"row\">\n      <div class=\"col-lg-12 col-md-12 col-sm-12 col-12\">\n        <div class=\"card\">\n          <div class=\"header\">\n            <h2>Basic chips</h2>\n          </div>\n          <div class=\"body\">\n            <mat-chip-listbox aria-label=\"Fish selection\">\n              <mat-chip-option>One fish</mat-chip-option>\n              <mat-chip-option>Two fish</mat-chip-option>\n              <mat-chip-option color=\"accent\" selected>Accent fish</mat-chip-option>\n              <mat-chip-option color=\"warn\">Warn fish</mat-chip-option>\n            </mat-chip-listbox>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-lg-12 col-md-12 col-sm-12 col-12\">\n        <div class=\"card\">\n          <div class=\"header\">\n            <h2>Chips Autocomplete</h2>\n          </div>\n          <div class=\"body\">\n            <form>\n              <mat-form-field class=\"example-chip-list\" appearance=\"fill\">\n                <mat-label>Favorite Fruits</mat-label>\n                <mat-chip-grid #chipGrid aria-label=\"Fruit selection\">\n                  @for (fruit of fruits; track fruit) {\n                  <mat-chip-row (removed)=\"remove(fruit)\">\n                    {{fruit}}\n                    <button matChipRemove [attr.aria-label]=\"'remove ' + fruit\">\n                      <mat-icon>cancel</mat-icon>\n                    </button>\n                  </mat-chip-row>\n                  }\n                </mat-chip-grid>\n                <input placeholder=\"New Fruit...\" #fruitInput [formControl]=\"fruitCtrl\" [matChipInputFor]=\"chipGrid\"\n                  [matAutocomplete]=\"auto\" [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\n                  (matChipInputTokenEnd)=\"add($event)\" />\n                <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"selected($event)\">\n                  @for (fruit of filteredFruits | async; track fruit) {\n                  <mat-option [value]=\"fruit\">\n                    {{fruit}}\n                  </mat-option>\n                  }\n                </mat-autocomplete>\n              </mat-form-field>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-lg-12 col-md-12 col-sm-12 col-12\">\n        <div class=\"card\">\n          <div class=\"header\">\n            <h2>Chips avatar</h2>\n          </div>\n          <div class=\"body\">\n            <mat-chip-listbox aria-label=\"Dog selection\">\n              <mat-chip>\n                <img matChipAvatar src=\"../../../assets/images/user/user1.jpg\" alt=\"User image\" />\n                Dog one\n              </mat-chip>\n              <mat-chip color=\"primary\">\n                <img matChipAvatar src=\"../../../assets/images/user/user3.jpg\" alt=\"User image\" />\n                Dog two\n              </mat-chip>\n              <mat-chip color=\"accent\">\n                <img matChipAvatar src=\"../../../assets/images/user/user2.jpg\" alt=\"User image\" />\n                Dog three\n              </mat-chip>\n            </mat-chip-listbox>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-lg-12 col-md-12 col-sm-12 col-12\">\n        <div class=\"card\">\n          <div class=\"header\">\n            <h2>Stacked chips</h2>\n          </div>\n          <div class=\"body\">\n            <mat-chip-listbox class=\"mat-mdc-chip-set-stacked\" aria-label=\"Color selection\">\n              @for (chip of availableColors; track chip) {\n              <mat-chip-option selected [color]=\"chip.color\">\n                {{chip.name}}\n              </mat-chip-option>\n              }\n            </mat-chip-listbox>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}