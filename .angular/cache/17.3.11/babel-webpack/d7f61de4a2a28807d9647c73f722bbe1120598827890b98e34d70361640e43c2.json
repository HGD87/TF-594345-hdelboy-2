{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../service/auth.service\";\nexport class ErrorInterceptor {\n  constructor(authenticationService) {\n    this.authenticationService = authenticationService;\n  }\n  intercept(request, next) {\n    return next.handle(request).pipe(catchError(err => {\n      if (err.status === 401) {\n        // auto logout if 401 response returned from api\n        this.authenticationService.logout();\n        location.reload();\n      }\n      const error = err.error.message || err.statusText;\n      return throwError(error);\n    }));\n  }\n  static {\n    this.ɵfac = function ErrorInterceptor_Factory(t) {\n      return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ErrorInterceptor,\n      factory: ErrorInterceptor.ɵfac\n    });\n  }\n}","map":{"version":3,"names":["throwError","catchError","ErrorInterceptor","constructor","authenticationService","intercept","request","next","handle","pipe","err","status","logout","location","reload","error","message","statusText","i0","ɵɵinject","i1","AuthService","factory","ɵfac"],"sources":["/home/hugo/Documentos/TF-594345-hdelboy/themeforest-jtUTY/smart/source/main/src/app/core/interceptor/error.interceptor.ts"],"sourcesContent":["import { AuthService } from '../service/auth.service';\r\nimport { Injectable } from '@angular/core';\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpInterceptor,\r\n} from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class ErrorInterceptor implements HttpInterceptor {\r\n  constructor(private authenticationService: AuthService) { }\r\n\r\n  intercept(\r\n    request: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    return next.handle(request).pipe(\r\n      catchError((err) => {\r\n        if (err.status === 401) {\r\n          // auto logout if 401 response returned from api\r\n          this.authenticationService.logout();\r\n          location.reload();\r\n        }\r\n\r\n        const error = err.error.message || err.statusText;\r\n        return throwError(error);\r\n      })\r\n    );\r\n  }\r\n}\r\n"],"mappings":"AAQA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;;;AAG3C,OAAM,MAAOC,gBAAgB;EAC3BC,YAAoBC,qBAAkC;IAAlC,KAAAA,qBAAqB,GAArBA,qBAAqB;EAAiB;EAE1DC,SAASA,CACPC,OAAyB,EACzBC,IAAiB;IAEjB,OAAOA,IAAI,CAACC,MAAM,CAACF,OAAO,CAAC,CAACG,IAAI,CAC9BR,UAAU,CAAES,GAAG,IAAI;MACjB,IAAIA,GAAG,CAACC,MAAM,KAAK,GAAG,EAAE;QACtB;QACA,IAAI,CAACP,qBAAqB,CAACQ,MAAM,EAAE;QACnCC,QAAQ,CAACC,MAAM,EAAE;;MAGnB,MAAMC,KAAK,GAAGL,GAAG,CAACK,KAAK,CAACC,OAAO,IAAIN,GAAG,CAACO,UAAU;MACjD,OAAOjB,UAAU,CAACe,KAAK,CAAC;IAC1B,CAAC,CAAC,CACH;EACH;;;uBAnBWb,gBAAgB,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA;IAAA;EAAA;;;aAAhBnB,gBAAgB;MAAAoB,OAAA,EAAhBpB,gBAAgB,CAAAqB;IAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}