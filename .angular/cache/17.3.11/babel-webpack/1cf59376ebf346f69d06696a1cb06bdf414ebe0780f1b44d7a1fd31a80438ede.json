{"ast":null,"code":"import _asyncToGenerator from \"/home/hugo/Documentos/TF-594345-hdelboy/themeforest-jtUTY/smart/source/main/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, inject, Injectable, ElementRef, Renderer2, makeEnvironmentProviders, Directive, Input, Output, HostListener, Pipe } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nconst NGX_MASK_CONFIG = new InjectionToken('ngx-mask config');\nconst NEW_CONFIG = new InjectionToken('new ngx-mask config');\nconst INITIAL_CONFIG = new InjectionToken('initial ngx-mask config');\nconst initialConfig = {\n  suffix: '',\n  prefix: '',\n  thousandSeparator: ' ',\n  decimalMarker: ['.', ','],\n  clearIfNotMatch: false,\n  showTemplate: false,\n  showMaskTyped: false,\n  placeHolderCharacter: '_',\n  dropSpecialCharacters: true,\n  hiddenInput: undefined,\n  shownMaskExpression: '',\n  separatorLimit: '',\n  allowNegativeNumbers: false,\n  validation: true,\n  // eslint-disable-next-line @typescript-eslint/quotes\n  specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\"', \"'\"],\n  leadZeroDateTime: false,\n  apm: false,\n  leadZero: false,\n  keepCharacterPositions: false,\n  triggerOnMaskChange: false,\n  inputTransformFn: value => value,\n  outputTransformFn: value => value,\n  maskFilled: new EventEmitter(),\n  patterns: {\n    '0': {\n      pattern: new RegExp('\\\\d')\n    },\n    '9': {\n      pattern: new RegExp('\\\\d'),\n      optional: true\n    },\n    X: {\n      pattern: new RegExp('\\\\d'),\n      symbol: '*'\n    },\n    A: {\n      pattern: new RegExp('[a-zA-Z0-9]')\n    },\n    S: {\n      pattern: new RegExp('[a-zA-Z]')\n    },\n    U: {\n      pattern: new RegExp('[A-Z]')\n    },\n    L: {\n      pattern: new RegExp('[a-z]')\n    },\n    d: {\n      pattern: new RegExp('\\\\d')\n    },\n    m: {\n      pattern: new RegExp('\\\\d')\n    },\n    M: {\n      pattern: new RegExp('\\\\d')\n    },\n    H: {\n      pattern: new RegExp('\\\\d')\n    },\n    h: {\n      pattern: new RegExp('\\\\d')\n    },\n    s: {\n      pattern: new RegExp('\\\\d')\n    }\n  }\n};\nconst timeMasks = [\"Hh:m0:s0\" /* MaskExpression.HOURS_MINUTES_SECONDS */, \"Hh:m0\" /* MaskExpression.HOURS_MINUTES */, \"m0:s0\" /* MaskExpression.MINUTES_SECONDS */];\nconst withoutValidation = [\"percent\" /* MaskExpression.PERCENT */, \"Hh\" /* MaskExpression.HOURS_HOUR */, \"s0\" /* MaskExpression.SECONDS */, \"m0\" /* MaskExpression.MINUTES */, \"separator\" /* MaskExpression.SEPARATOR */, \"d0/M0/0000\" /* MaskExpression.DAYS_MONTHS_YEARS */, \"d0/M0\" /* MaskExpression.DAYS_MONTHS */, \"d0\" /* MaskExpression.DAYS */, \"M0\" /* MaskExpression.MONTHS */];\nclass NgxMaskApplierService {\n  constructor() {\n    this._config = inject(NGX_MASK_CONFIG);\n    this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n    this.hiddenInput = this._config.hiddenInput;\n    this.clearIfNotMatch = this._config.clearIfNotMatch;\n    this.specialCharacters = this._config.specialCharacters;\n    this.patterns = this._config.patterns;\n    this.prefix = this._config.prefix;\n    this.suffix = this._config.suffix;\n    this.thousandSeparator = this._config.thousandSeparator;\n    this.decimalMarker = this._config.decimalMarker;\n    this.showMaskTyped = this._config.showMaskTyped;\n    this.placeHolderCharacter = this._config.placeHolderCharacter;\n    this.validation = this._config.validation;\n    this.separatorLimit = this._config.separatorLimit;\n    this.allowNegativeNumbers = this._config.allowNegativeNumbers;\n    this.leadZeroDateTime = this._config.leadZeroDateTime;\n    this.leadZero = this._config.leadZero;\n    this.apm = this._config.apm;\n    this.inputTransformFn = this._config.inputTransformFn;\n    this.outputTransformFn = this._config.outputTransformFn;\n    this.keepCharacterPositions = this._config.keepCharacterPositions;\n    this._shift = new Set();\n    this.plusOnePosition = false;\n    this.maskExpression = '';\n    this.actualValue = '';\n    this.showKeepCharacterExp = '';\n    this.shownMaskExpression = '';\n    this.deletedSpecialCharacter = false;\n    this._formatWithSeparators = (str, thousandSeparatorChar, decimalChars, precision) => {\n      let x = [];\n      let decimalChar = '';\n      if (Array.isArray(decimalChars)) {\n        const regExp = new RegExp(decimalChars.map(v => '[\\\\^$.|?*+()'.indexOf(v) >= 0 ? `\\\\${v}` : v).join('|'));\n        x = str.split(regExp);\n        decimalChar = str.match(regExp)?.[0] ?? \"\" /* MaskExpression.EMPTY_STRING */;\n      } else {\n        x = str.split(decimalChars);\n        decimalChar = decimalChars;\n      }\n      const decimals = x.length > 1 ? `${decimalChar}${x[1]}` : \"\" /* MaskExpression.EMPTY_STRING */;\n      let res = x[0] ?? \"\" /* MaskExpression.EMPTY_STRING */;\n      const separatorLimit = this.separatorLimit.replace(/\\s/g, \"\" /* MaskExpression.EMPTY_STRING */);\n      if (separatorLimit && +separatorLimit) {\n        if (res[0] === \"-\" /* MaskExpression.MINUS */) {\n          res = `-${res.slice(1, res.length).slice(0, separatorLimit.length)}`;\n        } else {\n          res = res.slice(0, separatorLimit.length);\n        }\n      }\n      const rgx = /(\\d+)(\\d{3})/;\n      while (thousandSeparatorChar && rgx.test(res)) {\n        res = res.replace(rgx, '$1' + thousandSeparatorChar + '$2');\n      }\n      if (precision === undefined) {\n        return res + decimals;\n      } else if (precision === 0) {\n        return res;\n      }\n      return res + decimals.substring(0, precision + 1);\n    };\n    this.percentage = str => {\n      const sanitizedStr = str.replace(',', '.');\n      const value = Number(this.allowNegativeNumbers && str.includes(\"-\" /* MaskExpression.MINUS */) ? sanitizedStr.slice(1, str.length) : sanitizedStr);\n      return !isNaN(value) && value >= 0 && value <= 100;\n    };\n    this.getPrecision = maskExpression => {\n      const x = maskExpression.split(\".\" /* MaskExpression.DOT */);\n      if (x.length > 1) {\n        return Number(x[x.length - 1]);\n      }\n      return Infinity;\n    };\n    this.checkAndRemoveSuffix = inputValue => {\n      for (let i = this.suffix?.length - 1; i >= 0; i--) {\n        const substr = this.suffix.substring(i, this.suffix?.length);\n        if (inputValue.includes(substr) && i !== this.suffix?.length - 1 && (i - 1 < 0 || !inputValue.includes(this.suffix.substring(i - 1, this.suffix?.length)))) {\n          return inputValue.replace(substr, \"\" /* MaskExpression.EMPTY_STRING */);\n        }\n      }\n      return inputValue;\n    };\n    this.checkInputPrecision = (inputValue, precision, decimalMarker) => {\n      if (precision < Infinity) {\n        // TODO need think about decimalMarker\n        if (Array.isArray(decimalMarker)) {\n          const marker = decimalMarker.find(dm => dm !== this.thousandSeparator);\n          // eslint-disable-next-line no-param-reassign\n          decimalMarker = marker ? marker : decimalMarker[0];\n        }\n        const precisionRegEx = new RegExp(this._charToRegExpExpression(decimalMarker) + `\\\\d{${precision}}.*$`);\n        const precisionMatch = inputValue.match(precisionRegEx);\n        const precisionMatchLength = (precisionMatch && precisionMatch[0]?.length) ?? 0;\n        if (precisionMatchLength - 1 > precision) {\n          const diff = precisionMatchLength - 1 - precision;\n          // eslint-disable-next-line no-param-reassign\n          inputValue = inputValue.substring(0, inputValue.length - diff);\n        }\n        if (precision === 0 && this._compareOrIncludes(inputValue[inputValue.length - 1], decimalMarker, this.thousandSeparator)) {\n          // eslint-disable-next-line no-param-reassign\n          inputValue = inputValue.substring(0, inputValue.length - 1);\n        }\n      }\n      return inputValue;\n    };\n  }\n  applyMaskWithPattern(inputValue, maskAndPattern) {\n    const [mask, customPattern] = maskAndPattern;\n    this.customPattern = customPattern;\n    return this.applyMask(inputValue, mask);\n  }\n  applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  cb = () => {}) {\n    if (!maskExpression || typeof inputValue !== 'string') {\n      return \"\" /* MaskExpression.EMPTY_STRING */;\n    }\n    let cursor = 0;\n    let result = '';\n    let multi = false;\n    let backspaceShift = false;\n    let shift = 1;\n    let stepBack = false;\n    if (inputValue.slice(0, this.prefix.length) === this.prefix) {\n      // eslint-disable-next-line no-param-reassign\n      inputValue = inputValue.slice(this.prefix.length, inputValue.length);\n    }\n    if (!!this.suffix && inputValue?.length > 0) {\n      // eslint-disable-next-line no-param-reassign\n      inputValue = this.checkAndRemoveSuffix(inputValue);\n    }\n    if (inputValue === '(' && this.prefix) {\n      // eslint-disable-next-line no-param-reassign\n      inputValue = '';\n    }\n    const inputArray = inputValue.toString().split(\"\" /* MaskExpression.EMPTY_STRING */);\n    if (this.allowNegativeNumbers && inputValue.slice(cursor, cursor + 1) === \"-\" /* MaskExpression.MINUS */) {\n      result += inputValue.slice(cursor, cursor + 1);\n    }\n    if (maskExpression === \"IP\" /* MaskExpression.IP */) {\n      const valuesIP = inputValue.split(\".\" /* MaskExpression.DOT */);\n      this.ipError = this._validIP(valuesIP);\n      // eslint-disable-next-line no-param-reassign\n      maskExpression = '099.099.099.099';\n    }\n    const arr = [];\n    for (let i = 0; i < inputValue.length; i++) {\n      if (inputValue[i]?.match('\\\\d')) {\n        arr.push(inputValue[i] ?? \"\" /* MaskExpression.EMPTY_STRING */);\n      }\n    }\n    if (maskExpression === \"CPF_CNPJ\" /* MaskExpression.CPF_CNPJ */) {\n      this.cpfCnpjError = arr.length !== 11 && arr.length !== 14;\n      if (arr.length > 11) {\n        // eslint-disable-next-line no-param-reassign\n        maskExpression = '00.000.000/0000-00';\n      } else {\n        // eslint-disable-next-line no-param-reassign\n        maskExpression = '000.000.000-00';\n      }\n    }\n    if (maskExpression.startsWith(\"percent\" /* MaskExpression.PERCENT */)) {\n      if (inputValue.match('[a-z]|[A-Z]') ||\n      // eslint-disable-next-line no-useless-escape\n      inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/.]/) && !backspaced) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = this._stripToDecimal(inputValue);\n        const precision = this.getPrecision(maskExpression);\n        // eslint-disable-next-line no-param-reassign\n        inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n      }\n      const decimalMarker = typeof this.decimalMarker === 'string' ? this.decimalMarker : \".\" /* MaskExpression.DOT */;\n      if (inputValue.indexOf(decimalMarker) > 0 && !this.percentage(inputValue.substring(0, inputValue.indexOf(decimalMarker)))) {\n        let base = inputValue.substring(0, inputValue.indexOf(decimalMarker) - 1);\n        if (this.allowNegativeNumbers && inputValue.slice(cursor, cursor + 1) === \"-\" /* MaskExpression.MINUS */ && !backspaced) {\n          base = inputValue.substring(0, inputValue.indexOf(decimalMarker));\n        }\n        // eslint-disable-next-line no-param-reassign\n        inputValue = `${base}${inputValue.substring(inputValue.indexOf(decimalMarker), inputValue.length)}`;\n      }\n      let value = '';\n      this.allowNegativeNumbers && inputValue.slice(cursor, cursor + 1) === \"-\" /* MaskExpression.MINUS */ ? value = `${\"-\" /* MaskExpression.MINUS */}${inputValue.slice(cursor + 1, cursor + inputValue.length)}` : value = inputValue;\n      if (this.percentage(value)) {\n        result = this._splitPercentZero(inputValue);\n      } else {\n        result = this._splitPercentZero(inputValue.substring(0, inputValue.length - 1));\n      }\n    } else if (maskExpression.startsWith(\"separator\" /* MaskExpression.SEPARATOR */)) {\n      if (inputValue.match('[wа-яА-Я]') || inputValue.match('[ЁёА-я]') || inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-@#!$%\\\\^&*()_£¬'+|~=`{}\\]:\";<>.?/]/) || inputValue.match('[^A-Za-z0-9,]')) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = this._stripToDecimal(inputValue);\n      }\n      const precision = this.getPrecision(maskExpression);\n      const decimalMarker = Array.isArray(this.decimalMarker) ? \".\" /* MaskExpression.DOT */ : this.decimalMarker;\n      if (precision === 0) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = this.allowNegativeNumbers ? inputValue.length > 2 && inputValue[0] === \"-\" /* MaskExpression.MINUS */ && inputValue[1] === \"0\" /* MaskExpression.NUMBER_ZERO */ && inputValue[2] !== this.thousandSeparator && inputValue[2] !== \",\" /* MaskExpression.COMMA */ && inputValue[2] !== \".\" /* MaskExpression.DOT */ ? '-' + inputValue.slice(2, inputValue.length) : inputValue[0] === \"0\" /* MaskExpression.NUMBER_ZERO */ && inputValue.length > 1 && inputValue[1] !== this.thousandSeparator && inputValue[1] !== \",\" /* MaskExpression.COMMA */ && inputValue[1] !== \".\" /* MaskExpression.DOT */ ? inputValue.slice(1, inputValue.length) : inputValue : inputValue.length > 1 && inputValue[0] === \"0\" /* MaskExpression.NUMBER_ZERO */ && inputValue[1] !== this.thousandSeparator && inputValue[1] !== \",\" /* MaskExpression.COMMA */ && inputValue[1] !== \".\" /* MaskExpression.DOT */ ? inputValue.slice(1, inputValue.length) : inputValue;\n      } else {\n        if (inputValue[0] === decimalMarker && inputValue.length > 1) {\n          // eslint-disable-next-line no-param-reassign\n          inputValue = \"0\" /* MaskExpression.NUMBER_ZERO */ + inputValue.slice(0, inputValue.length + 1);\n          this.plusOnePosition = true;\n        }\n        if (inputValue[0] === \"0\" /* MaskExpression.NUMBER_ZERO */ && inputValue[1] !== decimalMarker && inputValue[1] !== this.thousandSeparator) {\n          // eslint-disable-next-line no-param-reassign\n          inputValue = inputValue.length > 1 ? inputValue.slice(0, 1) + decimalMarker + inputValue.slice(1, inputValue.length + 1) : inputValue;\n          this.plusOnePosition = true;\n        }\n        if (this.allowNegativeNumbers && inputValue[0] === \"-\" /* MaskExpression.MINUS */ && (inputValue[1] === decimalMarker || inputValue[1] === \"0\" /* MaskExpression.NUMBER_ZERO */)) {\n          // eslint-disable-next-line no-param-reassign\n          inputValue = inputValue[1] === decimalMarker && inputValue.length > 2 ? inputValue.slice(0, 1) + \"0\" /* MaskExpression.NUMBER_ZERO */ + inputValue.slice(1, inputValue.length) : inputValue[1] === \"0\" /* MaskExpression.NUMBER_ZERO */ && inputValue.length > 2 && inputValue[2] !== decimalMarker ? inputValue.slice(0, 2) + decimalMarker + inputValue.slice(2, inputValue.length) : inputValue;\n          this.plusOnePosition = true;\n        }\n      }\n      if (backspaced) {\n        const inputValueAfterZero = inputValue.slice(this._findFirstNonZeroDigitIndex(inputValue), inputValue.length);\n        const positionOfZeroOrDecimalMarker = inputValue[position] === \"0\" /* MaskExpression.NUMBER_ZERO */ || inputValue[position] === decimalMarker;\n        const zeroIndexNumberZero = inputValue[0] === \"0\" /* MaskExpression.NUMBER_ZERO */;\n        const zeroIndexMinus = inputValue[0] === \"-\" /* MaskExpression.MINUS */;\n        const zeroIndexThousand = inputValue[0] === this.thousandSeparator;\n        const firstIndexDecimalMarker = inputValue[1] === decimalMarker;\n        const firstIndexNumberZero = inputValue[1] === \"0\" /* MaskExpression.NUMBER_ZERO */;\n        const secondIndexDecimalMarker = inputValue[2] === decimalMarker;\n        if (zeroIndexNumberZero && firstIndexDecimalMarker && positionOfZeroOrDecimalMarker && position < 2) {\n          // eslint-disable-next-line no-param-reassign\n          inputValue = inputValueAfterZero;\n        }\n        if (zeroIndexMinus && firstIndexNumberZero && secondIndexDecimalMarker && positionOfZeroOrDecimalMarker && position < 3) {\n          // eslint-disable-next-line no-param-reassign\n          inputValue = \"-\" /* MaskExpression.MINUS */ + inputValueAfterZero;\n        }\n        if (inputValueAfterZero !== \"-\" /* MaskExpression.MINUS */ && (position === 0 && (zeroIndexNumberZero || zeroIndexThousand) || this.allowNegativeNumbers && position === 1 && zeroIndexMinus && !firstIndexNumberZero)) {\n          // eslint-disable-next-line no-param-reassign\n          inputValue = zeroIndexMinus ? \"-\" /* MaskExpression.MINUS */ + inputValueAfterZero : inputValueAfterZero;\n        }\n      }\n      // TODO: we had different rexexps here for the different cases... but tests dont seam to bother - check this\n      //  separator: no COMMA, dot-sep: no SPACE, COMMA OK, comma-sep: no SPACE, COMMA OK\n      const thousandSeparatorCharEscaped = this._charToRegExpExpression(this.thousandSeparator);\n      let invalidChars = '@#!$%^&*()_+|~=`{}\\\\[\\\\]:\\\\s,\\\\.\";<>?\\\\/'.replace(thousandSeparatorCharEscaped, '');\n      //.replace(decimalMarkerEscaped, '');\n      if (Array.isArray(this.decimalMarker)) {\n        for (const marker of this.decimalMarker) {\n          invalidChars = invalidChars.replace(this._charToRegExpExpression(marker), \"\" /* MaskExpression.EMPTY_STRING */);\n        }\n      } else {\n        invalidChars = invalidChars.replace(this._charToRegExpExpression(this.decimalMarker), '');\n      }\n      const invalidCharRegexp = new RegExp('[' + invalidChars + ']');\n      if (inputValue.match(invalidCharRegexp)) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = inputValue.substring(0, inputValue.length - 1);\n      }\n      // eslint-disable-next-line no-param-reassign\n      inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n      const strForSep = inputValue.replace(new RegExp(thousandSeparatorCharEscaped, 'g'), '');\n      result = this._formatWithSeparators(strForSep, this.thousandSeparator, this.decimalMarker, precision);\n      const commaShift = result.indexOf(\",\" /* MaskExpression.COMMA */) - inputValue.indexOf(\",\" /* MaskExpression.COMMA */);\n      const shiftStep = result.length - inputValue.length;\n      if (result[position - 1] === this.thousandSeparator && this.prefix && backspaced) {\n        // eslint-disable-next-line no-param-reassign\n        position = position - 1;\n      } else if (shiftStep > 0 && result[position] !== this.thousandSeparator) {\n        backspaceShift = true;\n        let _shift = 0;\n        do {\n          this._shift.add(position + _shift);\n          _shift++;\n        } while (_shift < shiftStep);\n      } else if (result[position - 1] === this.decimalMarker || shiftStep === -4 || shiftStep === -3 || result[position] === this.thousandSeparator) {\n        this._shift.clear();\n        this._shift.add(position - 1);\n      } else if (commaShift !== 0 && position > 0 && !(result.indexOf(\",\" /* MaskExpression.COMMA */) >= position && position > 3) || !(result.indexOf(\".\" /* MaskExpression.DOT */) >= position && position > 3) && shiftStep <= 0) {\n        this._shift.clear();\n        backspaceShift = true;\n        shift = shiftStep;\n        // eslint-disable-next-line no-param-reassign\n        position += shiftStep;\n        this._shift.add(position);\n      } else {\n        this._shift.clear();\n      }\n    } else {\n      for (let i = 0, inputSymbol = inputArray[0]; i < inputArray.length; i++, inputSymbol = inputArray[i] ?? \"\" /* MaskExpression.EMPTY_STRING */) {\n        if (cursor === maskExpression.length) {\n          break;\n        }\n        const symbolStarInPattern = (\"*\" /* MaskExpression.SYMBOL_STAR */ in this.patterns);\n        if (this._checkSymbolMask(inputSymbol, maskExpression[cursor] ?? \"\" /* MaskExpression.EMPTY_STRING */) && maskExpression[cursor + 1] === \"?\" /* MaskExpression.SYMBOL_QUESTION */) {\n          result += inputSymbol;\n          cursor += 2;\n        } else if (maskExpression[cursor + 1] === \"*\" /* MaskExpression.SYMBOL_STAR */ && multi && this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2] ?? \"\" /* MaskExpression.EMPTY_STRING */)) {\n          result += inputSymbol;\n          cursor += 3;\n          multi = false;\n        } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor] ?? \"\" /* MaskExpression.EMPTY_STRING */) && maskExpression[cursor + 1] === \"*\" /* MaskExpression.SYMBOL_STAR */ && !symbolStarInPattern) {\n          result += inputSymbol;\n          multi = true;\n        } else if (maskExpression[cursor + 1] === \"?\" /* MaskExpression.SYMBOL_QUESTION */ && this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2] ?? \"\" /* MaskExpression.EMPTY_STRING */)) {\n          result += inputSymbol;\n          cursor += 3;\n        } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor] ?? \"\" /* MaskExpression.EMPTY_STRING */)) {\n          if (maskExpression[cursor] === \"H\" /* MaskExpression.HOURS */) {\n            if (this.apm ? Number(inputSymbol) > 9 : Number(inputSymbol) > 2) {\n              // eslint-disable-next-line no-param-reassign\n              position = !this.leadZeroDateTime ? position + 1 : position;\n              cursor += 1;\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n              i--;\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n              continue;\n            }\n          }\n          if (maskExpression[cursor] === \"h\" /* MaskExpression.HOUR */) {\n            if (this.apm ? result.length === 1 && Number(result) > 1 || result === '1' && Number(inputSymbol) > 2 || inputValue.slice(cursor - 1, cursor).length === 1 && Number(inputValue.slice(cursor - 1, cursor)) > 2 || inputValue.slice(cursor - 1, cursor) === '1' && Number(inputSymbol) > 2 : result === '2' && Number(inputSymbol) > 3 || (result.slice(cursor - 2, cursor) === '2' || result.slice(cursor - 3, cursor) === '2' || result.slice(cursor - 4, cursor) === '2' || result.slice(cursor - 1, cursor) === '2') && Number(inputSymbol) > 3 && cursor > 10) {\n              // eslint-disable-next-line no-param-reassign\n              position = position + 1;\n              cursor += 1;\n              i--;\n              continue;\n            }\n          }\n          if (maskExpression[cursor] === \"m\" /* MaskExpression.MINUTE */ || maskExpression[cursor] === \"s\" /* MaskExpression.SECOND */) {\n            if (Number(inputSymbol) > 5) {\n              // eslint-disable-next-line no-param-reassign\n              position = !this.leadZeroDateTime ? position + 1 : position;\n              cursor += 1;\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n              i--;\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n              continue;\n            }\n          }\n          const daysCount = 31;\n          const inputValueCursor = inputValue[cursor];\n          const inputValueCursorPlusOne = inputValue[cursor + 1];\n          const inputValueCursorPlusTwo = inputValue[cursor + 2];\n          const inputValueCursorMinusOne = inputValue[cursor - 1];\n          const inputValueCursorMinusTwo = inputValue[cursor - 2];\n          const inputValueSliceMinusThreeMinusOne = inputValue.slice(cursor - 3, cursor - 1);\n          const inputValueSliceMinusOnePlusOne = inputValue.slice(cursor - 1, cursor + 1);\n          const inputValueSliceCursorPlusTwo = inputValue.slice(cursor, cursor + 2);\n          const inputValueSliceMinusTwoCursor = inputValue.slice(cursor - 2, cursor);\n          if (maskExpression[cursor] === \"d\" /* MaskExpression.DAY */) {\n            const maskStartWithMonth = maskExpression.slice(0, 2) === \"M0\" /* MaskExpression.MONTHS */;\n            const startWithMonthInput = maskExpression.slice(0, 2) === \"M0\" /* MaskExpression.MONTHS */ && this.specialCharacters.includes(inputValueCursorMinusTwo);\n            if (Number(inputSymbol) > 3 && this.leadZeroDateTime || !maskStartWithMonth && (Number(inputValueSliceCursorPlusTwo) > daysCount || Number(inputValueSliceMinusOnePlusOne) > daysCount || this.specialCharacters.includes(inputValueCursorPlusOne)) || (startWithMonthInput ? Number(inputValueSliceMinusOnePlusOne) > daysCount || !this.specialCharacters.includes(inputValueCursor) && this.specialCharacters.includes(inputValueCursorPlusTwo) || this.specialCharacters.includes(inputValueCursor) : Number(inputValueSliceCursorPlusTwo) > daysCount || this.specialCharacters.includes(inputValueCursorPlusOne))) {\n              // eslint-disable-next-line no-param-reassign\n              position = !this.leadZeroDateTime ? position + 1 : position;\n              cursor += 1;\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n              i--;\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n              continue;\n            }\n          }\n          if (maskExpression[cursor] === \"M\" /* MaskExpression.MONTH */) {\n            const monthsCount = 12;\n            // mask without day\n            const withoutDays = cursor === 0 && (Number(inputSymbol) > 2 || Number(inputValueSliceCursorPlusTwo) > monthsCount || this.specialCharacters.includes(inputValueCursorPlusOne) && !backspaced);\n            // day<10 && month<12 for input\n            const specialChart = maskExpression.slice(cursor + 2, cursor + 3);\n            const day1monthInput = inputValueSliceMinusThreeMinusOne.includes(specialChart) && maskExpression.includes('d0') && (this.specialCharacters.includes(inputValueCursorMinusTwo) && Number(inputValueSliceMinusOnePlusOne) > monthsCount && !this.specialCharacters.includes(inputValueCursor) || this.specialCharacters.includes(inputValueCursor));\n            //  month<12 && day<10 for input\n            const day2monthInput = Number(inputValueSliceMinusThreeMinusOne) <= daysCount && !this.specialCharacters.includes(inputValueSliceMinusThreeMinusOne) && this.specialCharacters.includes(inputValueCursorMinusOne) && (Number(inputValueSliceCursorPlusTwo) > monthsCount || this.specialCharacters.includes(inputValueCursorPlusOne));\n            // cursor === 5 && without days\n            const day2monthInputDot = Number(inputValueSliceCursorPlusTwo) > monthsCount && cursor === 5 || this.specialCharacters.includes(inputValueCursorPlusOne) && cursor === 5;\n            // // day<10 && month<12 for paste whole data\n            const day1monthPaste = Number(inputValueSliceMinusThreeMinusOne) > daysCount && !this.specialCharacters.includes(inputValueSliceMinusThreeMinusOne) && !this.specialCharacters.includes(inputValueSliceMinusTwoCursor) && Number(inputValueSliceMinusTwoCursor) > monthsCount && maskExpression.includes('d0');\n            // 10<day<31 && month<12 for paste whole data\n            const day2monthPaste = Number(inputValueSliceMinusThreeMinusOne) <= daysCount && !this.specialCharacters.includes(inputValueSliceMinusThreeMinusOne) && !this.specialCharacters.includes(inputValueCursorMinusOne) && Number(inputValueSliceMinusOnePlusOne) > monthsCount;\n            if (Number(inputSymbol) > 1 && this.leadZeroDateTime || withoutDays || day1monthInput || day2monthPaste || day1monthPaste || day2monthInput || day2monthInputDot && !this.leadZeroDateTime) {\n              // eslint-disable-next-line no-param-reassign\n              position = !this.leadZeroDateTime ? position + 1 : position;\n              cursor += 1;\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n              i--;\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n              continue;\n            }\n          }\n          result += inputSymbol;\n          cursor++;\n        } else if (this.specialCharacters.includes(inputSymbol) && maskExpression[cursor] === inputSymbol) {\n          result += inputSymbol;\n          cursor++;\n        } else if (this.specialCharacters.indexOf(maskExpression[cursor] ?? \"\" /* MaskExpression.EMPTY_STRING */) !== -1) {\n          result += maskExpression[cursor];\n          cursor++;\n          this._shiftStep(maskExpression, cursor, inputArray.length);\n          i--;\n        } else if (maskExpression[cursor] === \"9\" /* MaskExpression.NUMBER_NINE */ && this.showMaskTyped) {\n          this._shiftStep(maskExpression, cursor, inputArray.length);\n        } else if (this.patterns[maskExpression[cursor] ?? \"\" /* MaskExpression.EMPTY_STRING */] && this.patterns[maskExpression[cursor] ?? \"\" /* MaskExpression.EMPTY_STRING */]?.optional) {\n          if (!!inputArray[cursor] && maskExpression !== '099.099.099.099' && maskExpression !== '000.000.000-00' && maskExpression !== '00.000.000/0000-00' && !maskExpression.match(/^9+\\.0+$/) && !this.patterns[maskExpression[cursor] ?? \"\" /* MaskExpression.EMPTY_STRING */]?.optional) {\n            result += inputArray[cursor];\n          }\n          if (maskExpression.includes(\"9\" /* MaskExpression.NUMBER_NINE */ + \"*\" /* MaskExpression.SYMBOL_STAR */) && maskExpression.includes(\"0\" /* MaskExpression.NUMBER_ZERO */ + \"*\" /* MaskExpression.SYMBOL_STAR */)) {\n            cursor++;\n          }\n          cursor++;\n          i--;\n        } else if (this.maskExpression[cursor + 1] === \"*\" /* MaskExpression.SYMBOL_STAR */ && this._findSpecialChar(this.maskExpression[cursor + 2] ?? \"\" /* MaskExpression.EMPTY_STRING */) && this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] && multi) {\n          cursor += 3;\n          result += inputSymbol;\n        } else if (this.maskExpression[cursor + 1] === \"?\" /* MaskExpression.SYMBOL_QUESTION */ && this._findSpecialChar(this.maskExpression[cursor + 2] ?? \"\" /* MaskExpression.EMPTY_STRING */) && this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] && multi) {\n          cursor += 3;\n          result += inputSymbol;\n        } else if (this.showMaskTyped && this.specialCharacters.indexOf(inputSymbol) < 0 && inputSymbol !== this.placeHolderCharacter && this.placeHolderCharacter.length === 1) {\n          stepBack = true;\n        }\n      }\n    }\n    if (result.length + 1 === maskExpression.length && this.specialCharacters.indexOf(maskExpression[maskExpression.length - 1] ?? \"\" /* MaskExpression.EMPTY_STRING */) !== -1) {\n      result += maskExpression[maskExpression.length - 1];\n    }\n    let newPosition = position + 1;\n    while (this._shift.has(newPosition)) {\n      shift++;\n      newPosition++;\n    }\n    let actualShift = justPasted && !maskExpression.startsWith(\"separator\" /* MaskExpression.SEPARATOR */) ? cursor : this._shift.has(position) ? shift : 0;\n    if (stepBack) {\n      actualShift--;\n    }\n    cb(actualShift, backspaceShift);\n    if (shift < 0) {\n      this._shift.clear();\n    }\n    let onlySpecial = false;\n    if (backspaced) {\n      onlySpecial = inputArray.every(char => this.specialCharacters.includes(char));\n    }\n    let res = `${this.prefix}${onlySpecial ? \"\" /* MaskExpression.EMPTY_STRING */ : result}${this.showMaskTyped ? '' : this.suffix}`;\n    if (result.length === 0) {\n      res = !this.dropSpecialCharacters ? `${this.prefix}${result}` : `${result}`;\n    }\n    const isSpecialCharacterMaskFirstSymbol = inputValue.length === 1 && this.specialCharacters.includes(maskExpression[0]) && inputValue !== maskExpression[0];\n    if (!this._checkSymbolMask(inputValue, maskExpression[1]) && isSpecialCharacterMaskFirstSymbol) {\n      return '';\n    }\n    if (result.includes(\"-\" /* MaskExpression.MINUS */) && this.prefix && this.allowNegativeNumbers) {\n      if (backspaced && result === \"-\" /* MaskExpression.MINUS */) {\n        return '';\n      }\n      res = `${\"-\" /* MaskExpression.MINUS */}${this.prefix}${result.split(\"-\" /* MaskExpression.MINUS */).join(\"\" /* MaskExpression.EMPTY_STRING */)}${this.suffix}`;\n    }\n    return res;\n  }\n  _findDropSpecialChar(inputSymbol) {\n    if (Array.isArray(this.dropSpecialCharacters)) {\n      return this.dropSpecialCharacters.find(val => val === inputSymbol);\n    }\n    return this._findSpecialChar(inputSymbol);\n  }\n  _findSpecialChar(inputSymbol) {\n    return this.specialCharacters.find(val => val === inputSymbol);\n  }\n  _checkSymbolMask(inputSymbol, maskSymbol) {\n    this.patterns = this.customPattern ? this.customPattern : this.patterns;\n    return (this.patterns[maskSymbol]?.pattern && this.patterns[maskSymbol]?.pattern.test(inputSymbol)) ?? false;\n  }\n  _stripToDecimal(str) {\n    return str.split(\"\" /* MaskExpression.EMPTY_STRING */).filter((i, idx) => {\n      const isDecimalMarker = typeof this.decimalMarker === 'string' ? i === this.decimalMarker :\n      // TODO (inepipenko) use utility type\n      this.decimalMarker.includes(i);\n      return i.match('^-?\\\\d') || i === this.thousandSeparator || isDecimalMarker || i === \"-\" /* MaskExpression.MINUS */ && idx === 0 && this.allowNegativeNumbers;\n    }).join(\"\" /* MaskExpression.EMPTY_STRING */);\n  }\n  _charToRegExpExpression(char) {\n    // if (Array.isArray(char)) {\n    // \treturn char.map((v) => ('[\\\\^$.|?*+()'.indexOf(v) >= 0 ? `\\\\${v}` : v)).join('|');\n    // }\n    if (char) {\n      const charsToEscape = '[\\\\^$.|?*+()';\n      return char === ' ' ? '\\\\s' : charsToEscape.indexOf(char) >= 0 ? `\\\\${char}` : char;\n    }\n    return char;\n  }\n  _shiftStep(maskExpression, cursor, inputLength) {\n    const shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputLength : cursor;\n    this._shift.add(shiftStep + this.prefix.length || 0);\n  }\n  _compareOrIncludes(value, comparedValue, excludedValue) {\n    return Array.isArray(comparedValue) ? comparedValue.filter(v => v !== excludedValue).includes(value) : value === comparedValue;\n  }\n  _validIP(valuesIP) {\n    return !(valuesIP.length === 4 && !valuesIP.some((value, index) => {\n      if (valuesIP.length !== index + 1) {\n        return value === \"\" /* MaskExpression.EMPTY_STRING */ || Number(value) > 255;\n      }\n      return value === \"\" /* MaskExpression.EMPTY_STRING */ || Number(value.substring(0, 3)) > 255;\n    }));\n  }\n  _splitPercentZero(value) {\n    if (value === \"-\" /* MaskExpression.MINUS */ && this.allowNegativeNumbers) {\n      return value;\n    }\n    const decimalIndex = typeof this.decimalMarker === 'string' ? value.indexOf(this.decimalMarker) : value.indexOf(\".\" /* MaskExpression.DOT */);\n    const emptyOrMinus = this.allowNegativeNumbers && value.includes(\"-\" /* MaskExpression.MINUS */) ? '-' : '';\n    if (decimalIndex === -1) {\n      const parsedValue = parseInt(emptyOrMinus ? value.slice(1, value.length) : value, 10);\n      return isNaN(parsedValue) ? \"\" /* MaskExpression.EMPTY_STRING */ : `${emptyOrMinus}${parsedValue}`;\n    } else {\n      const integerPart = parseInt(value.replace('-', '').substring(0, decimalIndex), 10);\n      const decimalPart = value.substring(decimalIndex + 1);\n      const integerString = isNaN(integerPart) ? '' : integerPart.toString();\n      const decimal = typeof this.decimalMarker === 'string' ? this.decimalMarker : \".\" /* MaskExpression.DOT */;\n      return integerString === \"\" /* MaskExpression.EMPTY_STRING */ ? \"\" /* MaskExpression.EMPTY_STRING */ : `${emptyOrMinus}${integerString}${decimal}${decimalPart}`;\n    }\n  }\n  _findFirstNonZeroDigitIndex(inputString) {\n    for (let i = 0; i < inputString.length; i++) {\n      const char = inputString[i];\n      if (char && char >= '1' && char <= '9') {\n        return i;\n      }\n    }\n    return -1;\n  }\n  static {\n    this.ɵfac = function NgxMaskApplierService_Factory(t) {\n      return new (t || NgxMaskApplierService)();\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: NgxMaskApplierService,\n      factory: NgxMaskApplierService.ɵfac\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaskApplierService, [{\n    type: Injectable\n  }], null, null);\n})();\nclass NgxMaskService extends NgxMaskApplierService {\n  constructor() {\n    super(...arguments);\n    this.isNumberValue = false;\n    this.maskIsShown = '';\n    this.selStart = null;\n    this.selEnd = null;\n    /**\n     * Whether we are currently in writeValue function, in this case when applying the mask we don't want to trigger onChange function,\n     * since writeValue should be a one way only process of writing the DOM value based on the Angular model value.\n     */\n    this.writingValue = false;\n    this.maskChanged = false;\n    this._maskExpressionArray = [];\n    this.triggerOnMaskChange = false;\n    this._previousValue = '';\n    this._currentValue = '';\n    this._emitValue = false;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this.onChange = _ => {};\n    this._elementRef = inject(ElementRef, {\n      optional: true\n    });\n    this.document = inject(DOCUMENT);\n    this._config = inject(NGX_MASK_CONFIG);\n    this._renderer = inject(Renderer2, {\n      optional: true\n    });\n  }\n  applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  cb = () => {}) {\n    if (!maskExpression) {\n      return inputValue !== this.actualValue ? this.actualValue : inputValue;\n    }\n    this.maskIsShown = this.showMaskTyped ? this.showMaskInInput() : \"\" /* MaskExpression.EMPTY_STRING */;\n    if (this.maskExpression === \"IP\" /* MaskExpression.IP */ && this.showMaskTyped) {\n      this.maskIsShown = this.showMaskInInput(inputValue || \"#\" /* MaskExpression.HASH */);\n    }\n    if (this.maskExpression === \"CPF_CNPJ\" /* MaskExpression.CPF_CNPJ */ && this.showMaskTyped) {\n      this.maskIsShown = this.showMaskInInput(inputValue || \"#\" /* MaskExpression.HASH */);\n    }\n    if (!inputValue && this.showMaskTyped) {\n      this.formControlResult(this.prefix);\n      return `${this.prefix}${this.maskIsShown}${this.suffix}`;\n    }\n    const getSymbol = !!inputValue && typeof this.selStart === 'number' ? inputValue[this.selStart] ?? \"\" /* MaskExpression.EMPTY_STRING */ : \"\" /* MaskExpression.EMPTY_STRING */;\n    let newInputValue = '';\n    if (this.hiddenInput !== undefined && !this.writingValue) {\n      let actualResult = inputValue && inputValue.length === 1 ? inputValue.split(\"\" /* MaskExpression.EMPTY_STRING */) : this.actualValue.split(\"\" /* MaskExpression.EMPTY_STRING */);\n      // eslint-disable  @typescript-eslint/no-unused-expressions\n      if (typeof this.selStart === 'object' && typeof this.selEnd === 'object') {\n        this.selStart = Number(this.selStart);\n        this.selEnd = Number(this.selEnd);\n      } else {\n        inputValue !== \"\" /* MaskExpression.EMPTY_STRING */ && actualResult.length ? typeof this.selStart === 'number' && typeof this.selEnd === 'number' ? inputValue.length > actualResult.length ? actualResult.splice(this.selStart, 0, getSymbol) : inputValue.length < actualResult.length ? actualResult.length - inputValue.length === 1 ? backspaced ? actualResult.splice(this.selStart - 1, 1) : actualResult.splice(inputValue.length - 1, 1) : actualResult.splice(this.selStart, this.selEnd - this.selStart) : null : null : actualResult = [];\n      }\n      if (this.showMaskTyped) {\n        if (!this.hiddenInput) {\n          // eslint-disable-next-line no-param-reassign\n          inputValue = this.removeMask(inputValue);\n        }\n      }\n      // eslint-enable  @typescript-eslint/no-unused-expressions\n      newInputValue = this.actualValue.length && actualResult.length <= inputValue.length ? this.shiftTypedSymbols(actualResult.join(\"\" /* MaskExpression.EMPTY_STRING */)) : inputValue;\n    }\n    if (justPasted && (this.hiddenInput || !this.hiddenInput)) {\n      newInputValue = inputValue;\n    }\n    if (backspaced && this.specialCharacters.indexOf(this.maskExpression[position] ?? \"\" /* MaskExpression.EMPTY_STRING */) !== -1 && this.showMaskTyped && !this.prefix) {\n      newInputValue = this._currentValue;\n    }\n    if (this.deletedSpecialCharacter && position) {\n      if (this.specialCharacters.includes(this.actualValue.slice(position, position + 1))) {\n        // eslint-disable-next-line no-param-reassign\n        position = position + 1;\n      } else if (maskExpression.slice(position - 1, position + 1) !== \"M0\" /* MaskExpression.MONTHS */) {\n        // eslint-disable-next-line no-param-reassign\n        position = position - 2;\n      }\n      this.deletedSpecialCharacter = false;\n    }\n    if (this.showMaskTyped && this.placeHolderCharacter.length === 1 && !this.leadZeroDateTime) {\n      // eslint-disable-next-line no-param-reassign\n      inputValue = this.removeMask(inputValue);\n    }\n    if (this.maskChanged) {\n      newInputValue = inputValue;\n    } else {\n      newInputValue = Boolean(newInputValue) && newInputValue.length ? newInputValue : inputValue;\n    }\n    if (this.showMaskTyped && this.keepCharacterPositions && this.actualValue && !justPasted && !this.writingValue) {\n      const value = this.dropSpecialCharacters ? this.removeMask(this.actualValue) : this.actualValue;\n      this.formControlResult(value);\n      return this.actualValue ? this.actualValue : `${this.prefix}${this.maskIsShown}${this.suffix}`;\n    }\n    const result = super.applyMask(newInputValue, maskExpression, position, justPasted, backspaced, cb);\n    this.actualValue = this.getActualValue(result);\n    // handle some separator implications:\n    // a.) adjust decimalMarker default (. -> ,) if thousandSeparator is a dot\n    if (this.thousandSeparator === \".\" /* MaskExpression.DOT */ && this.decimalMarker === \".\" /* MaskExpression.DOT */) {\n      this.decimalMarker = \",\" /* MaskExpression.COMMA */;\n    }\n    // b) remove decimal marker from list of special characters to mask\n    if (this.maskExpression.startsWith(\"separator\" /* MaskExpression.SEPARATOR */) && this.dropSpecialCharacters === true) {\n      this.specialCharacters = this.specialCharacters.filter(item => !this._compareOrIncludes(item, this.decimalMarker, this.thousandSeparator) //item !== this.decimalMarker, // !\n      );\n    }\n    if (result || result === '') {\n      this._previousValue = this._currentValue;\n      this._currentValue = result;\n      this._emitValue = this._previousValue !== this._currentValue || this.maskChanged || this._previousValue === this._currentValue && justPasted;\n    }\n    this._emitValue ? this.writingValue && this.triggerOnMaskChange ? requestAnimationFrame(() => this.formControlResult(result)) : this.formControlResult(result) : '';\n    if (!this.showMaskTyped || this.showMaskTyped && this.hiddenInput) {\n      if (this.hiddenInput) {\n        if (backspaced) {\n          return this.hideInput(result, this.maskExpression);\n        }\n        return `${this.hideInput(result, this.maskExpression)}${this.maskIsShown.slice(result.length)}`;\n      }\n      return result;\n    }\n    const resLen = result.length;\n    const prefNmask = `${this.prefix}${this.maskIsShown}${this.suffix}`;\n    if (this.maskExpression.includes(\"H\" /* MaskExpression.HOURS */)) {\n      const countSkipedSymbol = this._numberSkipedSymbols(result);\n      return `${result}${prefNmask.slice(resLen + countSkipedSymbol)}`;\n    } else if (this.maskExpression === \"IP\" /* MaskExpression.IP */ || this.maskExpression === \"CPF_CNPJ\" /* MaskExpression.CPF_CNPJ */) {\n      return `${result}${prefNmask}`;\n    }\n    return `${result}${prefNmask.slice(resLen)}`;\n  }\n  // get the number of characters that were shifted\n  _numberSkipedSymbols(value) {\n    const regex = /(^|\\D)(\\d\\D)/g;\n    let match = regex.exec(value);\n    let countSkipedSymbol = 0;\n    while (match != null) {\n      countSkipedSymbol += 1;\n      match = regex.exec(value);\n    }\n    return countSkipedSymbol;\n  }\n  applyValueChanges(position, justPasted, backspaced,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  cb = () => {}) {\n    const formElement = this._elementRef?.nativeElement;\n    if (!formElement) {\n      return;\n    }\n    formElement.value = this.applyMask(formElement.value, this.maskExpression, position, justPasted, backspaced, cb);\n    if (formElement === this._getActiveElement()) {\n      return;\n    }\n    this.clearIfNotMatchFn();\n  }\n  hideInput(inputValue, maskExpression) {\n    return inputValue.split(\"\" /* MaskExpression.EMPTY_STRING */).map((curr, index) => {\n      if (this.patterns && this.patterns[maskExpression[index] ?? \"\" /* MaskExpression.EMPTY_STRING */] && this.patterns[maskExpression[index] ?? \"\" /* MaskExpression.EMPTY_STRING */]?.symbol) {\n        return this.patterns[maskExpression[index] ?? \"\" /* MaskExpression.EMPTY_STRING */]?.symbol;\n      }\n      return curr;\n    }).join(\"\" /* MaskExpression.EMPTY_STRING */);\n  }\n  // this function is not necessary, it checks result against maskExpression\n  getActualValue(res) {\n    const compare = res.split(\"\" /* MaskExpression.EMPTY_STRING */).filter((symbol, i) => {\n      const maskChar = this.maskExpression[i] ?? \"\" /* MaskExpression.EMPTY_STRING */;\n      return this._checkSymbolMask(symbol, maskChar) || this.specialCharacters.includes(maskChar) && symbol === maskChar;\n    });\n    if (compare.join(\"\" /* MaskExpression.EMPTY_STRING */) === res) {\n      return compare.join(\"\" /* MaskExpression.EMPTY_STRING */);\n    }\n    return res;\n  }\n  shiftTypedSymbols(inputValue) {\n    let symbolToReplace = '';\n    const newInputValue = inputValue && inputValue.split(\"\" /* MaskExpression.EMPTY_STRING */).map((currSymbol, index) => {\n      if (this.specialCharacters.includes(inputValue[index + 1] ?? \"\" /* MaskExpression.EMPTY_STRING */) && inputValue[index + 1] !== this.maskExpression[index + 1]) {\n        symbolToReplace = currSymbol;\n        return inputValue[index + 1];\n      }\n      if (symbolToReplace.length) {\n        const replaceSymbol = symbolToReplace;\n        symbolToReplace = \"\" /* MaskExpression.EMPTY_STRING */;\n        return replaceSymbol;\n      }\n      return currSymbol;\n    }) || [];\n    return newInputValue.join(\"\" /* MaskExpression.EMPTY_STRING */);\n  }\n  /**\n   * Convert number value to string\n   * 3.1415 -> '3.1415'\n   * 1e-7 -> '0.0000001'\n   */\n  numberToString(value) {\n    if (!value && value !== 0 || this.maskExpression.startsWith(\"separator\" /* MaskExpression.SEPARATOR */) && (this.leadZero || !this.dropSpecialCharacters) || this.maskExpression.startsWith(\"separator\" /* MaskExpression.SEPARATOR */) && this.separatorLimit.length > 14 && String(value).length > 14) {\n      return String(value);\n    }\n    return Number(value).toLocaleString('fullwide', {\n      useGrouping: false,\n      maximumFractionDigits: 20\n    }).replace(`/${\"-\" /* MaskExpression.MINUS */}/`, \"-\" /* MaskExpression.MINUS */);\n  }\n  showMaskInInput(inputVal) {\n    if (this.showMaskTyped && !!this.shownMaskExpression) {\n      if (this.maskExpression.length !== this.shownMaskExpression.length) {\n        throw new Error('Mask expression must match mask placeholder length');\n      } else {\n        return this.shownMaskExpression;\n      }\n    } else if (this.showMaskTyped) {\n      if (inputVal) {\n        if (this.maskExpression === \"IP\" /* MaskExpression.IP */) {\n          return this._checkForIp(inputVal);\n        }\n        if (this.maskExpression === \"CPF_CNPJ\" /* MaskExpression.CPF_CNPJ */) {\n          return this._checkForCpfCnpj(inputVal);\n        }\n      }\n      if (this.placeHolderCharacter.length === this.maskExpression.length) {\n        return this.placeHolderCharacter;\n      }\n      return this.maskExpression.replace(/\\w/g, this.placeHolderCharacter);\n    }\n    return '';\n  }\n  clearIfNotMatchFn() {\n    const formElement = this._elementRef?.nativeElement;\n    if (!formElement) {\n      return;\n    }\n    if (this.clearIfNotMatch && this.prefix.length + this.maskExpression.length + this.suffix.length !== formElement.value.replace(this.placeHolderCharacter, \"\" /* MaskExpression.EMPTY_STRING */).length) {\n      this.formElementProperty = ['value', \"\" /* MaskExpression.EMPTY_STRING */];\n      this.applyMask('', this.maskExpression);\n    }\n  }\n  set formElementProperty([name, value]) {\n    if (!this._renderer || !this._elementRef) {\n      return;\n    }\n    //[TODO]: andriikamaldinov1 find better solution\n    Promise.resolve().then(() => this._renderer?.setProperty(this._elementRef?.nativeElement, name, value));\n  }\n  checkDropSpecialCharAmount(mask) {\n    const chars = mask.split(\"\" /* MaskExpression.EMPTY_STRING */).filter(item => this._findDropSpecialChar(item));\n    return chars.length;\n  }\n  removeMask(inputValue) {\n    return this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.specialCharacters.concat('_').concat(this.placeHolderCharacter));\n  }\n  _checkForIp(inputVal) {\n    if (inputVal === \"#\" /* MaskExpression.HASH */) {\n      return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n    }\n    const arr = [];\n    for (let i = 0; i < inputVal.length; i++) {\n      const value = inputVal[i] ?? \"\" /* MaskExpression.EMPTY_STRING */;\n      if (!value) {\n        continue;\n      }\n      if (value.match('\\\\d')) {\n        arr.push(value);\n      }\n    }\n    if (arr.length <= 3) {\n      return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n    }\n    if (arr.length > 3 && arr.length <= 6) {\n      return `${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n    }\n    if (arr.length > 6 && arr.length <= 9) {\n      return this.placeHolderCharacter;\n    }\n    if (arr.length > 9 && arr.length <= 12) {\n      return '';\n    }\n    return '';\n  }\n  _checkForCpfCnpj(inputVal) {\n    const cpf = `${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n    const cnpj = `${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `/${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n    if (inputVal === \"#\" /* MaskExpression.HASH */) {\n      return cpf;\n    }\n    const arr = [];\n    for (let i = 0; i < inputVal.length; i++) {\n      const value = inputVal[i] ?? \"\" /* MaskExpression.EMPTY_STRING */;\n      if (!value) {\n        continue;\n      }\n      if (value.match('\\\\d')) {\n        arr.push(value);\n      }\n    }\n    if (arr.length <= 3) {\n      return cpf.slice(arr.length, cpf.length);\n    }\n    if (arr.length > 3 && arr.length <= 6) {\n      return cpf.slice(arr.length + 1, cpf.length);\n    }\n    if (arr.length > 6 && arr.length <= 9) {\n      return cpf.slice(arr.length + 2, cpf.length);\n    }\n    if (arr.length > 9 && arr.length < 11) {\n      return cpf.slice(arr.length + 3, cpf.length);\n    }\n    if (arr.length === 11) {\n      return '';\n    }\n    if (arr.length === 12) {\n      if (inputVal.length === 17) {\n        return cnpj.slice(16, cnpj.length);\n      }\n      return cnpj.slice(15, cnpj.length);\n    }\n    if (arr.length > 12 && arr.length <= 14) {\n      return cnpj.slice(arr.length + 4, cnpj.length);\n    }\n    return '';\n  }\n  /**\n   * Recursively determine the current active element by navigating the Shadow DOM until the Active Element is found.\n   */\n  _getActiveElement(document = this.document) {\n    const shadowRootEl = document?.activeElement?.shadowRoot;\n    if (!shadowRootEl?.activeElement) {\n      return document.activeElement;\n    } else {\n      return this._getActiveElement(shadowRootEl);\n    }\n  }\n  /**\n   * Propogates the input value back to the Angular model by triggering the onChange function. It won't do this if writingValue\n   * is true. If that is true it means we are currently in the writeValue function, which is supposed to only update the actual\n   * DOM element based on the Angular model value. It should be a one way process, i.e. writeValue should not be modifying the Angular\n   * model value too. Therefore, we don't trigger onChange in this scenario.\n   * @param inputValue the current form input value\n   */\n  formControlResult(inputValue) {\n    if (this.writingValue || !this.triggerOnMaskChange && this.maskChanged) {\n      this.triggerOnMaskChange && this.maskChanged ? this.onChange(this.outputTransformFn(this._toNumber(this._checkSymbols(this._removeSuffix(this._removePrefix(inputValue)))))) : '';\n      this.maskChanged = false;\n      return;\n    }\n    if (Array.isArray(this.dropSpecialCharacters)) {\n      this.onChange(this.outputTransformFn(this._toNumber(this._checkSymbols(this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.dropSpecialCharacters)))));\n    } else if (this.dropSpecialCharacters || !this.dropSpecialCharacters && this.prefix === inputValue) {\n      this.onChange(this.outputTransformFn(this._toNumber(this._checkSymbols(this._removeSuffix(this._removePrefix(inputValue))))));\n    } else {\n      this.onChange(this.outputTransformFn(this._toNumber(inputValue)));\n    }\n  }\n  _toNumber(value) {\n    if (!this.isNumberValue || value === \"\" /* MaskExpression.EMPTY_STRING */) {\n      return value;\n    }\n    if (this.maskExpression.startsWith(\"separator\" /* MaskExpression.SEPARATOR */) && (this.leadZero || !this.dropSpecialCharacters)) {\n      return value;\n    }\n    if (String(value).length > 16 && this.separatorLimit.length > 14) {\n      return String(value);\n    }\n    const num = Number(value);\n    if (this.maskExpression.startsWith(\"separator\" /* MaskExpression.SEPARATOR */) && Number.isNaN(num)) {\n      const val = String(value).replace(',', '.');\n      return Number(val);\n    }\n    return Number.isNaN(num) ? value : num;\n  }\n  _removeMask(value, specialCharactersForRemove) {\n    if (this.maskExpression.startsWith(\"percent\" /* MaskExpression.PERCENT */) && value.includes(\".\" /* MaskExpression.DOT */)) {\n      return value;\n    }\n    return value ? value.replace(this._regExpForRemove(specialCharactersForRemove), \"\" /* MaskExpression.EMPTY_STRING */) : value;\n  }\n  _removePrefix(value) {\n    if (!this.prefix) {\n      return value;\n    }\n    return value ? value.replace(this.prefix, \"\" /* MaskExpression.EMPTY_STRING */) : value;\n  }\n  _removeSuffix(value) {\n    if (!this.suffix) {\n      return value;\n    }\n    return value ? value.replace(this.suffix, \"\" /* MaskExpression.EMPTY_STRING */) : value;\n  }\n  _retrieveSeparatorValue(result) {\n    let specialCharacters = Array.isArray(this.dropSpecialCharacters) ? this.specialCharacters.filter(v => {\n      return this.dropSpecialCharacters.includes(v);\n    }) : this.specialCharacters;\n    if (!this.deletedSpecialCharacter && this._checkPatternForSpace() && result.includes(\" \" /* MaskExpression.WHITE_SPACE */) && this.maskExpression.includes(\"*\" /* MaskExpression.SYMBOL_STAR */)) {\n      specialCharacters = specialCharacters.filter(char => char !== \" \" /* MaskExpression.WHITE_SPACE */);\n    }\n    return this._removeMask(result, specialCharacters);\n  }\n  _regExpForRemove(specialCharactersForRemove) {\n    return new RegExp(specialCharactersForRemove.map(item => `\\\\${item}`).join('|'), 'gi');\n  }\n  _replaceDecimalMarkerToDot(value) {\n    const markers = Array.isArray(this.decimalMarker) ? this.decimalMarker : [this.decimalMarker];\n    return value.replace(this._regExpForRemove(markers), \".\" /* MaskExpression.DOT */);\n  }\n  _checkSymbols(result) {\n    if (result === \"\" /* MaskExpression.EMPTY_STRING */) {\n      return result;\n    }\n    if (this.maskExpression.startsWith(\"percent\" /* MaskExpression.PERCENT */) && this.decimalMarker === \",\" /* MaskExpression.COMMA */) {\n      // eslint-disable-next-line no-param-reassign\n      result = result.replace(\",\" /* MaskExpression.COMMA */, \".\" /* MaskExpression.DOT */);\n    }\n    const separatorPrecision = this._retrieveSeparatorPrecision(this.maskExpression);\n    const separatorValue = this._replaceDecimalMarkerToDot(this._retrieveSeparatorValue(result));\n    if (!this.isNumberValue) {\n      return separatorValue;\n    }\n    if (separatorPrecision) {\n      if (result === this.decimalMarker) {\n        return null;\n      }\n      if (this.separatorLimit.length > 14) {\n        return String(separatorValue);\n      }\n      return this._checkPrecision(this.maskExpression, separatorValue);\n    } else {\n      return separatorValue;\n    }\n  }\n  _checkPatternForSpace() {\n    for (const key in this.patterns) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (this.patterns[key] && this.patterns[key]?.hasOwnProperty('pattern')) {\n        const patternString = this.patterns[key]?.pattern.toString();\n        const pattern = this.patterns[key]?.pattern;\n        if (patternString?.includes(\" \" /* MaskExpression.WHITE_SPACE */) && pattern?.test(this.maskExpression)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  // TODO should think about helpers or separting decimal precision to own property\n  _retrieveSeparatorPrecision(maskExpretion) {\n    const matcher = maskExpretion.match(new RegExp(`^separator\\\\.([^d]*)`));\n    return matcher ? Number(matcher[1]) : null;\n  }\n  _checkPrecision(separatorExpression, separatorValue) {\n    const separatorPrecision = separatorExpression.slice(10, 11);\n    if (separatorExpression.indexOf('2') > 0 || this.leadZero && Number(separatorPrecision) > 0) {\n      if (this.decimalMarker === \",\" /* MaskExpression.COMMA */ && this.leadZero) {\n        // eslint-disable-next-line no-param-reassign\n        separatorValue = separatorValue.replace(',', '.');\n      }\n      return this.leadZero ? Number(separatorValue).toFixed(Number(separatorPrecision)) : Number(separatorValue).toFixed(2);\n    }\n    return this.numberToString(separatorValue);\n  }\n  _repeatPatternSymbols(maskExp) {\n    return maskExp.match(/{[0-9]+}/) && maskExp.split(\"\" /* MaskExpression.EMPTY_STRING */).reduce((accum, currVal, index) => {\n      this._start = currVal === \"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */ ? index : this._start;\n      if (currVal !== \"}\" /* MaskExpression.CURLY_BRACKETS_RIGHT */) {\n        return this._findSpecialChar(currVal) ? accum + currVal : accum;\n      }\n      this._end = index;\n      const repeatNumber = Number(maskExp.slice(this._start + 1, this._end));\n      const replaceWith = new Array(repeatNumber + 1).join(maskExp[this._start - 1]);\n      if (maskExp.slice(0, this._start).length > 1 && maskExp.includes(\"S\" /* MaskExpression.LETTER_S */)) {\n        const symbols = maskExp.slice(0, this._start - 1);\n        return symbols.includes(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */) ? accum + replaceWith : symbols + accum + replaceWith;\n      } else {\n        return accum + replaceWith;\n      }\n    }, '') || maskExp;\n  }\n  currentLocaleDecimalMarker() {\n    return 1.1.toLocaleString().substring(1, 2);\n  }\n  static {\n    this.ɵfac = /* @__PURE__ */(() => {\n      let ɵNgxMaskService_BaseFactory;\n      return function NgxMaskService_Factory(t) {\n        return (ɵNgxMaskService_BaseFactory || (ɵNgxMaskService_BaseFactory = i0.ɵɵgetInheritedFactory(NgxMaskService)))(t || NgxMaskService);\n      };\n    })();\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: NgxMaskService,\n      factory: NgxMaskService.ɵfac\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaskService, [{\n    type: Injectable\n  }], null, null);\n})();\n\n/**\n * @internal\n */\nfunction _configFactory() {\n  const initConfig = inject(INITIAL_CONFIG);\n  const configValue = inject(NEW_CONFIG);\n  return configValue instanceof Function ? {\n    ...initConfig,\n    ...configValue()\n  } : {\n    ...initConfig,\n    ...configValue\n  };\n}\nfunction provideNgxMask(configValue) {\n  return [{\n    provide: NEW_CONFIG,\n    useValue: configValue\n  }, {\n    provide: INITIAL_CONFIG,\n    useValue: initialConfig\n  }, {\n    provide: NGX_MASK_CONFIG,\n    useFactory: _configFactory\n  }, NgxMaskService];\n}\nfunction provideEnvironmentNgxMask(configValue) {\n  return makeEnvironmentProviders(provideNgxMask(configValue));\n}\nclass NgxMaskDirective {\n  constructor() {\n    this.maskExpression = '';\n    this.specialCharacters = [];\n    this.patterns = {};\n    this.prefix = '';\n    this.suffix = '';\n    this.thousandSeparator = ' ';\n    this.decimalMarker = '.';\n    this.dropSpecialCharacters = null;\n    this.hiddenInput = null;\n    this.showMaskTyped = null;\n    this.placeHolderCharacter = null;\n    this.shownMaskExpression = null;\n    this.showTemplate = null;\n    this.clearIfNotMatch = null;\n    this.validation = null;\n    this.separatorLimit = null;\n    this.allowNegativeNumbers = null;\n    this.leadZeroDateTime = null;\n    this.leadZero = null;\n    this.triggerOnMaskChange = null;\n    this.apm = null;\n    this.inputTransformFn = null;\n    this.outputTransformFn = null;\n    this.keepCharacterPositions = null;\n    this.maskFilled = new EventEmitter();\n    this._maskValue = '';\n    this._position = null;\n    this._maskExpressionArray = [];\n    this._allowFewMaskChangeMask = false;\n    this._justPasted = false;\n    this._isFocused = false;\n    /**For IME composition event */\n    this._isComposing = false;\n    this.document = inject(DOCUMENT);\n    this._maskService = inject(NgxMaskService, {\n      self: true\n    });\n    this._config = inject(NGX_MASK_CONFIG);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this.onChange = _ => {};\n    this.onTouch = () => {};\n  }\n  ngOnChanges(changes) {\n    const {\n      maskExpression,\n      specialCharacters,\n      patterns,\n      prefix,\n      suffix,\n      thousandSeparator,\n      decimalMarker,\n      dropSpecialCharacters,\n      hiddenInput,\n      showMaskTyped,\n      placeHolderCharacter,\n      shownMaskExpression,\n      showTemplate,\n      clearIfNotMatch,\n      validation,\n      separatorLimit,\n      allowNegativeNumbers,\n      leadZeroDateTime,\n      leadZero,\n      triggerOnMaskChange,\n      apm,\n      inputTransformFn,\n      outputTransformFn,\n      keepCharacterPositions\n    } = changes;\n    if (maskExpression) {\n      if (maskExpression.currentValue !== maskExpression.previousValue && !maskExpression.firstChange) {\n        this._maskService.maskChanged = true;\n      }\n      if (maskExpression.currentValue && maskExpression.currentValue.split(\"||\" /* MaskExpression.OR */).length > 1) {\n        this._maskExpressionArray = maskExpression.currentValue.split(\"||\" /* MaskExpression.OR */).sort((a, b) => {\n          return a.length - b.length;\n        });\n        this._setMask();\n      } else {\n        this._maskExpressionArray = [];\n        this._maskValue = maskExpression.currentValue || \"\" /* MaskExpression.EMPTY_STRING */;\n        this._maskService.maskExpression = this._maskValue;\n      }\n    }\n    if (specialCharacters) {\n      if (!specialCharacters.currentValue || !Array.isArray(specialCharacters.currentValue)) {\n        return;\n      } else {\n        this._maskService.specialCharacters = specialCharacters.currentValue || [];\n      }\n    }\n    if (allowNegativeNumbers) {\n      this._maskService.allowNegativeNumbers = allowNegativeNumbers.currentValue;\n      if (this._maskService.allowNegativeNumbers) {\n        this._maskService.specialCharacters = this._maskService.specialCharacters.filter(c => c !== \"-\" /* MaskExpression.MINUS */);\n      }\n    }\n    // Only overwrite the mask available patterns if a pattern has actually been passed in\n    if (patterns && patterns.currentValue) {\n      this._maskService.patterns = patterns.currentValue;\n    }\n    if (apm && apm.currentValue) {\n      this._maskService.apm = apm.currentValue;\n    }\n    if (prefix) {\n      this._maskService.prefix = prefix.currentValue;\n    }\n    if (suffix) {\n      this._maskService.suffix = suffix.currentValue;\n    }\n    if (thousandSeparator) {\n      this._maskService.thousandSeparator = thousandSeparator.currentValue;\n    }\n    if (decimalMarker) {\n      this._maskService.decimalMarker = decimalMarker.currentValue;\n    }\n    if (dropSpecialCharacters) {\n      this._maskService.dropSpecialCharacters = dropSpecialCharacters.currentValue;\n    }\n    if (hiddenInput) {\n      this._maskService.hiddenInput = hiddenInput.currentValue;\n    }\n    if (showMaskTyped) {\n      this._maskService.showMaskTyped = showMaskTyped.currentValue;\n      if (showMaskTyped.previousValue === false && showMaskTyped.currentValue === true && this._isFocused) {\n        requestAnimationFrame(() => {\n          this._maskService._elementRef?.nativeElement.click();\n        });\n      }\n    }\n    if (placeHolderCharacter) {\n      this._maskService.placeHolderCharacter = placeHolderCharacter.currentValue;\n    }\n    if (shownMaskExpression) {\n      this._maskService.shownMaskExpression = shownMaskExpression.currentValue;\n    }\n    if (showTemplate) {\n      this._maskService.showTemplate = showTemplate.currentValue;\n    }\n    if (clearIfNotMatch) {\n      this._maskService.clearIfNotMatch = clearIfNotMatch.currentValue;\n    }\n    if (validation) {\n      this._maskService.validation = validation.currentValue;\n    }\n    if (separatorLimit) {\n      this._maskService.separatorLimit = separatorLimit.currentValue;\n    }\n    if (leadZeroDateTime) {\n      this._maskService.leadZeroDateTime = leadZeroDateTime.currentValue;\n    }\n    if (leadZero) {\n      this._maskService.leadZero = leadZero.currentValue;\n    }\n    if (triggerOnMaskChange) {\n      this._maskService.triggerOnMaskChange = triggerOnMaskChange.currentValue;\n    }\n    if (inputTransformFn) {\n      this._maskService.inputTransformFn = inputTransformFn.currentValue;\n    }\n    if (outputTransformFn) {\n      this._maskService.outputTransformFn = outputTransformFn.currentValue;\n    }\n    if (keepCharacterPositions) {\n      this._maskService.keepCharacterPositions = keepCharacterPositions.currentValue;\n    }\n    this._applyMask();\n  }\n  validate({\n    value\n  }) {\n    if (!this._maskService.validation || !this._maskValue) {\n      return null;\n    }\n    if (this._maskService.ipError) {\n      return this._createValidationError(value);\n    }\n    if (this._maskService.cpfCnpjError) {\n      return this._createValidationError(value);\n    }\n    if (this._maskValue.startsWith(\"separator\" /* MaskExpression.SEPARATOR */)) {\n      return null;\n    }\n    if (withoutValidation.includes(this._maskValue)) {\n      return null;\n    }\n    if (this._maskService.clearIfNotMatch) {\n      return null;\n    }\n    if (timeMasks.includes(this._maskValue)) {\n      return this._validateTime(value);\n    }\n    if (value && value.toString().length >= 1) {\n      let counterOfOpt = 0;\n      if (this._maskValue.includes(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */) && this._maskValue.includes(\"}\" /* MaskExpression.CURLY_BRACKETS_RIGHT */)) {\n        const lengthInsideCurlyBrackets = this._maskValue.slice(this._maskValue.indexOf(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */) + 1, this._maskValue.indexOf(\"}\" /* MaskExpression.CURLY_BRACKETS_RIGHT */));\n        return lengthInsideCurlyBrackets === String(value.length) ? null : this._createValidationError(value);\n      }\n      if (this._maskValue.startsWith(\"percent\" /* MaskExpression.PERCENT */)) {\n        return null;\n      }\n      for (const key in this._maskService.patterns) {\n        if (this._maskService.patterns[key]?.optional) {\n          if (this._maskValue.indexOf(key) !== this._maskValue.lastIndexOf(key)) {\n            const opt = this._maskValue.split(\"\" /* MaskExpression.EMPTY_STRING */).filter(i => i === key).join(\"\" /* MaskExpression.EMPTY_STRING */);\n            counterOfOpt += opt.length;\n          } else if (this._maskValue.indexOf(key) !== -1) {\n            counterOfOpt++;\n          }\n          if (this._maskValue.indexOf(key) !== -1 && value.toString().length >= this._maskValue.indexOf(key)) {\n            return null;\n          }\n          if (counterOfOpt === this._maskValue.length) {\n            return null;\n          }\n        }\n      }\n      if (this._maskValue.indexOf(\"*\" /* MaskExpression.SYMBOL_STAR */) > 1 && value.toString().length < this._maskValue.indexOf(\"*\" /* MaskExpression.SYMBOL_STAR */) || this._maskValue.indexOf(\"?\" /* MaskExpression.SYMBOL_QUESTION */) > 1 && value.toString().length < this._maskValue.indexOf(\"?\" /* MaskExpression.SYMBOL_QUESTION */)) {\n        return this._createValidationError(value);\n      }\n      if (this._maskValue.indexOf(\"*\" /* MaskExpression.SYMBOL_STAR */) === -1 || this._maskValue.indexOf(\"?\" /* MaskExpression.SYMBOL_QUESTION */) === -1) {\n        // eslint-disable-next-line no-param-reassign\n        value = typeof value === 'number' ? String(value) : value;\n        const array = this._maskValue.split('*');\n        const length = this._maskService.dropSpecialCharacters ? this._maskValue.length - this._maskService.checkDropSpecialCharAmount(this._maskValue) - counterOfOpt : this.prefix ? this._maskValue.length + this.prefix.length - counterOfOpt : this._maskValue.length - counterOfOpt;\n        if (array.length === 1) {\n          if (value.toString().length < length) {\n            return this._createValidationError(value);\n          }\n        }\n        if (array.length > 1) {\n          const lastIndexArray = array[array.length - 1];\n          if (lastIndexArray && this._maskService.specialCharacters.includes(lastIndexArray[0]) && String(value).includes(lastIndexArray[0] ?? '') && !this.dropSpecialCharacters) {\n            const special = value.split(lastIndexArray[0]);\n            return special[special.length - 1].length === lastIndexArray.length - 1 ? null : this._createValidationError(value);\n          } else if ((lastIndexArray && !this._maskService.specialCharacters.includes(lastIndexArray[0]) || !lastIndexArray || this._maskService.dropSpecialCharacters) && value.length >= length - 1) {\n            return null;\n          } else {\n            return this._createValidationError(value);\n          }\n        }\n      }\n      if (this._maskValue.indexOf(\"*\" /* MaskExpression.SYMBOL_STAR */) === 1 || this._maskValue.indexOf(\"?\" /* MaskExpression.SYMBOL_QUESTION */) === 1) {\n        return null;\n      }\n    }\n    if (value) {\n      this.maskFilled.emit();\n      return null;\n    }\n    return null;\n  }\n  onPaste() {\n    this._justPasted = true;\n  }\n  onFocus() {\n    this._isFocused = true;\n  }\n  onModelChange(value) {\n    // on form reset we need to update the actualValue\n    if ((value === \"\" /* MaskExpression.EMPTY_STRING */ || value === null || value === undefined) && this._maskService.actualValue) {\n      this._maskService.actualValue = this._maskService.getActualValue(\"\" /* MaskExpression.EMPTY_STRING */);\n    }\n  }\n  onInput(e) {\n    // If IME is composing text, we wait for the composed text.\n    if (this._isComposing) return;\n    const el = e.target;\n    const transformedValue = this._maskService.inputTransformFn(el.value);\n    if (el.type !== 'number') {\n      if (typeof transformedValue === 'string' || typeof transformedValue === 'number') {\n        el.value = transformedValue.toString();\n        this._inputValue = el.value;\n        this._setMask();\n        if (!this._maskValue) {\n          this.onChange(el.value);\n          return;\n        }\n        let position = el.selectionStart === 1 ? el.selectionStart + this._maskService.prefix.length : el.selectionStart;\n        if (this.showMaskTyped && this.keepCharacterPositions && this._maskService.placeHolderCharacter.length === 1) {\n          const inputSymbol = el.value.slice(position - 1, position);\n          const prefixLength = this.prefix.length;\n          const checkSymbols = this._maskService._checkSymbolMask(inputSymbol, this._maskService.maskExpression[position - 1 - prefixLength] ?? \"\" /* MaskExpression.EMPTY_STRING */);\n          const checkSpecialCharacter = this._maskService._checkSymbolMask(inputSymbol, this._maskService.maskExpression[position + 1 - prefixLength] ?? \"\" /* MaskExpression.EMPTY_STRING */);\n          const selectRangeBackspace = this._maskService.selStart === this._maskService.selEnd;\n          const selStart = Number(this._maskService.selStart) - prefixLength;\n          const selEnd = Number(this._maskService.selEnd) - prefixLength;\n          if (this._code === \"Backspace\" /* MaskExpression.BACKSPACE */) {\n            if (!selectRangeBackspace) {\n              if (this._maskService.selStart === prefixLength) {\n                this._maskService.actualValue = `${this.prefix}${this._maskService.maskIsShown.slice(0, selEnd)}${this._inputValue.split(this.prefix).join('')}`;\n              } else if (this._maskService.selStart === this._maskService.maskIsShown.length + prefixLength) {\n                this._maskService.actualValue = `${this._inputValue}${this._maskService.maskIsShown.slice(selStart, selEnd)}`;\n              } else {\n                this._maskService.actualValue = `${this.prefix}${this._inputValue.split(this.prefix).join('').slice(0, selStart)}${this._maskService.maskIsShown.slice(selStart, selEnd)}${this._maskService.actualValue.slice(selEnd + prefixLength, this._maskService.maskIsShown.length + prefixLength)}${this.suffix}`;\n              }\n            } else if (!this._maskService.specialCharacters.includes(this._maskService.maskExpression.slice(position - this.prefix.length, position + 1 - this.prefix.length)) && selectRangeBackspace) {\n              if (selStart === 1 && this.prefix) {\n                this._maskService.actualValue = `${this.prefix}${this._maskService.placeHolderCharacter}${el.value.split(this.prefix).join('').split(this.suffix).join('')}${this.suffix}`;\n                position = position - 1;\n              } else {\n                const part1 = el.value.substring(0, position);\n                const part2 = el.value.substring(position);\n                this._maskService.actualValue = `${part1}${this._maskService.placeHolderCharacter}${part2}`;\n              }\n            }\n          }\n          if (this._code !== \"Backspace\" /* MaskExpression.BACKSPACE */) {\n            if (!checkSymbols && !checkSpecialCharacter && selectRangeBackspace) {\n              position = Number(el.selectionStart) - 1;\n            } else if (this._maskService.specialCharacters.includes(el.value.slice(position, position + 1)) && checkSpecialCharacter && !this._maskService.specialCharacters.includes(el.value.slice(position + 1, position + 2))) {\n              this._maskService.actualValue = `${el.value.slice(0, position - 1)}${el.value.slice(position, position + 1)}${inputSymbol}${el.value.slice(position + 2)}`;\n              position = position + 1;\n            } else if (checkSymbols) {\n              if (el.value.length === 1 && position === 1) {\n                this._maskService.actualValue = `${this.prefix}${inputSymbol}${this._maskService.maskIsShown.slice(1, this._maskService.maskIsShown.length)}${this.suffix}`;\n              } else {\n                this._maskService.actualValue = `${el.value.slice(0, position - 1)}${inputSymbol}${el.value.slice(position + 1).split(this.suffix).join('')}${this.suffix}`;\n              }\n            } else if (this.prefix && el.value.length === 1 && position - prefixLength === 1 && this._maskService._checkSymbolMask(el.value, this._maskService.maskExpression[position - 1 - prefixLength] ?? \"\" /* MaskExpression.EMPTY_STRING */)) {\n              this._maskService.actualValue = `${this.prefix}${el.value}${this._maskService.maskIsShown.slice(1, this._maskService.maskIsShown.length)}${this.suffix}`;\n            }\n          }\n        }\n        let caretShift = 0;\n        let backspaceShift = false;\n        if (this._code === \"Delete\" /* MaskExpression.DELETE */ && \"separator\" /* MaskExpression.SEPARATOR */) {\n          this._maskService.deletedSpecialCharacter = true;\n        }\n        if (this._inputValue.length >= this._maskService.maskExpression.length - 1 && this._code !== \"Backspace\" /* MaskExpression.BACKSPACE */ && this._maskService.maskExpression === \"d0/M0/0000\" /* MaskExpression.DAYS_MONTHS_YEARS */ && position < 10) {\n          const inputSymbol = this._inputValue.slice(position - 1, position);\n          el.value = this._inputValue.slice(0, position - 1) + inputSymbol + this._inputValue.slice(position + 1);\n        }\n        if (this._maskService.maskExpression === \"d0/M0/0000\" /* MaskExpression.DAYS_MONTHS_YEARS */ && this.leadZeroDateTime) {\n          if (position < 3 && Number(el.value) > 31 && Number(el.value) < 40 || position === 5 && Number(el.value.slice(3, 5)) > 12) {\n            position = position + 2;\n          }\n        }\n        if (this._maskService.maskExpression === \"Hh:m0:s0\" /* MaskExpression.HOURS_MINUTES_SECONDS */ && this.apm) {\n          if (this._justPasted && el.value.slice(0, 2) === \"00\" /* MaskExpression.DOUBLE_ZERO */) {\n            el.value = el.value.slice(1, 2) + el.value.slice(2, el.value.length);\n          }\n          el.value = el.value === \"00\" /* MaskExpression.DOUBLE_ZERO */ ? \"0\" /* MaskExpression.NUMBER_ZERO */ : el.value;\n        }\n        this._maskService.applyValueChanges(position, this._justPasted, this._code === \"Backspace\" /* MaskExpression.BACKSPACE */ || this._code === \"Delete\" /* MaskExpression.DELETE */, (shift, _backspaceShift) => {\n          this._justPasted = false;\n          caretShift = shift;\n          backspaceShift = _backspaceShift;\n        });\n        // only set the selection if the element is active\n        if (this._getActiveElement() !== el) {\n          return;\n        }\n        if (this._maskService.plusOnePosition) {\n          position = position + 1;\n          this._maskService.plusOnePosition = false;\n        }\n        // update position after applyValueChanges to prevent cursor on wrong position when it has an array of maskExpression\n        if (this._maskExpressionArray.length) {\n          if (this._code === \"Backspace\" /* MaskExpression.BACKSPACE */) {\n            const specialChartMinusOne = this.specialCharacters.includes(this._maskService.actualValue.slice(position - 1, position));\n            const specialChartPlusOne = this.specialCharacters.includes(this._maskService.actualValue.slice(position, position + 1));\n            if (this._allowFewMaskChangeMask && !specialChartPlusOne) {\n              position = el.selectionStart + 1;\n              this._allowFewMaskChangeMask = false;\n            } else {\n              position = specialChartMinusOne ? position - 1 : position;\n            }\n          } else {\n            position = el.selectionStart === 1 ? el.selectionStart + this._maskService.prefix.length : el.selectionStart;\n          }\n        }\n        this._position = this._position === 1 && this._inputValue.length === 1 ? null : this._position;\n        let positionToApply = this._position ? this._inputValue.length + position + caretShift : position + (this._code === \"Backspace\" /* MaskExpression.BACKSPACE */ && !backspaceShift ? 0 : caretShift);\n        if (positionToApply > this._getActualInputLength()) {\n          positionToApply = el.value === this._maskService.decimalMarker && el.value.length === 1 ? this._getActualInputLength() + 1 : this._getActualInputLength();\n        }\n        if (positionToApply < 0) {\n          positionToApply = 0;\n        }\n        el.setSelectionRange(positionToApply, positionToApply);\n        this._position = null;\n      } else {\n        console.warn('Ngx-mask writeValue work with string | number, your current value:', typeof transformedValue);\n      }\n    } else {\n      if (!this._maskValue) {\n        this.onChange(el.value);\n        return;\n      }\n      this._maskService.applyValueChanges(el.value.length, this._justPasted, this._code === \"Backspace\" /* MaskExpression.BACKSPACE */ || this._code === \"Delete\" /* MaskExpression.DELETE */);\n    }\n  }\n  // IME starts\n  onCompositionStart() {\n    this._isComposing = true;\n  }\n  // IME completes\n  onCompositionEnd(e) {\n    this._isComposing = false;\n    this._justPasted = true;\n    this.onInput(e);\n  }\n  onBlur(e) {\n    if (this._maskValue) {\n      const el = e.target;\n      if (this.leadZero && el.value.length > 0 && typeof this.decimalMarker === 'string') {\n        const maskExpression = this._maskService.maskExpression;\n        const precision = Number(this._maskService.maskExpression.slice(maskExpression.length - 1, maskExpression.length));\n        if (precision > 0) {\n          el.value = this.suffix ? el.value.split(this.suffix).join('') : el.value;\n          const decimalPart = el.value.split(this.decimalMarker)[1];\n          el.value = el.value.includes(this.decimalMarker) ? el.value + \"0\" /* MaskExpression.NUMBER_ZERO */.repeat(precision - decimalPart.length) + this.suffix : el.value + this.decimalMarker + \"0\" /* MaskExpression.NUMBER_ZERO */.repeat(precision) + this.suffix;\n          this._maskService.actualValue = el.value;\n        }\n      }\n      this._maskService.clearIfNotMatchFn();\n    }\n    this._isFocused = false;\n    this.onTouch();\n  }\n  onClick(e) {\n    if (!this._maskValue) {\n      return;\n    }\n    const el = e.target;\n    const posStart = 0;\n    const posEnd = 0;\n    if (el !== null && el.selectionStart !== null && el.selectionStart === el.selectionEnd && el.selectionStart > this._maskService.prefix.length &&\n    // eslint-disable-next-line\n    e.keyCode !== 38) {\n      if (this._maskService.showMaskTyped && !this.keepCharacterPositions) {\n        // We are showing the mask in the input\n        this._maskService.maskIsShown = this._maskService.showMaskInInput();\n        if (el.setSelectionRange && this._maskService.prefix + this._maskService.maskIsShown === el.value) {\n          // the input ONLY contains the mask, so position the cursor at the start\n          el.focus();\n          el.setSelectionRange(posStart, posEnd);\n        } else {\n          // the input contains some characters already\n          if (el.selectionStart > this._maskService.actualValue.length) {\n            // if the user clicked beyond our value's length, position the cursor at the end of our value\n            el.setSelectionRange(this._maskService.actualValue.length, this._maskService.actualValue.length);\n          }\n        }\n      }\n    }\n    const nextValue = el && (el.value === this._maskService.prefix ? this._maskService.prefix + this._maskService.maskIsShown : el.value);\n    /** Fix of cursor position jumping to end in most browsers no matter where cursor is inserted onFocus */\n    if (el && el.value !== nextValue) {\n      el.value = nextValue;\n    }\n    /** fix of cursor position with prefix when mouse click occur */\n    if (el && el.type !== 'number' && (el.selectionStart || el.selectionEnd) <= this._maskService.prefix.length) {\n      el.selectionStart = this._maskService.prefix.length;\n      return;\n    }\n    /** select only inserted text */\n    if (el && el.selectionEnd > this._getActualInputLength()) {\n      el.selectionEnd = this._getActualInputLength();\n    }\n  }\n  onKeyDown(e) {\n    if (!this._maskValue) {\n      return;\n    }\n    if (this._isComposing) {\n      // User finalize their choice from IME composition, so trigger onInput() for the composed text.\n      if (e.key === 'Enter') this.onCompositionEnd(e);\n      return;\n    }\n    this._code = e.code ? e.code : e.key;\n    const el = e.target;\n    this._inputValue = el.value;\n    this._setMask();\n    if (el.type !== 'number') {\n      if (e.key === \"ArrowUp\" /* MaskExpression.ARROW_UP */) {\n        e.preventDefault();\n      }\n      if (e.key === \"ArrowLeft\" /* MaskExpression.ARROW_LEFT */ || e.key === \"Backspace\" /* MaskExpression.BACKSPACE */ || e.key === \"Delete\" /* MaskExpression.DELETE */) {\n        if (e.key === \"Backspace\" /* MaskExpression.BACKSPACE */ && el.value.length === 0) {\n          el.selectionStart = el.selectionEnd;\n        }\n        if (e.key === \"Backspace\" /* MaskExpression.BACKSPACE */ && el.selectionStart !== 0) {\n          // If specialChars is false, (shouldn't ever happen) then set to the defaults\n          this.specialCharacters = this.specialCharacters?.length ? this.specialCharacters : this._config.specialCharacters;\n          if (this.prefix.length > 1 && el.selectionStart <= this.prefix.length) {\n            el.setSelectionRange(this.prefix.length, el.selectionEnd);\n          } else {\n            if (this._inputValue.length !== el.selectionStart && el.selectionStart !== 1) {\n              while (this.specialCharacters.includes((this._inputValue[el.selectionStart - 1] ?? \"\" /* MaskExpression.EMPTY_STRING */).toString()) && (this.prefix.length >= 1 && el.selectionStart > this.prefix.length || this.prefix.length === 0)) {\n                el.setSelectionRange(el.selectionStart - 1, el.selectionEnd);\n              }\n            }\n          }\n        }\n        this.checkSelectionOnDeletion(el);\n        if (this._maskService.prefix.length && el.selectionStart <= this._maskService.prefix.length && el.selectionEnd <= this._maskService.prefix.length) {\n          e.preventDefault();\n        }\n        const cursorStart = el.selectionStart;\n        if (e.key === \"Backspace\" /* MaskExpression.BACKSPACE */ && !el.readOnly && cursorStart === 0 && el.selectionEnd === el.value.length && el.value.length !== 0) {\n          this._position = this._maskService.prefix ? this._maskService.prefix.length : 0;\n          this._maskService.applyMask(this._maskService.prefix, this._maskService.maskExpression, this._position);\n        }\n      }\n      if (!!this.suffix && this.suffix.length > 1 && this._inputValue.length - this.suffix.length < el.selectionStart) {\n        el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n      } else if (e.code === 'KeyA' && e.ctrlKey || e.code === 'KeyA' && e.metaKey // Cmd + A (Mac)\n      ) {\n        el.setSelectionRange(0, this._getActualInputLength());\n        e.preventDefault();\n      }\n      this._maskService.selStart = el.selectionStart;\n      this._maskService.selEnd = el.selectionEnd;\n    }\n  }\n  /** It writes the value in the input */\n  writeValue(controlValue) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (typeof controlValue === 'object' && controlValue !== null && 'value' in controlValue) {\n        if ('disable' in controlValue) {\n          _this.setDisabledState(Boolean(controlValue.disable));\n        }\n        // eslint-disable-next-line no-param-reassign\n        controlValue = controlValue.value;\n      }\n      if (controlValue !== null) {\n        // eslint-disable-next-line no-param-reassign\n        controlValue = _this.inputTransformFn ? _this.inputTransformFn(controlValue) : controlValue;\n      }\n      if (typeof controlValue === 'string' || typeof controlValue === 'number' || controlValue === null || controlValue === undefined) {\n        if (controlValue === null || controlValue === undefined || controlValue === '') {\n          _this._maskService._currentValue = '';\n          _this._maskService._previousValue = '';\n        }\n        let inputValue = controlValue;\n        if (typeof inputValue === 'number' || _this._maskValue.startsWith(\"separator\" /* MaskExpression.SEPARATOR */)) {\n          inputValue = String(inputValue);\n          const localeDecimalMarker = _this._maskService.currentLocaleDecimalMarker();\n          if (!Array.isArray(_this._maskService.decimalMarker)) {\n            inputValue = _this._maskService.decimalMarker !== localeDecimalMarker ? inputValue.replace(localeDecimalMarker, _this._maskService.decimalMarker) : inputValue;\n          }\n          if (_this._maskService.leadZero && inputValue && _this.maskExpression && _this.dropSpecialCharacters !== false) {\n            inputValue = _this._maskService._checkPrecision(_this._maskService.maskExpression, inputValue);\n          }\n          if (_this.decimalMarker === \",\" /* MaskExpression.COMMA */ || Array.isArray(_this._maskService.decimalMarker) && _this.thousandSeparator === \".\" /* MaskExpression.DOT */) {\n            inputValue = inputValue.toString().replace(\".\" /* MaskExpression.DOT */, \",\" /* MaskExpression.COMMA */);\n          }\n          if (_this.maskExpression?.startsWith(\"separator\" /* MaskExpression.SEPARATOR */) && _this.leadZero) {\n            requestAnimationFrame(() => {\n              _this._maskService.applyMask(inputValue?.toString() ?? '', _this._maskService.maskExpression);\n            });\n          }\n          _this._maskService.isNumberValue = true;\n        }\n        if (typeof inputValue !== 'string') {\n          inputValue = '';\n        }\n        _this._inputValue = inputValue;\n        _this._setMask();\n        if (inputValue && _this._maskService.maskExpression || _this._maskService.maskExpression && (_this._maskService.prefix || _this._maskService.showMaskTyped)) {\n          // Let the service we know we are writing value so that triggering onChange function won't happen during applyMask\n          typeof _this.inputTransformFn !== 'function' ? _this._maskService.writingValue = true : '';\n          _this._maskService.formElementProperty = ['value', _this._maskService.applyMask(inputValue, _this._maskService.maskExpression)];\n          // Let the service know we've finished writing value\n          typeof _this.inputTransformFn !== 'function' ? _this._maskService.writingValue = false : '';\n        } else {\n          _this._maskService.formElementProperty = ['value', inputValue];\n        }\n        _this._inputValue = inputValue;\n      } else {\n        console.warn('Ngx-mask writeValue work with string | number, your current value:', typeof controlValue);\n      }\n    })();\n  }\n  registerOnChange(fn) {\n    this._maskService.onChange = this.onChange = fn;\n  }\n  registerOnTouched(fn) {\n    this.onTouch = fn;\n  }\n  _getActiveElement(document = this.document) {\n    const shadowRootEl = document?.activeElement?.shadowRoot;\n    if (!shadowRootEl?.activeElement) {\n      return document.activeElement;\n    } else {\n      return this._getActiveElement(shadowRootEl);\n    }\n  }\n  checkSelectionOnDeletion(el) {\n    el.selectionStart = Math.min(Math.max(this.prefix.length, el.selectionStart), this._inputValue.length - this.suffix.length);\n    el.selectionEnd = Math.min(Math.max(this.prefix.length, el.selectionEnd), this._inputValue.length - this.suffix.length);\n  }\n  /** It disables the input element */\n  setDisabledState(isDisabled) {\n    this._maskService.formElementProperty = ['disabled', isDisabled];\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  _applyMask() {\n    this._maskService.maskExpression = this._maskService._repeatPatternSymbols(this._maskValue || '');\n    this._maskService.formElementProperty = ['value', this._maskService.applyMask(this._inputValue, this._maskService.maskExpression)];\n  }\n  _validateTime(value) {\n    const rowMaskLen = this._maskValue.split(\"\" /* MaskExpression.EMPTY_STRING */).filter(s => s !== ':').length;\n    if (!value) {\n      return null; // Don't validate empty values to allow for optional form control\n    }\n    if (+(value[value.length - 1] ?? -1) === 0 && value.length < rowMaskLen || value.length <= rowMaskLen - 2) {\n      return this._createValidationError(value);\n    }\n    return null;\n  }\n  _getActualInputLength() {\n    return this._maskService.actualValue.length || this._maskService.actualValue.length + this._maskService.prefix.length;\n  }\n  _createValidationError(actualValue) {\n    return {\n      mask: {\n        requiredMask: this._maskValue,\n        actualValue\n      }\n    };\n  }\n  _setMask() {\n    this._maskExpressionArray.some(mask => {\n      const specialChart = mask.split(\"\" /* MaskExpression.EMPTY_STRING */).some(char => this._maskService.specialCharacters.includes(char));\n      if (specialChart && this._inputValue && this._areAllCharactersInEachStringSame(this._maskExpressionArray) || mask.includes(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */)) {\n        const test = this._maskService.removeMask(this._inputValue)?.length <= this._maskService.removeMask(mask)?.length;\n        if (test) {\n          this._maskValue = this.maskExpression = this._maskService.maskExpression = mask.includes(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */) ? this._maskService._repeatPatternSymbols(mask) : mask;\n          return test;\n        } else {\n          if (this._code === \"Backspace\" /* MaskExpression.BACKSPACE */) {\n            this._allowFewMaskChangeMask = true;\n          }\n          const expression = this._maskExpressionArray[this._maskExpressionArray.length - 1] ?? \"\" /* MaskExpression.EMPTY_STRING */;\n          this._maskValue = this.maskExpression = this._maskService.maskExpression = expression.includes(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */) ? this._maskService._repeatPatternSymbols(expression) : expression;\n        }\n      } else {\n        const check = this._maskService.removeMask(this._inputValue)?.split(\"\" /* MaskExpression.EMPTY_STRING */).every((character, index) => {\n          const indexMask = mask.charAt(index);\n          return this._maskService._checkSymbolMask(character, indexMask);\n        });\n        if (check || this._justPasted) {\n          this._maskValue = this.maskExpression = this._maskService.maskExpression = mask;\n          return check;\n        }\n      }\n    });\n  }\n  _areAllCharactersInEachStringSame(array) {\n    const specialCharacters = this._maskService.specialCharacters;\n    function removeSpecialCharacters(str) {\n      const regex = new RegExp(`[${specialCharacters.map(ch => `\\\\${ch}`).join('')}]`, 'g');\n      return str.replace(regex, '');\n    }\n    const processedArr = array.map(removeSpecialCharacters);\n    return processedArr.every(str => {\n      const uniqueCharacters = new Set(str);\n      return uniqueCharacters.size === 1;\n    });\n  }\n  static {\n    this.ɵfac = function NgxMaskDirective_Factory(t) {\n      return new (t || NgxMaskDirective)();\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NgxMaskDirective,\n      selectors: [[\"input\", \"mask\", \"\"], [\"textarea\", \"mask\", \"\"]],\n      hostBindings: function NgxMaskDirective_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"paste\", function NgxMaskDirective_paste_HostBindingHandler() {\n            return ctx.onPaste();\n          })(\"focus\", function NgxMaskDirective_focus_HostBindingHandler($event) {\n            return ctx.onFocus($event);\n          })(\"ngModelChange\", function NgxMaskDirective_ngModelChange_HostBindingHandler($event) {\n            return ctx.onModelChange($event);\n          })(\"input\", function NgxMaskDirective_input_HostBindingHandler($event) {\n            return ctx.onInput($event);\n          })(\"compositionstart\", function NgxMaskDirective_compositionstart_HostBindingHandler($event) {\n            return ctx.onCompositionStart($event);\n          })(\"compositionend\", function NgxMaskDirective_compositionend_HostBindingHandler($event) {\n            return ctx.onCompositionEnd($event);\n          })(\"blur\", function NgxMaskDirective_blur_HostBindingHandler($event) {\n            return ctx.onBlur($event);\n          })(\"click\", function NgxMaskDirective_click_HostBindingHandler($event) {\n            return ctx.onClick($event);\n          })(\"keydown\", function NgxMaskDirective_keydown_HostBindingHandler($event) {\n            return ctx.onKeyDown($event);\n          });\n        }\n      },\n      inputs: {\n        maskExpression: [i0.ɵɵInputFlags.None, \"mask\", \"maskExpression\"],\n        specialCharacters: \"specialCharacters\",\n        patterns: \"patterns\",\n        prefix: \"prefix\",\n        suffix: \"suffix\",\n        thousandSeparator: \"thousandSeparator\",\n        decimalMarker: \"decimalMarker\",\n        dropSpecialCharacters: \"dropSpecialCharacters\",\n        hiddenInput: \"hiddenInput\",\n        showMaskTyped: \"showMaskTyped\",\n        placeHolderCharacter: \"placeHolderCharacter\",\n        shownMaskExpression: \"shownMaskExpression\",\n        showTemplate: \"showTemplate\",\n        clearIfNotMatch: \"clearIfNotMatch\",\n        validation: \"validation\",\n        separatorLimit: \"separatorLimit\",\n        allowNegativeNumbers: \"allowNegativeNumbers\",\n        leadZeroDateTime: \"leadZeroDateTime\",\n        leadZero: \"leadZero\",\n        triggerOnMaskChange: \"triggerOnMaskChange\",\n        apm: \"apm\",\n        inputTransformFn: \"inputTransformFn\",\n        outputTransformFn: \"outputTransformFn\",\n        keepCharacterPositions: \"keepCharacterPositions\"\n      },\n      outputs: {\n        maskFilled: \"maskFilled\"\n      },\n      exportAs: [\"mask\", \"ngxMask\"],\n      standalone: true,\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: NgxMaskDirective,\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: NgxMaskDirective,\n        multi: true\n      }, NgxMaskService]), i0.ɵɵNgOnChangesFeature]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaskDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'input[mask], textarea[mask]',\n      standalone: true,\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: NgxMaskDirective,\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: NgxMaskDirective,\n        multi: true\n      }, NgxMaskService],\n      exportAs: 'mask,ngxMask'\n    }]\n  }], null, {\n    maskExpression: [{\n      type: Input,\n      args: ['mask']\n    }],\n    specialCharacters: [{\n      type: Input\n    }],\n    patterns: [{\n      type: Input\n    }],\n    prefix: [{\n      type: Input\n    }],\n    suffix: [{\n      type: Input\n    }],\n    thousandSeparator: [{\n      type: Input\n    }],\n    decimalMarker: [{\n      type: Input\n    }],\n    dropSpecialCharacters: [{\n      type: Input\n    }],\n    hiddenInput: [{\n      type: Input\n    }],\n    showMaskTyped: [{\n      type: Input\n    }],\n    placeHolderCharacter: [{\n      type: Input\n    }],\n    shownMaskExpression: [{\n      type: Input\n    }],\n    showTemplate: [{\n      type: Input\n    }],\n    clearIfNotMatch: [{\n      type: Input\n    }],\n    validation: [{\n      type: Input\n    }],\n    separatorLimit: [{\n      type: Input\n    }],\n    allowNegativeNumbers: [{\n      type: Input\n    }],\n    leadZeroDateTime: [{\n      type: Input\n    }],\n    leadZero: [{\n      type: Input\n    }],\n    triggerOnMaskChange: [{\n      type: Input\n    }],\n    apm: [{\n      type: Input\n    }],\n    inputTransformFn: [{\n      type: Input\n    }],\n    outputTransformFn: [{\n      type: Input\n    }],\n    keepCharacterPositions: [{\n      type: Input\n    }],\n    maskFilled: [{\n      type: Output\n    }],\n    onPaste: [{\n      type: HostListener,\n      args: ['paste']\n    }],\n    onFocus: [{\n      type: HostListener,\n      args: ['focus', ['$event']]\n    }],\n    onModelChange: [{\n      type: HostListener,\n      args: ['ngModelChange', ['$event']]\n    }],\n    onInput: [{\n      type: HostListener,\n      args: ['input', ['$event']]\n    }],\n    onCompositionStart: [{\n      type: HostListener,\n      args: ['compositionstart', ['$event']]\n    }],\n    onCompositionEnd: [{\n      type: HostListener,\n      args: ['compositionend', ['$event']]\n    }],\n    onBlur: [{\n      type: HostListener,\n      args: ['blur', ['$event']]\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }],\n    onKeyDown: [{\n      type: HostListener,\n      args: ['keydown', ['$event']]\n    }]\n  });\n})();\nclass NgxMaskPipe {\n  constructor() {\n    this.defaultOptions = inject(NGX_MASK_CONFIG);\n    this._maskService = inject(NgxMaskService);\n    this._maskExpressionArray = [];\n    this.mask = '';\n  }\n  transform(value, mask, {\n    patterns,\n    ...config\n  } = {}) {\n    const currentConfig = {\n      maskExpression: mask,\n      ...this.defaultOptions,\n      ...config,\n      patterns: {\n        ...this._maskService.patterns,\n        ...patterns\n      }\n    };\n    Object.entries(currentConfig).forEach(([key, value]) => {\n      //eslint-disable-next-line  @typescript-eslint/no-explicit-any\n      this._maskService[key] = value;\n    });\n    if (mask.includes('||')) {\n      if (mask.split('||').length > 1) {\n        this._maskExpressionArray = mask.split('||').sort((a, b) => {\n          return a.length - b.length;\n        });\n        this._setMask(value);\n        return this._maskService.applyMask(`${value}`, this.mask);\n      } else {\n        this._maskExpressionArray = [];\n        return this._maskService.applyMask(`${value}`, this.mask);\n      }\n    }\n    if (mask.includes(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */)) {\n      return this._maskService.applyMask(`${value}`, this._maskService._repeatPatternSymbols(mask));\n    }\n    if (mask.startsWith(\"separator\" /* MaskExpression.SEPARATOR */)) {\n      if (config.decimalMarker) {\n        this._maskService.decimalMarker = config.decimalMarker;\n      }\n      if (config.thousandSeparator) {\n        this._maskService.thousandSeparator = config.thousandSeparator;\n      }\n      if (config.leadZero) {\n        // eslint-disable-next-line no-param-reassign\n        this._maskService.leadZero = config.leadZero;\n      }\n      // eslint-disable-next-line no-param-reassign\n      value = String(value);\n      const localeDecimalMarker = this._maskService.currentLocaleDecimalMarker();\n      if (!Array.isArray(this._maskService.decimalMarker)) {\n        // eslint-disable-next-line no-param-reassign\n        value = this._maskService.decimalMarker !== localeDecimalMarker ? value.replace(localeDecimalMarker, this._maskService.decimalMarker) : value;\n      }\n      if (this._maskService.leadZero && value && this._maskService.dropSpecialCharacters !== false) {\n        // eslint-disable-next-line no-param-reassign\n        value = this._maskService._checkPrecision(mask, value);\n      }\n      if (this._maskService.decimalMarker === \",\" /* MaskExpression.COMMA */) {\n        // eslint-disable-next-line no-param-reassign\n        value = value.toString().replace(\".\" /* MaskExpression.DOT */, \",\" /* MaskExpression.COMMA */);\n      }\n      this._maskService.isNumberValue = true;\n    }\n    if (value === null || value === undefined) {\n      return this._maskService.applyMask('', mask);\n    }\n    return this._maskService.applyMask(`${value}`, mask);\n  }\n  _setMask(value) {\n    if (this._maskExpressionArray.length > 0) {\n      this._maskExpressionArray.some(mask => {\n        const test = this._maskService.removeMask(value)?.length <= this._maskService.removeMask(mask)?.length;\n        if (value && test) {\n          this.mask = mask;\n          return test;\n        } else {\n          const expression = this._maskExpressionArray[this._maskExpressionArray.length - 1] ?? \"\" /* MaskExpression.EMPTY_STRING */;\n          this.mask = expression;\n        }\n      });\n    }\n  }\n  static {\n    this.ɵfac = function NgxMaskPipe_Factory(t) {\n      return new (t || NgxMaskPipe)();\n    };\n  }\n  static {\n    this.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n      name: \"mask\",\n      type: NgxMaskPipe,\n      pure: true,\n      standalone: true\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaskPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'mask',\n      pure: true,\n      standalone: true\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { INITIAL_CONFIG, NEW_CONFIG, NGX_MASK_CONFIG, NgxMaskDirective, NgxMaskPipe, NgxMaskService, initialConfig, provideEnvironmentNgxMask, provideNgxMask, timeMasks, withoutValidation };","map":{"version":3,"names":["i0","InjectionToken","EventEmitter","inject","Injectable","ElementRef","Renderer2","makeEnvironmentProviders","Directive","Input","Output","HostListener","Pipe","DOCUMENT","NG_VALUE_ACCESSOR","NG_VALIDATORS","NGX_MASK_CONFIG","NEW_CONFIG","INITIAL_CONFIG","initialConfig","suffix","prefix","thousandSeparator","decimalMarker","clearIfNotMatch","showTemplate","showMaskTyped","placeHolderCharacter","dropSpecialCharacters","hiddenInput","undefined","shownMaskExpression","separatorLimit","allowNegativeNumbers","validation","specialCharacters","leadZeroDateTime","apm","leadZero","keepCharacterPositions","triggerOnMaskChange","inputTransformFn","value","outputTransformFn","maskFilled","patterns","pattern","RegExp","optional","X","symbol","A","S","U","L","d","m","M","H","h","s","timeMasks","withoutValidation","NgxMaskApplierService","constructor","_config","_shift","Set","plusOnePosition","maskExpression","actualValue","showKeepCharacterExp","deletedSpecialCharacter","_formatWithSeparators","str","thousandSeparatorChar","decimalChars","precision","x","decimalChar","Array","isArray","regExp","map","v","indexOf","join","split","match","decimals","length","res","replace","slice","rgx","test","substring","percentage","sanitizedStr","Number","includes","isNaN","getPrecision","Infinity","checkAndRemoveSuffix","inputValue","i","substr","checkInputPrecision","marker","find","dm","precisionRegEx","_charToRegExpExpression","precisionMatch","precisionMatchLength","diff","_compareOrIncludes","applyMaskWithPattern","maskAndPattern","mask","customPattern","applyMask","position","justPasted","backspaced","cb","cursor","result","multi","backspaceShift","shift","stepBack","inputArray","toString","valuesIP","ipError","_validIP","arr","push","cpfCnpjError","startsWith","_stripToDecimal","base","_splitPercentZero","inputValueAfterZero","_findFirstNonZeroDigitIndex","positionOfZeroOrDecimalMarker","zeroIndexNumberZero","zeroIndexMinus","zeroIndexThousand","firstIndexDecimalMarker","firstIndexNumberZero","secondIndexDecimalMarker","thousandSeparatorCharEscaped","invalidChars","invalidCharRegexp","strForSep","commaShift","shiftStep","add","clear","inputSymbol","symbolStarInPattern","_checkSymbolMask","_shiftStep","daysCount","inputValueCursor","inputValueCursorPlusOne","inputValueCursorPlusTwo","inputValueCursorMinusOne","inputValueCursorMinusTwo","inputValueSliceMinusThreeMinusOne","inputValueSliceMinusOnePlusOne","inputValueSliceCursorPlusTwo","inputValueSliceMinusTwoCursor","maskStartWithMonth","startWithMonthInput","monthsCount","withoutDays","specialChart","day1monthInput","day2monthInput","day2monthInputDot","day1monthPaste","day2monthPaste","_findSpecialChar","newPosition","has","actualShift","onlySpecial","every","char","isSpecialCharacterMaskFirstSymbol","_findDropSpecialChar","val","maskSymbol","filter","idx","isDecimalMarker","charsToEscape","inputLength","comparedValue","excludedValue","some","index","decimalIndex","emptyOrMinus","parsedValue","parseInt","integerPart","decimalPart","integerString","decimal","inputString","ɵfac","NgxMaskApplierService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","ngDevMode","ɵsetClassMetadata","type","NgxMaskService","arguments","isNumberValue","maskIsShown","selStart","selEnd","writingValue","maskChanged","_maskExpressionArray","_previousValue","_currentValue","_emitValue","onChange","_","_elementRef","document","_renderer","showMaskInInput","formControlResult","getSymbol","newInputValue","actualResult","splice","removeMask","shiftTypedSymbols","Boolean","getActualValue","item","requestAnimationFrame","hideInput","resLen","prefNmask","countSkipedSymbol","_numberSkipedSymbols","regex","exec","applyValueChanges","formElement","nativeElement","_getActiveElement","clearIfNotMatchFn","curr","compare","maskChar","symbolToReplace","currSymbol","replaceSymbol","numberToString","String","toLocaleString","useGrouping","maximumFractionDigits","inputVal","Error","_checkForIp","_checkForCpfCnpj","formElementProperty","name","Promise","resolve","then","setProperty","checkDropSpecialCharAmount","chars","_removeMask","_removeSuffix","_removePrefix","concat","cpf","cnpj","shadowRootEl","activeElement","shadowRoot","_toNumber","_checkSymbols","num","specialCharactersForRemove","_regExpForRemove","_retrieveSeparatorValue","_checkPatternForSpace","_replaceDecimalMarkerToDot","markers","separatorPrecision","_retrieveSeparatorPrecision","separatorValue","_checkPrecision","key","hasOwnProperty","patternString","maskExpretion","matcher","separatorExpression","toFixed","_repeatPatternSymbols","maskExp","reduce","accum","currVal","_start","_end","repeatNumber","replaceWith","symbols","currentLocaleDecimalMarker","ɵNgxMaskService_BaseFactory","NgxMaskService_Factory","ɵɵgetInheritedFactory","_configFactory","initConfig","configValue","Function","provideNgxMask","provide","useValue","useFactory","provideEnvironmentNgxMask","NgxMaskDirective","_maskValue","_position","_allowFewMaskChangeMask","_justPasted","_isFocused","_isComposing","_maskService","self","onTouch","ngOnChanges","changes","currentValue","previousValue","firstChange","sort","a","b","_setMask","c","click","_applyMask","validate","_createValidationError","_validateTime","counterOfOpt","lengthInsideCurlyBrackets","lastIndexOf","opt","array","lastIndexArray","special","emit","onPaste","onFocus","onModelChange","onInput","e","el","target","transformedValue","_inputValue","selectionStart","prefixLength","checkSymbols","checkSpecialCharacter","selectRangeBackspace","_code","part1","part2","caretShift","_backspaceShift","specialChartMinusOne","specialChartPlusOne","positionToApply","_getActualInputLength","setSelectionRange","console","warn","onCompositionStart","onCompositionEnd","onBlur","repeat","onClick","posStart","posEnd","selectionEnd","keyCode","focus","nextValue","onKeyDown","code","preventDefault","checkSelectionOnDeletion","cursorStart","readOnly","ctrlKey","metaKey","writeValue","controlValue","_this","_asyncToGenerator","setDisabledState","disable","localeDecimalMarker","registerOnChange","fn","registerOnTouched","Math","min","max","isDisabled","rowMaskLen","requiredMask","_areAllCharactersInEachStringSame","expression","check","character","indexMask","charAt","removeSpecialCharacters","ch","processedArr","uniqueCharacters","size","NgxMaskDirective_Factory","ɵdir","ɵɵdefineDirective","selectors","hostBindings","NgxMaskDirective_HostBindings","rf","ctx","ɵɵlistener","NgxMaskDirective_paste_HostBindingHandler","NgxMaskDirective_focus_HostBindingHandler","$event","NgxMaskDirective_ngModelChange_HostBindingHandler","NgxMaskDirective_input_HostBindingHandler","NgxMaskDirective_compositionstart_HostBindingHandler","NgxMaskDirective_compositionend_HostBindingHandler","NgxMaskDirective_blur_HostBindingHandler","NgxMaskDirective_click_HostBindingHandler","NgxMaskDirective_keydown_HostBindingHandler","inputs","ɵɵInputFlags","None","outputs","exportAs","standalone","features","ɵɵProvidersFeature","useExisting","ɵɵNgOnChangesFeature","args","selector","providers","NgxMaskPipe","defaultOptions","transform","config","currentConfig","Object","entries","forEach","NgxMaskPipe_Factory","ɵpipe","ɵɵdefinePipe","pure"],"sources":["/home/hugo/Documentos/TF-594345-hdelboy/themeforest-jtUTY/smart/source/main/node_modules/ngx-mask/fesm2022/ngx-mask.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, inject, Injectable, ElementRef, Renderer2, makeEnvironmentProviders, Directive, Input, Output, HostListener, Pipe } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\n\nconst NGX_MASK_CONFIG = new InjectionToken('ngx-mask config');\nconst NEW_CONFIG = new InjectionToken('new ngx-mask config');\nconst INITIAL_CONFIG = new InjectionToken('initial ngx-mask config');\nconst initialConfig = {\n    suffix: '',\n    prefix: '',\n    thousandSeparator: ' ',\n    decimalMarker: ['.', ','],\n    clearIfNotMatch: false,\n    showTemplate: false,\n    showMaskTyped: false,\n    placeHolderCharacter: '_',\n    dropSpecialCharacters: true,\n    hiddenInput: undefined,\n    shownMaskExpression: '',\n    separatorLimit: '',\n    allowNegativeNumbers: false,\n    validation: true,\n    // eslint-disable-next-line @typescript-eslint/quotes\n    specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\"', \"'\"],\n    leadZeroDateTime: false,\n    apm: false,\n    leadZero: false,\n    keepCharacterPositions: false,\n    triggerOnMaskChange: false,\n    inputTransformFn: (value) => value,\n    outputTransformFn: (value) => value,\n    maskFilled: new EventEmitter(),\n    patterns: {\n        '0': {\n            pattern: new RegExp('\\\\d'),\n        },\n        '9': {\n            pattern: new RegExp('\\\\d'),\n            optional: true,\n        },\n        X: {\n            pattern: new RegExp('\\\\d'),\n            symbol: '*',\n        },\n        A: {\n            pattern: new RegExp('[a-zA-Z0-9]'),\n        },\n        S: {\n            pattern: new RegExp('[a-zA-Z]'),\n        },\n        U: {\n            pattern: new RegExp('[A-Z]'),\n        },\n        L: {\n            pattern: new RegExp('[a-z]'),\n        },\n        d: {\n            pattern: new RegExp('\\\\d'),\n        },\n        m: {\n            pattern: new RegExp('\\\\d'),\n        },\n        M: {\n            pattern: new RegExp('\\\\d'),\n        },\n        H: {\n            pattern: new RegExp('\\\\d'),\n        },\n        h: {\n            pattern: new RegExp('\\\\d'),\n        },\n        s: {\n            pattern: new RegExp('\\\\d'),\n        },\n    },\n};\nconst timeMasks = [\n    \"Hh:m0:s0\" /* MaskExpression.HOURS_MINUTES_SECONDS */,\n    \"Hh:m0\" /* MaskExpression.HOURS_MINUTES */,\n    \"m0:s0\" /* MaskExpression.MINUTES_SECONDS */,\n];\nconst withoutValidation = [\n    \"percent\" /* MaskExpression.PERCENT */,\n    \"Hh\" /* MaskExpression.HOURS_HOUR */,\n    \"s0\" /* MaskExpression.SECONDS */,\n    \"m0\" /* MaskExpression.MINUTES */,\n    \"separator\" /* MaskExpression.SEPARATOR */,\n    \"d0/M0/0000\" /* MaskExpression.DAYS_MONTHS_YEARS */,\n    \"d0/M0\" /* MaskExpression.DAYS_MONTHS */,\n    \"d0\" /* MaskExpression.DAYS */,\n    \"M0\" /* MaskExpression.MONTHS */,\n];\n\nclass NgxMaskApplierService {\n    constructor() {\n        this._config = inject(NGX_MASK_CONFIG);\n        this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n        this.hiddenInput = this._config.hiddenInput;\n        this.clearIfNotMatch = this._config.clearIfNotMatch;\n        this.specialCharacters = this._config.specialCharacters;\n        this.patterns = this._config.patterns;\n        this.prefix = this._config.prefix;\n        this.suffix = this._config.suffix;\n        this.thousandSeparator = this._config.thousandSeparator;\n        this.decimalMarker = this._config.decimalMarker;\n        this.showMaskTyped = this._config.showMaskTyped;\n        this.placeHolderCharacter = this._config.placeHolderCharacter;\n        this.validation = this._config.validation;\n        this.separatorLimit = this._config.separatorLimit;\n        this.allowNegativeNumbers = this._config.allowNegativeNumbers;\n        this.leadZeroDateTime = this._config.leadZeroDateTime;\n        this.leadZero = this._config.leadZero;\n        this.apm = this._config.apm;\n        this.inputTransformFn = this._config.inputTransformFn;\n        this.outputTransformFn = this._config.outputTransformFn;\n        this.keepCharacterPositions = this._config.keepCharacterPositions;\n        this._shift = new Set();\n        this.plusOnePosition = false;\n        this.maskExpression = '';\n        this.actualValue = '';\n        this.showKeepCharacterExp = '';\n        this.shownMaskExpression = '';\n        this.deletedSpecialCharacter = false;\n        this._formatWithSeparators = (str, thousandSeparatorChar, decimalChars, precision) => {\n            let x = [];\n            let decimalChar = '';\n            if (Array.isArray(decimalChars)) {\n                const regExp = new RegExp(decimalChars.map((v) => ('[\\\\^$.|?*+()'.indexOf(v) >= 0 ? `\\\\${v}` : v)).join('|'));\n                x = str.split(regExp);\n                decimalChar = str.match(regExp)?.[0] ?? \"\" /* MaskExpression.EMPTY_STRING */;\n            }\n            else {\n                x = str.split(decimalChars);\n                decimalChar = decimalChars;\n            }\n            const decimals = x.length > 1 ? `${decimalChar}${x[1]}` : \"\" /* MaskExpression.EMPTY_STRING */;\n            let res = x[0] ?? \"\" /* MaskExpression.EMPTY_STRING */;\n            const separatorLimit = this.separatorLimit.replace(/\\s/g, \"\" /* MaskExpression.EMPTY_STRING */);\n            if (separatorLimit && +separatorLimit) {\n                if (res[0] === \"-\" /* MaskExpression.MINUS */) {\n                    res = `-${res.slice(1, res.length).slice(0, separatorLimit.length)}`;\n                }\n                else {\n                    res = res.slice(0, separatorLimit.length);\n                }\n            }\n            const rgx = /(\\d+)(\\d{3})/;\n            while (thousandSeparatorChar && rgx.test(res)) {\n                res = res.replace(rgx, '$1' + thousandSeparatorChar + '$2');\n            }\n            if (precision === undefined) {\n                return res + decimals;\n            }\n            else if (precision === 0) {\n                return res;\n            }\n            return res + decimals.substring(0, precision + 1);\n        };\n        this.percentage = (str) => {\n            const sanitizedStr = str.replace(',', '.');\n            const value = Number(this.allowNegativeNumbers && str.includes(\"-\" /* MaskExpression.MINUS */)\n                ? sanitizedStr.slice(1, str.length)\n                : sanitizedStr);\n            return !isNaN(value) && value >= 0 && value <= 100;\n        };\n        this.getPrecision = (maskExpression) => {\n            const x = maskExpression.split(\".\" /* MaskExpression.DOT */);\n            if (x.length > 1) {\n                return Number(x[x.length - 1]);\n            }\n            return Infinity;\n        };\n        this.checkAndRemoveSuffix = (inputValue) => {\n            for (let i = this.suffix?.length - 1; i >= 0; i--) {\n                const substr = this.suffix.substring(i, this.suffix?.length);\n                if (inputValue.includes(substr) &&\n                    i !== this.suffix?.length - 1 &&\n                    (i - 1 < 0 ||\n                        !inputValue.includes(this.suffix.substring(i - 1, this.suffix?.length)))) {\n                    return inputValue.replace(substr, \"\" /* MaskExpression.EMPTY_STRING */);\n                }\n            }\n            return inputValue;\n        };\n        this.checkInputPrecision = (inputValue, precision, decimalMarker) => {\n            if (precision < Infinity) {\n                // TODO need think about decimalMarker\n                if (Array.isArray(decimalMarker)) {\n                    const marker = decimalMarker.find((dm) => dm !== this.thousandSeparator);\n                    // eslint-disable-next-line no-param-reassign\n                    decimalMarker = marker ? marker : decimalMarker[0];\n                }\n                const precisionRegEx = new RegExp(this._charToRegExpExpression(decimalMarker) + `\\\\d{${precision}}.*$`);\n                const precisionMatch = inputValue.match(precisionRegEx);\n                const precisionMatchLength = (precisionMatch && precisionMatch[0]?.length) ?? 0;\n                if (precisionMatchLength - 1 > precision) {\n                    const diff = precisionMatchLength - 1 - precision;\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue = inputValue.substring(0, inputValue.length - diff);\n                }\n                if (precision === 0 &&\n                    this._compareOrIncludes(inputValue[inputValue.length - 1], decimalMarker, this.thousandSeparator)) {\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue = inputValue.substring(0, inputValue.length - 1);\n                }\n            }\n            return inputValue;\n        };\n    }\n    applyMaskWithPattern(inputValue, maskAndPattern) {\n        const [mask, customPattern] = maskAndPattern;\n        this.customPattern = customPattern;\n        return this.applyMask(inputValue, mask);\n    }\n    applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    cb = () => { }) {\n        if (!maskExpression || typeof inputValue !== 'string') {\n            return \"\" /* MaskExpression.EMPTY_STRING */;\n        }\n        let cursor = 0;\n        let result = '';\n        let multi = false;\n        let backspaceShift = false;\n        let shift = 1;\n        let stepBack = false;\n        if (inputValue.slice(0, this.prefix.length) === this.prefix) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = inputValue.slice(this.prefix.length, inputValue.length);\n        }\n        if (!!this.suffix && inputValue?.length > 0) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = this.checkAndRemoveSuffix(inputValue);\n        }\n        if (inputValue === '(' && this.prefix) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = '';\n        }\n        const inputArray = inputValue.toString().split(\"\" /* MaskExpression.EMPTY_STRING */);\n        if (this.allowNegativeNumbers &&\n            inputValue.slice(cursor, cursor + 1) === \"-\" /* MaskExpression.MINUS */) {\n            result += inputValue.slice(cursor, cursor + 1);\n        }\n        if (maskExpression === \"IP\" /* MaskExpression.IP */) {\n            const valuesIP = inputValue.split(\".\" /* MaskExpression.DOT */);\n            this.ipError = this._validIP(valuesIP);\n            // eslint-disable-next-line no-param-reassign\n            maskExpression = '099.099.099.099';\n        }\n        const arr = [];\n        for (let i = 0; i < inputValue.length; i++) {\n            if (inputValue[i]?.match('\\\\d')) {\n                arr.push(inputValue[i] ?? \"\" /* MaskExpression.EMPTY_STRING */);\n            }\n        }\n        if (maskExpression === \"CPF_CNPJ\" /* MaskExpression.CPF_CNPJ */) {\n            this.cpfCnpjError = arr.length !== 11 && arr.length !== 14;\n            if (arr.length > 11) {\n                // eslint-disable-next-line no-param-reassign\n                maskExpression = '00.000.000/0000-00';\n            }\n            else {\n                // eslint-disable-next-line no-param-reassign\n                maskExpression = '000.000.000-00';\n            }\n        }\n        if (maskExpression.startsWith(\"percent\" /* MaskExpression.PERCENT */)) {\n            if (inputValue.match('[a-z]|[A-Z]') ||\n                // eslint-disable-next-line no-useless-escape\n                (inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/.]/) && !backspaced)) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this._stripToDecimal(inputValue);\n                const precision = this.getPrecision(maskExpression);\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n            }\n            const decimalMarker = typeof this.decimalMarker === 'string' ? this.decimalMarker : \".\" /* MaskExpression.DOT */;\n            if (inputValue.indexOf(decimalMarker) > 0 &&\n                !this.percentage(inputValue.substring(0, inputValue.indexOf(decimalMarker)))) {\n                let base = inputValue.substring(0, inputValue.indexOf(decimalMarker) - 1);\n                if (this.allowNegativeNumbers &&\n                    inputValue.slice(cursor, cursor + 1) === \"-\" /* MaskExpression.MINUS */ &&\n                    !backspaced) {\n                    base = inputValue.substring(0, inputValue.indexOf(decimalMarker));\n                }\n                // eslint-disable-next-line no-param-reassign\n                inputValue = `${base}${inputValue.substring(inputValue.indexOf(decimalMarker), inputValue.length)}`;\n            }\n            let value = '';\n            this.allowNegativeNumbers &&\n                inputValue.slice(cursor, cursor + 1) === \"-\" /* MaskExpression.MINUS */\n                ? (value = `${\"-\" /* MaskExpression.MINUS */}${inputValue.slice(cursor + 1, cursor + inputValue.length)}`)\n                : (value = inputValue);\n            if (this.percentage(value)) {\n                result = this._splitPercentZero(inputValue);\n            }\n            else {\n                result = this._splitPercentZero(inputValue.substring(0, inputValue.length - 1));\n            }\n        }\n        else if (maskExpression.startsWith(\"separator\" /* MaskExpression.SEPARATOR */)) {\n            if (inputValue.match('[wа-яА-Я]') ||\n                inputValue.match('[ЁёА-я]') ||\n                inputValue.match('[a-z]|[A-Z]') ||\n                inputValue.match(/[-@#!$%\\\\^&*()_£¬'+|~=`{}\\]:\";<>.?/]/) ||\n                inputValue.match('[^A-Za-z0-9,]')) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this._stripToDecimal(inputValue);\n            }\n            const precision = this.getPrecision(maskExpression);\n            const decimalMarker = Array.isArray(this.decimalMarker)\n                ? \".\" /* MaskExpression.DOT */\n                : this.decimalMarker;\n            if (precision === 0) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this.allowNegativeNumbers\n                    ? inputValue.length > 2 &&\n                        inputValue[0] === \"-\" /* MaskExpression.MINUS */ &&\n                        inputValue[1] === \"0\" /* MaskExpression.NUMBER_ZERO */ &&\n                        inputValue[2] !== this.thousandSeparator &&\n                        inputValue[2] !== \",\" /* MaskExpression.COMMA */ &&\n                        inputValue[2] !== \".\" /* MaskExpression.DOT */\n                        ? '-' + inputValue.slice(2, inputValue.length)\n                        : inputValue[0] === \"0\" /* MaskExpression.NUMBER_ZERO */ &&\n                            inputValue.length > 1 &&\n                            inputValue[1] !== this.thousandSeparator &&\n                            inputValue[1] !== \",\" /* MaskExpression.COMMA */ &&\n                            inputValue[1] !== \".\" /* MaskExpression.DOT */\n                            ? inputValue.slice(1, inputValue.length)\n                            : inputValue\n                    : inputValue.length > 1 &&\n                        inputValue[0] === \"0\" /* MaskExpression.NUMBER_ZERO */ &&\n                        inputValue[1] !== this.thousandSeparator &&\n                        inputValue[1] !== \",\" /* MaskExpression.COMMA */ &&\n                        inputValue[1] !== \".\" /* MaskExpression.DOT */\n                        ? inputValue.slice(1, inputValue.length)\n                        : inputValue;\n            }\n            else {\n                if (inputValue[0] === decimalMarker && inputValue.length > 1) {\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue =\n                        \"0\" /* MaskExpression.NUMBER_ZERO */ + inputValue.slice(0, inputValue.length + 1);\n                    this.plusOnePosition = true;\n                }\n                if (inputValue[0] === \"0\" /* MaskExpression.NUMBER_ZERO */ &&\n                    inputValue[1] !== decimalMarker &&\n                    inputValue[1] !== this.thousandSeparator) {\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue =\n                        inputValue.length > 1\n                            ? inputValue.slice(0, 1) +\n                                decimalMarker +\n                                inputValue.slice(1, inputValue.length + 1)\n                            : inputValue;\n                    this.plusOnePosition = true;\n                }\n                if (this.allowNegativeNumbers &&\n                    inputValue[0] === \"-\" /* MaskExpression.MINUS */ &&\n                    (inputValue[1] === decimalMarker ||\n                        inputValue[1] === \"0\" /* MaskExpression.NUMBER_ZERO */)) {\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue =\n                        inputValue[1] === decimalMarker && inputValue.length > 2\n                            ? inputValue.slice(0, 1) +\n                                \"0\" /* MaskExpression.NUMBER_ZERO */ +\n                                inputValue.slice(1, inputValue.length)\n                            : inputValue[1] === \"0\" /* MaskExpression.NUMBER_ZERO */ &&\n                                inputValue.length > 2 &&\n                                inputValue[2] !== decimalMarker\n                                ? inputValue.slice(0, 2) +\n                                    decimalMarker +\n                                    inputValue.slice(2, inputValue.length)\n                                : inputValue;\n                    this.plusOnePosition = true;\n                }\n            }\n            if (backspaced) {\n                const inputValueAfterZero = inputValue.slice(this._findFirstNonZeroDigitIndex(inputValue), inputValue.length);\n                const positionOfZeroOrDecimalMarker = inputValue[position] === \"0\" /* MaskExpression.NUMBER_ZERO */ ||\n                    inputValue[position] === decimalMarker;\n                const zeroIndexNumberZero = inputValue[0] === \"0\" /* MaskExpression.NUMBER_ZERO */;\n                const zeroIndexMinus = inputValue[0] === \"-\" /* MaskExpression.MINUS */;\n                const zeroIndexThousand = inputValue[0] === this.thousandSeparator;\n                const firstIndexDecimalMarker = inputValue[1] === decimalMarker;\n                const firstIndexNumberZero = inputValue[1] === \"0\" /* MaskExpression.NUMBER_ZERO */;\n                const secondIndexDecimalMarker = inputValue[2] === decimalMarker;\n                if (zeroIndexNumberZero &&\n                    firstIndexDecimalMarker &&\n                    positionOfZeroOrDecimalMarker &&\n                    position < 2) {\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue = inputValueAfterZero;\n                }\n                if (zeroIndexMinus &&\n                    firstIndexNumberZero &&\n                    secondIndexDecimalMarker &&\n                    positionOfZeroOrDecimalMarker &&\n                    position < 3) {\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue = \"-\" /* MaskExpression.MINUS */ + inputValueAfterZero;\n                }\n                if (inputValueAfterZero !== \"-\" /* MaskExpression.MINUS */ &&\n                    ((position === 0 && (zeroIndexNumberZero || zeroIndexThousand)) ||\n                        (this.allowNegativeNumbers &&\n                            position === 1 &&\n                            zeroIndexMinus &&\n                            !firstIndexNumberZero))) {\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue = zeroIndexMinus\n                        ? \"-\" /* MaskExpression.MINUS */ + inputValueAfterZero\n                        : inputValueAfterZero;\n                }\n            }\n            // TODO: we had different rexexps here for the different cases... but tests dont seam to bother - check this\n            //  separator: no COMMA, dot-sep: no SPACE, COMMA OK, comma-sep: no SPACE, COMMA OK\n            const thousandSeparatorCharEscaped = this._charToRegExpExpression(this.thousandSeparator);\n            let invalidChars = '@#!$%^&*()_+|~=`{}\\\\[\\\\]:\\\\s,\\\\.\";<>?\\\\/'.replace(thousandSeparatorCharEscaped, '');\n            //.replace(decimalMarkerEscaped, '');\n            if (Array.isArray(this.decimalMarker)) {\n                for (const marker of this.decimalMarker) {\n                    invalidChars = invalidChars.replace(this._charToRegExpExpression(marker), \"\" /* MaskExpression.EMPTY_STRING */);\n                }\n            }\n            else {\n                invalidChars = invalidChars.replace(this._charToRegExpExpression(this.decimalMarker), '');\n            }\n            const invalidCharRegexp = new RegExp('[' + invalidChars + ']');\n            if (inputValue.match(invalidCharRegexp)) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = inputValue.substring(0, inputValue.length - 1);\n            }\n            // eslint-disable-next-line no-param-reassign\n            inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n            const strForSep = inputValue.replace(new RegExp(thousandSeparatorCharEscaped, 'g'), '');\n            result = this._formatWithSeparators(strForSep, this.thousandSeparator, this.decimalMarker, precision);\n            const commaShift = result.indexOf(\",\" /* MaskExpression.COMMA */) - inputValue.indexOf(\",\" /* MaskExpression.COMMA */);\n            const shiftStep = result.length - inputValue.length;\n            if (result[position - 1] === this.thousandSeparator && this.prefix && backspaced) {\n                // eslint-disable-next-line no-param-reassign\n                position = position - 1;\n            }\n            else if (shiftStep > 0 && result[position] !== this.thousandSeparator) {\n                backspaceShift = true;\n                let _shift = 0;\n                do {\n                    this._shift.add(position + _shift);\n                    _shift++;\n                } while (_shift < shiftStep);\n            }\n            else if (result[position - 1] === this.decimalMarker ||\n                shiftStep === -4 ||\n                shiftStep === -3 ||\n                result[position] === this.thousandSeparator) {\n                this._shift.clear();\n                this._shift.add(position - 1);\n            }\n            else if ((commaShift !== 0 &&\n                position > 0 &&\n                !(result.indexOf(\",\" /* MaskExpression.COMMA */) >= position && position > 3)) ||\n                (!(result.indexOf(\".\" /* MaskExpression.DOT */) >= position && position > 3) &&\n                    shiftStep <= 0)) {\n                this._shift.clear();\n                backspaceShift = true;\n                shift = shiftStep;\n                // eslint-disable-next-line no-param-reassign\n                position += shiftStep;\n                this._shift.add(position);\n            }\n            else {\n                this._shift.clear();\n            }\n        }\n        else {\n            for (let i = 0, inputSymbol = inputArray[0]; i < inputArray.length; i++, inputSymbol = inputArray[i] ?? \"\" /* MaskExpression.EMPTY_STRING */) {\n                if (cursor === maskExpression.length) {\n                    break;\n                }\n                const symbolStarInPattern = \"*\" /* MaskExpression.SYMBOL_STAR */ in this.patterns;\n                if (this._checkSymbolMask(inputSymbol, maskExpression[cursor] ?? \"\" /* MaskExpression.EMPTY_STRING */) &&\n                    maskExpression[cursor + 1] === \"?\" /* MaskExpression.SYMBOL_QUESTION */) {\n                    result += inputSymbol;\n                    cursor += 2;\n                }\n                else if (maskExpression[cursor + 1] === \"*\" /* MaskExpression.SYMBOL_STAR */ &&\n                    multi &&\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2] ?? \"\" /* MaskExpression.EMPTY_STRING */)) {\n                    result += inputSymbol;\n                    cursor += 3;\n                    multi = false;\n                }\n                else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor] ?? \"\" /* MaskExpression.EMPTY_STRING */) &&\n                    maskExpression[cursor + 1] === \"*\" /* MaskExpression.SYMBOL_STAR */ &&\n                    !symbolStarInPattern) {\n                    result += inputSymbol;\n                    multi = true;\n                }\n                else if (maskExpression[cursor + 1] === \"?\" /* MaskExpression.SYMBOL_QUESTION */ &&\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2] ?? \"\" /* MaskExpression.EMPTY_STRING */)) {\n                    result += inputSymbol;\n                    cursor += 3;\n                }\n                else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor] ?? \"\" /* MaskExpression.EMPTY_STRING */)) {\n                    if (maskExpression[cursor] === \"H\" /* MaskExpression.HOURS */) {\n                        if (this.apm ? Number(inputSymbol) > 9 : Number(inputSymbol) > 2) {\n                            // eslint-disable-next-line no-param-reassign\n                            position = !this.leadZeroDateTime ? position + 1 : position;\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === \"h\" /* MaskExpression.HOUR */) {\n                        if (this.apm\n                            ? (result.length === 1 && Number(result) > 1) ||\n                                (result === '1' && Number(inputSymbol) > 2) ||\n                                (inputValue.slice(cursor - 1, cursor).length === 1 &&\n                                    Number(inputValue.slice(cursor - 1, cursor)) > 2) ||\n                                (inputValue.slice(cursor - 1, cursor) === '1' &&\n                                    Number(inputSymbol) > 2)\n                            : (result === '2' && Number(inputSymbol) > 3) ||\n                                ((result.slice(cursor - 2, cursor) === '2' ||\n                                    result.slice(cursor - 3, cursor) === '2' ||\n                                    result.slice(cursor - 4, cursor) === '2' ||\n                                    result.slice(cursor - 1, cursor) === '2') &&\n                                    Number(inputSymbol) > 3 &&\n                                    cursor > 10)) {\n                            // eslint-disable-next-line no-param-reassign\n                            position = position + 1;\n                            cursor += 1;\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === \"m\" /* MaskExpression.MINUTE */ ||\n                        maskExpression[cursor] === \"s\" /* MaskExpression.SECOND */) {\n                        if (Number(inputSymbol) > 5) {\n                            // eslint-disable-next-line no-param-reassign\n                            position = !this.leadZeroDateTime ? position + 1 : position;\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    const daysCount = 31;\n                    const inputValueCursor = inputValue[cursor];\n                    const inputValueCursorPlusOne = inputValue[cursor + 1];\n                    const inputValueCursorPlusTwo = inputValue[cursor + 2];\n                    const inputValueCursorMinusOne = inputValue[cursor - 1];\n                    const inputValueCursorMinusTwo = inputValue[cursor - 2];\n                    const inputValueSliceMinusThreeMinusOne = inputValue.slice(cursor - 3, cursor - 1);\n                    const inputValueSliceMinusOnePlusOne = inputValue.slice(cursor - 1, cursor + 1);\n                    const inputValueSliceCursorPlusTwo = inputValue.slice(cursor, cursor + 2);\n                    const inputValueSliceMinusTwoCursor = inputValue.slice(cursor - 2, cursor);\n                    if (maskExpression[cursor] === \"d\" /* MaskExpression.DAY */) {\n                        const maskStartWithMonth = maskExpression.slice(0, 2) === \"M0\" /* MaskExpression.MONTHS */;\n                        const startWithMonthInput = maskExpression.slice(0, 2) === \"M0\" /* MaskExpression.MONTHS */ &&\n                            this.specialCharacters.includes(inputValueCursorMinusTwo);\n                        if ((Number(inputSymbol) > 3 && this.leadZeroDateTime) ||\n                            (!maskStartWithMonth &&\n                                (Number(inputValueSliceCursorPlusTwo) > daysCount ||\n                                    Number(inputValueSliceMinusOnePlusOne) > daysCount ||\n                                    this.specialCharacters.includes(inputValueCursorPlusOne))) ||\n                            (startWithMonthInput\n                                ? Number(inputValueSliceMinusOnePlusOne) > daysCount ||\n                                    (!this.specialCharacters.includes(inputValueCursor) &&\n                                        this.specialCharacters.includes(inputValueCursorPlusTwo)) ||\n                                    this.specialCharacters.includes(inputValueCursor)\n                                : Number(inputValueSliceCursorPlusTwo) > daysCount ||\n                                    this.specialCharacters.includes(inputValueCursorPlusOne))) {\n                            // eslint-disable-next-line no-param-reassign\n                            position = !this.leadZeroDateTime ? position + 1 : position;\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === \"M\" /* MaskExpression.MONTH */) {\n                        const monthsCount = 12;\n                        // mask without day\n                        const withoutDays = cursor === 0 &&\n                            (Number(inputSymbol) > 2 ||\n                                Number(inputValueSliceCursorPlusTwo) > monthsCount ||\n                                (this.specialCharacters.includes(inputValueCursorPlusOne) &&\n                                    !backspaced));\n                        // day<10 && month<12 for input\n                        const specialChart = maskExpression.slice(cursor + 2, cursor + 3);\n                        const day1monthInput = inputValueSliceMinusThreeMinusOne.includes(specialChart) &&\n                            maskExpression.includes('d0') &&\n                            ((this.specialCharacters.includes(inputValueCursorMinusTwo) &&\n                                Number(inputValueSliceMinusOnePlusOne) > monthsCount &&\n                                !this.specialCharacters.includes(inputValueCursor)) ||\n                                this.specialCharacters.includes(inputValueCursor));\n                        //  month<12 && day<10 for input\n                        const day2monthInput = Number(inputValueSliceMinusThreeMinusOne) <= daysCount &&\n                            !this.specialCharacters.includes(inputValueSliceMinusThreeMinusOne) &&\n                            this.specialCharacters.includes(inputValueCursorMinusOne) &&\n                            (Number(inputValueSliceCursorPlusTwo) > monthsCount ||\n                                this.specialCharacters.includes(inputValueCursorPlusOne));\n                        // cursor === 5 && without days\n                        const day2monthInputDot = (Number(inputValueSliceCursorPlusTwo) > monthsCount && cursor === 5) ||\n                            (this.specialCharacters.includes(inputValueCursorPlusOne) &&\n                                cursor === 5);\n                        // // day<10 && month<12 for paste whole data\n                        const day1monthPaste = Number(inputValueSliceMinusThreeMinusOne) > daysCount &&\n                            !this.specialCharacters.includes(inputValueSliceMinusThreeMinusOne) &&\n                            !this.specialCharacters.includes(inputValueSliceMinusTwoCursor) &&\n                            Number(inputValueSliceMinusTwoCursor) > monthsCount &&\n                            maskExpression.includes('d0');\n                        // 10<day<31 && month<12 for paste whole data\n                        const day2monthPaste = Number(inputValueSliceMinusThreeMinusOne) <= daysCount &&\n                            !this.specialCharacters.includes(inputValueSliceMinusThreeMinusOne) &&\n                            !this.specialCharacters.includes(inputValueCursorMinusOne) &&\n                            Number(inputValueSliceMinusOnePlusOne) > monthsCount;\n                        if ((Number(inputSymbol) > 1 && this.leadZeroDateTime) ||\n                            withoutDays ||\n                            day1monthInput ||\n                            day2monthPaste ||\n                            day1monthPaste ||\n                            day2monthInput ||\n                            (day2monthInputDot && !this.leadZeroDateTime)) {\n                            // eslint-disable-next-line no-param-reassign\n                            position = !this.leadZeroDateTime ? position + 1 : position;\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    result += inputSymbol;\n                    cursor++;\n                }\n                else if (this.specialCharacters.includes(inputSymbol) &&\n                    maskExpression[cursor] === inputSymbol) {\n                    result += inputSymbol;\n                    cursor++;\n                }\n                else if (this.specialCharacters.indexOf(maskExpression[cursor] ?? \"\" /* MaskExpression.EMPTY_STRING */) !== -1) {\n                    result += maskExpression[cursor];\n                    cursor++;\n                    this._shiftStep(maskExpression, cursor, inputArray.length);\n                    i--;\n                }\n                else if (maskExpression[cursor] === \"9\" /* MaskExpression.NUMBER_NINE */ &&\n                    this.showMaskTyped) {\n                    this._shiftStep(maskExpression, cursor, inputArray.length);\n                }\n                else if (this.patterns[maskExpression[cursor] ?? \"\" /* MaskExpression.EMPTY_STRING */] &&\n                    this.patterns[maskExpression[cursor] ?? \"\" /* MaskExpression.EMPTY_STRING */]?.optional) {\n                    if (!!inputArray[cursor] &&\n                        maskExpression !== '099.099.099.099' &&\n                        maskExpression !== '000.000.000-00' &&\n                        maskExpression !== '00.000.000/0000-00' &&\n                        !maskExpression.match(/^9+\\.0+$/) &&\n                        !this.patterns[maskExpression[cursor] ?? \"\" /* MaskExpression.EMPTY_STRING */]\n                            ?.optional) {\n                        result += inputArray[cursor];\n                    }\n                    if (maskExpression.includes(\"9\" /* MaskExpression.NUMBER_NINE */ + \"*\" /* MaskExpression.SYMBOL_STAR */) &&\n                        maskExpression.includes(\"0\" /* MaskExpression.NUMBER_ZERO */ + \"*\" /* MaskExpression.SYMBOL_STAR */)) {\n                        cursor++;\n                    }\n                    cursor++;\n                    i--;\n                }\n                else if (this.maskExpression[cursor + 1] === \"*\" /* MaskExpression.SYMBOL_STAR */ &&\n                    this._findSpecialChar(this.maskExpression[cursor + 2] ?? \"\" /* MaskExpression.EMPTY_STRING */) &&\n                    this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n                    multi) {\n                    cursor += 3;\n                    result += inputSymbol;\n                }\n                else if (this.maskExpression[cursor + 1] === \"?\" /* MaskExpression.SYMBOL_QUESTION */ &&\n                    this._findSpecialChar(this.maskExpression[cursor + 2] ?? \"\" /* MaskExpression.EMPTY_STRING */) &&\n                    this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n                    multi) {\n                    cursor += 3;\n                    result += inputSymbol;\n                }\n                else if (this.showMaskTyped &&\n                    this.specialCharacters.indexOf(inputSymbol) < 0 &&\n                    inputSymbol !== this.placeHolderCharacter &&\n                    this.placeHolderCharacter.length === 1) {\n                    stepBack = true;\n                }\n            }\n        }\n        if (result.length + 1 === maskExpression.length &&\n            this.specialCharacters.indexOf(maskExpression[maskExpression.length - 1] ?? \"\" /* MaskExpression.EMPTY_STRING */) !== -1) {\n            result += maskExpression[maskExpression.length - 1];\n        }\n        let newPosition = position + 1;\n        while (this._shift.has(newPosition)) {\n            shift++;\n            newPosition++;\n        }\n        let actualShift = justPasted && !maskExpression.startsWith(\"separator\" /* MaskExpression.SEPARATOR */)\n            ? cursor\n            : this._shift.has(position)\n                ? shift\n                : 0;\n        if (stepBack) {\n            actualShift--;\n        }\n        cb(actualShift, backspaceShift);\n        if (shift < 0) {\n            this._shift.clear();\n        }\n        let onlySpecial = false;\n        if (backspaced) {\n            onlySpecial = inputArray.every((char) => this.specialCharacters.includes(char));\n        }\n        let res = `${this.prefix}${onlySpecial ? \"\" /* MaskExpression.EMPTY_STRING */ : result}${this.showMaskTyped ? '' : this.suffix}`;\n        if (result.length === 0) {\n            res = !this.dropSpecialCharacters ? `${this.prefix}${result}` : `${result}`;\n        }\n        const isSpecialCharacterMaskFirstSymbol = inputValue.length === 1 &&\n            this.specialCharacters.includes(maskExpression[0]) &&\n            inputValue !== maskExpression[0];\n        if (!this._checkSymbolMask(inputValue, maskExpression[1]) &&\n            isSpecialCharacterMaskFirstSymbol) {\n            return '';\n        }\n        if (result.includes(\"-\" /* MaskExpression.MINUS */) && this.prefix && this.allowNegativeNumbers) {\n            if (backspaced && result === \"-\" /* MaskExpression.MINUS */) {\n                return '';\n            }\n            res = `${\"-\" /* MaskExpression.MINUS */}${this.prefix}${result\n                .split(\"-\" /* MaskExpression.MINUS */)\n                .join(\"\" /* MaskExpression.EMPTY_STRING */)}${this.suffix}`;\n        }\n        return res;\n    }\n    _findDropSpecialChar(inputSymbol) {\n        if (Array.isArray(this.dropSpecialCharacters)) {\n            return this.dropSpecialCharacters.find((val) => val === inputSymbol);\n        }\n        return this._findSpecialChar(inputSymbol);\n    }\n    _findSpecialChar(inputSymbol) {\n        return this.specialCharacters.find((val) => val === inputSymbol);\n    }\n    _checkSymbolMask(inputSymbol, maskSymbol) {\n        this.patterns = this.customPattern ? this.customPattern : this.patterns;\n        return ((this.patterns[maskSymbol]?.pattern &&\n            this.patterns[maskSymbol]?.pattern.test(inputSymbol)) ??\n            false);\n    }\n    _stripToDecimal(str) {\n        return str\n            .split(\"\" /* MaskExpression.EMPTY_STRING */)\n            .filter((i, idx) => {\n            const isDecimalMarker = typeof this.decimalMarker === 'string'\n                ? i === this.decimalMarker\n                : // TODO (inepipenko) use utility type\n                    this.decimalMarker.includes(i);\n            return (i.match('^-?\\\\d') ||\n                i === this.thousandSeparator ||\n                isDecimalMarker ||\n                (i === \"-\" /* MaskExpression.MINUS */ && idx === 0 && this.allowNegativeNumbers));\n        })\n            .join(\"\" /* MaskExpression.EMPTY_STRING */);\n    }\n    _charToRegExpExpression(char) {\n        // if (Array.isArray(char)) {\n        // \treturn char.map((v) => ('[\\\\^$.|?*+()'.indexOf(v) >= 0 ? `\\\\${v}` : v)).join('|');\n        // }\n        if (char) {\n            const charsToEscape = '[\\\\^$.|?*+()';\n            return char === ' ' ? '\\\\s' : charsToEscape.indexOf(char) >= 0 ? `\\\\${char}` : char;\n        }\n        return char;\n    }\n    _shiftStep(maskExpression, cursor, inputLength) {\n        const shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor))\n            ? inputLength\n            : cursor;\n        this._shift.add(shiftStep + this.prefix.length || 0);\n    }\n    _compareOrIncludes(value, comparedValue, excludedValue) {\n        return Array.isArray(comparedValue)\n            ? comparedValue.filter((v) => v !== excludedValue).includes(value)\n            : value === comparedValue;\n    }\n    _validIP(valuesIP) {\n        return !(valuesIP.length === 4 &&\n            !valuesIP.some((value, index) => {\n                if (valuesIP.length !== index + 1) {\n                    return value === \"\" /* MaskExpression.EMPTY_STRING */ || Number(value) > 255;\n                }\n                return value === \"\" /* MaskExpression.EMPTY_STRING */ || Number(value.substring(0, 3)) > 255;\n            }));\n    }\n    _splitPercentZero(value) {\n        if (value === \"-\" /* MaskExpression.MINUS */ && this.allowNegativeNumbers) {\n            return value;\n        }\n        const decimalIndex = typeof this.decimalMarker === 'string'\n            ? value.indexOf(this.decimalMarker)\n            : value.indexOf(\".\" /* MaskExpression.DOT */);\n        const emptyOrMinus = this.allowNegativeNumbers && value.includes(\"-\" /* MaskExpression.MINUS */) ? '-' : '';\n        if (decimalIndex === -1) {\n            const parsedValue = parseInt(emptyOrMinus ? value.slice(1, value.length) : value, 10);\n            return isNaN(parsedValue)\n                ? \"\" /* MaskExpression.EMPTY_STRING */\n                : `${emptyOrMinus}${parsedValue}`;\n        }\n        else {\n            const integerPart = parseInt(value.replace('-', '').substring(0, decimalIndex), 10);\n            const decimalPart = value.substring(decimalIndex + 1);\n            const integerString = isNaN(integerPart) ? '' : integerPart.toString();\n            const decimal = typeof this.decimalMarker === 'string' ? this.decimalMarker : \".\" /* MaskExpression.DOT */;\n            return integerString === \"\" /* MaskExpression.EMPTY_STRING */\n                ? \"\" /* MaskExpression.EMPTY_STRING */\n                : `${emptyOrMinus}${integerString}${decimal}${decimalPart}`;\n        }\n    }\n    _findFirstNonZeroDigitIndex(inputString) {\n        for (let i = 0; i < inputString.length; i++) {\n            const char = inputString[i];\n            if (char && char >= '1' && char <= '9') {\n                return i;\n            }\n        }\n        return -1;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.8\", ngImport: i0, type: NgxMaskApplierService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.3.8\", ngImport: i0, type: NgxMaskApplierService }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.8\", ngImport: i0, type: NgxMaskApplierService, decorators: [{\n            type: Injectable\n        }] });\n\nclass NgxMaskService extends NgxMaskApplierService {\n    constructor() {\n        super(...arguments);\n        this.isNumberValue = false;\n        this.maskIsShown = '';\n        this.selStart = null;\n        this.selEnd = null;\n        /**\n         * Whether we are currently in writeValue function, in this case when applying the mask we don't want to trigger onChange function,\n         * since writeValue should be a one way only process of writing the DOM value based on the Angular model value.\n         */\n        this.writingValue = false;\n        this.maskChanged = false;\n        this._maskExpressionArray = [];\n        this.triggerOnMaskChange = false;\n        this._previousValue = '';\n        this._currentValue = '';\n        this._emitValue = false;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.onChange = (_) => { };\n        this._elementRef = inject(ElementRef, { optional: true });\n        this.document = inject(DOCUMENT);\n        this._config = inject(NGX_MASK_CONFIG);\n        this._renderer = inject(Renderer2, { optional: true });\n    }\n    applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    cb = () => { }) {\n        if (!maskExpression) {\n            return inputValue !== this.actualValue ? this.actualValue : inputValue;\n        }\n        this.maskIsShown = this.showMaskTyped\n            ? this.showMaskInInput()\n            : \"\" /* MaskExpression.EMPTY_STRING */;\n        if (this.maskExpression === \"IP\" /* MaskExpression.IP */ && this.showMaskTyped) {\n            this.maskIsShown = this.showMaskInInput(inputValue || \"#\" /* MaskExpression.HASH */);\n        }\n        if (this.maskExpression === \"CPF_CNPJ\" /* MaskExpression.CPF_CNPJ */ && this.showMaskTyped) {\n            this.maskIsShown = this.showMaskInInput(inputValue || \"#\" /* MaskExpression.HASH */);\n        }\n        if (!inputValue && this.showMaskTyped) {\n            this.formControlResult(this.prefix);\n            return `${this.prefix}${this.maskIsShown}${this.suffix}`;\n        }\n        const getSymbol = !!inputValue && typeof this.selStart === 'number'\n            ? inputValue[this.selStart] ?? \"\" /* MaskExpression.EMPTY_STRING */\n            : \"\" /* MaskExpression.EMPTY_STRING */;\n        let newInputValue = '';\n        if (this.hiddenInput !== undefined && !this.writingValue) {\n            let actualResult = inputValue && inputValue.length === 1\n                ? inputValue.split(\"\" /* MaskExpression.EMPTY_STRING */)\n                : this.actualValue.split(\"\" /* MaskExpression.EMPTY_STRING */);\n            // eslint-disable  @typescript-eslint/no-unused-expressions\n            if (typeof this.selStart === 'object' && typeof this.selEnd === 'object') {\n                this.selStart = Number(this.selStart);\n                this.selEnd = Number(this.selEnd);\n            }\n            else {\n                inputValue !== \"\" /* MaskExpression.EMPTY_STRING */ && actualResult.length\n                    ? typeof this.selStart === 'number' && typeof this.selEnd === 'number'\n                        ? inputValue.length > actualResult.length\n                            ? actualResult.splice(this.selStart, 0, getSymbol)\n                            : inputValue.length < actualResult.length\n                                ? actualResult.length - inputValue.length === 1\n                                    ? backspaced\n                                        ? actualResult.splice(this.selStart - 1, 1)\n                                        : actualResult.splice(inputValue.length - 1, 1)\n                                    : actualResult.splice(this.selStart, this.selEnd - this.selStart)\n                                : null\n                        : null\n                    : (actualResult = []);\n            }\n            if (this.showMaskTyped) {\n                if (!this.hiddenInput) {\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue = this.removeMask(inputValue);\n                }\n            }\n            // eslint-enable  @typescript-eslint/no-unused-expressions\n            newInputValue =\n                this.actualValue.length && actualResult.length <= inputValue.length\n                    ? this.shiftTypedSymbols(actualResult.join(\"\" /* MaskExpression.EMPTY_STRING */))\n                    : inputValue;\n        }\n        if (justPasted && (this.hiddenInput || !this.hiddenInput)) {\n            newInputValue = inputValue;\n        }\n        if (backspaced &&\n            this.specialCharacters.indexOf(this.maskExpression[position] ?? \"\" /* MaskExpression.EMPTY_STRING */) !== -1 &&\n            this.showMaskTyped &&\n            !this.prefix) {\n            newInputValue = this._currentValue;\n        }\n        if (this.deletedSpecialCharacter && position) {\n            if (this.specialCharacters.includes(this.actualValue.slice(position, position + 1))) {\n                // eslint-disable-next-line no-param-reassign\n                position = position + 1;\n            }\n            else if (maskExpression.slice(position - 1, position + 1) !== \"M0\" /* MaskExpression.MONTHS */) {\n                // eslint-disable-next-line no-param-reassign\n                position = position - 2;\n            }\n            this.deletedSpecialCharacter = false;\n        }\n        if (this.showMaskTyped &&\n            this.placeHolderCharacter.length === 1 &&\n            !this.leadZeroDateTime) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = this.removeMask(inputValue);\n        }\n        if (this.maskChanged) {\n            newInputValue = inputValue;\n        }\n        else {\n            newInputValue =\n                Boolean(newInputValue) && newInputValue.length ? newInputValue : inputValue;\n        }\n        if (this.showMaskTyped &&\n            this.keepCharacterPositions &&\n            this.actualValue &&\n            !justPasted &&\n            !this.writingValue) {\n            const value = this.dropSpecialCharacters\n                ? this.removeMask(this.actualValue)\n                : this.actualValue;\n            this.formControlResult(value);\n            return this.actualValue\n                ? this.actualValue\n                : `${this.prefix}${this.maskIsShown}${this.suffix}`;\n        }\n        const result = super.applyMask(newInputValue, maskExpression, position, justPasted, backspaced, cb);\n        this.actualValue = this.getActualValue(result);\n        // handle some separator implications:\n        // a.) adjust decimalMarker default (. -> ,) if thousandSeparator is a dot\n        if (this.thousandSeparator === \".\" /* MaskExpression.DOT */ &&\n            this.decimalMarker === \".\" /* MaskExpression.DOT */) {\n            this.decimalMarker = \",\" /* MaskExpression.COMMA */;\n        }\n        // b) remove decimal marker from list of special characters to mask\n        if (this.maskExpression.startsWith(\"separator\" /* MaskExpression.SEPARATOR */) &&\n            this.dropSpecialCharacters === true) {\n            this.specialCharacters = this.specialCharacters.filter((item) => !this._compareOrIncludes(item, this.decimalMarker, this.thousandSeparator) //item !== this.decimalMarker, // !\n            );\n        }\n        if (result || result === '') {\n            this._previousValue = this._currentValue;\n            this._currentValue = result;\n            this._emitValue =\n                this._previousValue !== this._currentValue ||\n                    this.maskChanged ||\n                    (this._previousValue === this._currentValue && justPasted);\n        }\n        this._emitValue\n            ? this.writingValue && this.triggerOnMaskChange\n                ? requestAnimationFrame(() => this.formControlResult(result))\n                : this.formControlResult(result)\n            : '';\n        if (!this.showMaskTyped || (this.showMaskTyped && this.hiddenInput)) {\n            if (this.hiddenInput) {\n                if (backspaced) {\n                    return this.hideInput(result, this.maskExpression);\n                }\n                return `${this.hideInput(result, this.maskExpression)}${this.maskIsShown.slice(result.length)}`;\n            }\n            return result;\n        }\n        const resLen = result.length;\n        const prefNmask = `${this.prefix}${this.maskIsShown}${this.suffix}`;\n        if (this.maskExpression.includes(\"H\" /* MaskExpression.HOURS */)) {\n            const countSkipedSymbol = this._numberSkipedSymbols(result);\n            return `${result}${prefNmask.slice(resLen + countSkipedSymbol)}`;\n        }\n        else if (this.maskExpression === \"IP\" /* MaskExpression.IP */ ||\n            this.maskExpression === \"CPF_CNPJ\" /* MaskExpression.CPF_CNPJ */) {\n            return `${result}${prefNmask}`;\n        }\n        return `${result}${prefNmask.slice(resLen)}`;\n    }\n    // get the number of characters that were shifted\n    _numberSkipedSymbols(value) {\n        const regex = /(^|\\D)(\\d\\D)/g;\n        let match = regex.exec(value);\n        let countSkipedSymbol = 0;\n        while (match != null) {\n            countSkipedSymbol += 1;\n            match = regex.exec(value);\n        }\n        return countSkipedSymbol;\n    }\n    applyValueChanges(position, justPasted, backspaced, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    cb = () => { }) {\n        const formElement = this._elementRef?.nativeElement;\n        if (!formElement) {\n            return;\n        }\n        formElement.value = this.applyMask(formElement.value, this.maskExpression, position, justPasted, backspaced, cb);\n        if (formElement === this._getActiveElement()) {\n            return;\n        }\n        this.clearIfNotMatchFn();\n    }\n    hideInput(inputValue, maskExpression) {\n        return inputValue\n            .split(\"\" /* MaskExpression.EMPTY_STRING */)\n            .map((curr, index) => {\n            if (this.patterns &&\n                this.patterns[maskExpression[index] ?? \"\" /* MaskExpression.EMPTY_STRING */] &&\n                this.patterns[maskExpression[index] ?? \"\" /* MaskExpression.EMPTY_STRING */]?.symbol) {\n                return this.patterns[maskExpression[index] ?? \"\" /* MaskExpression.EMPTY_STRING */]\n                    ?.symbol;\n            }\n            return curr;\n        })\n            .join(\"\" /* MaskExpression.EMPTY_STRING */);\n    }\n    // this function is not necessary, it checks result against maskExpression\n    getActualValue(res) {\n        const compare = res\n            .split(\"\" /* MaskExpression.EMPTY_STRING */)\n            .filter((symbol, i) => {\n            const maskChar = this.maskExpression[i] ?? \"\" /* MaskExpression.EMPTY_STRING */;\n            return (this._checkSymbolMask(symbol, maskChar) ||\n                (this.specialCharacters.includes(maskChar) && symbol === maskChar));\n        });\n        if (compare.join(\"\" /* MaskExpression.EMPTY_STRING */) === res) {\n            return compare.join(\"\" /* MaskExpression.EMPTY_STRING */);\n        }\n        return res;\n    }\n    shiftTypedSymbols(inputValue) {\n        let symbolToReplace = '';\n        const newInputValue = (inputValue &&\n            inputValue\n                .split(\"\" /* MaskExpression.EMPTY_STRING */)\n                .map((currSymbol, index) => {\n                if (this.specialCharacters.includes(inputValue[index + 1] ?? \"\" /* MaskExpression.EMPTY_STRING */) &&\n                    inputValue[index + 1] !== this.maskExpression[index + 1]) {\n                    symbolToReplace = currSymbol;\n                    return inputValue[index + 1];\n                }\n                if (symbolToReplace.length) {\n                    const replaceSymbol = symbolToReplace;\n                    symbolToReplace = \"\" /* MaskExpression.EMPTY_STRING */;\n                    return replaceSymbol;\n                }\n                return currSymbol;\n            })) ||\n            [];\n        return newInputValue.join(\"\" /* MaskExpression.EMPTY_STRING */);\n    }\n    /**\n     * Convert number value to string\n     * 3.1415 -> '3.1415'\n     * 1e-7 -> '0.0000001'\n     */\n    numberToString(value) {\n        if ((!value && value !== 0) ||\n            (this.maskExpression.startsWith(\"separator\" /* MaskExpression.SEPARATOR */) &&\n                (this.leadZero || !this.dropSpecialCharacters)) ||\n            (this.maskExpression.startsWith(\"separator\" /* MaskExpression.SEPARATOR */) &&\n                this.separatorLimit.length > 14 &&\n                String(value).length > 14)) {\n            return String(value);\n        }\n        return Number(value)\n            .toLocaleString('fullwide', {\n            useGrouping: false,\n            maximumFractionDigits: 20,\n        })\n            .replace(`/${\"-\" /* MaskExpression.MINUS */}/`, \"-\" /* MaskExpression.MINUS */);\n    }\n    showMaskInInput(inputVal) {\n        if (this.showMaskTyped && !!this.shownMaskExpression) {\n            if (this.maskExpression.length !== this.shownMaskExpression.length) {\n                throw new Error('Mask expression must match mask placeholder length');\n            }\n            else {\n                return this.shownMaskExpression;\n            }\n        }\n        else if (this.showMaskTyped) {\n            if (inputVal) {\n                if (this.maskExpression === \"IP\" /* MaskExpression.IP */) {\n                    return this._checkForIp(inputVal);\n                }\n                if (this.maskExpression === \"CPF_CNPJ\" /* MaskExpression.CPF_CNPJ */) {\n                    return this._checkForCpfCnpj(inputVal);\n                }\n            }\n            if (this.placeHolderCharacter.length === this.maskExpression.length) {\n                return this.placeHolderCharacter;\n            }\n            return this.maskExpression.replace(/\\w/g, this.placeHolderCharacter);\n        }\n        return '';\n    }\n    clearIfNotMatchFn() {\n        const formElement = this._elementRef?.nativeElement;\n        if (!formElement) {\n            return;\n        }\n        if (this.clearIfNotMatch &&\n            this.prefix.length + this.maskExpression.length + this.suffix.length !==\n                formElement.value.replace(this.placeHolderCharacter, \"\" /* MaskExpression.EMPTY_STRING */)\n                    .length) {\n            this.formElementProperty = ['value', \"\" /* MaskExpression.EMPTY_STRING */];\n            this.applyMask('', this.maskExpression);\n        }\n    }\n    set formElementProperty([name, value]) {\n        if (!this._renderer || !this._elementRef) {\n            return;\n        }\n        //[TODO]: andriikamaldinov1 find better solution\n        Promise.resolve().then(() => this._renderer?.setProperty(this._elementRef?.nativeElement, name, value));\n    }\n    checkDropSpecialCharAmount(mask) {\n        const chars = mask\n            .split(\"\" /* MaskExpression.EMPTY_STRING */)\n            .filter((item) => this._findDropSpecialChar(item));\n        return chars.length;\n    }\n    removeMask(inputValue) {\n        return this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.specialCharacters.concat('_').concat(this.placeHolderCharacter));\n    }\n    _checkForIp(inputVal) {\n        if (inputVal === \"#\" /* MaskExpression.HASH */) {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        const arr = [];\n        for (let i = 0; i < inputVal.length; i++) {\n            const value = inputVal[i] ?? \"\" /* MaskExpression.EMPTY_STRING */;\n            if (!value) {\n                continue;\n            }\n            if (value.match('\\\\d')) {\n                arr.push(value);\n            }\n        }\n        if (arr.length <= 3) {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        if (arr.length > 3 && arr.length <= 6) {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        if (arr.length > 6 && arr.length <= 9) {\n            return this.placeHolderCharacter;\n        }\n        if (arr.length > 9 && arr.length <= 12) {\n            return '';\n        }\n        return '';\n    }\n    _checkForCpfCnpj(inputVal) {\n        const cpf = `${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n        const cnpj = `${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `/${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n        if (inputVal === \"#\" /* MaskExpression.HASH */) {\n            return cpf;\n        }\n        const arr = [];\n        for (let i = 0; i < inputVal.length; i++) {\n            const value = inputVal[i] ?? \"\" /* MaskExpression.EMPTY_STRING */;\n            if (!value) {\n                continue;\n            }\n            if (value.match('\\\\d')) {\n                arr.push(value);\n            }\n        }\n        if (arr.length <= 3) {\n            return cpf.slice(arr.length, cpf.length);\n        }\n        if (arr.length > 3 && arr.length <= 6) {\n            return cpf.slice(arr.length + 1, cpf.length);\n        }\n        if (arr.length > 6 && arr.length <= 9) {\n            return cpf.slice(arr.length + 2, cpf.length);\n        }\n        if (arr.length > 9 && arr.length < 11) {\n            return cpf.slice(arr.length + 3, cpf.length);\n        }\n        if (arr.length === 11) {\n            return '';\n        }\n        if (arr.length === 12) {\n            if (inputVal.length === 17) {\n                return cnpj.slice(16, cnpj.length);\n            }\n            return cnpj.slice(15, cnpj.length);\n        }\n        if (arr.length > 12 && arr.length <= 14) {\n            return cnpj.slice(arr.length + 4, cnpj.length);\n        }\n        return '';\n    }\n    /**\n     * Recursively determine the current active element by navigating the Shadow DOM until the Active Element is found.\n     */\n    _getActiveElement(document = this.document) {\n        const shadowRootEl = document?.activeElement?.shadowRoot;\n        if (!shadowRootEl?.activeElement) {\n            return document.activeElement;\n        }\n        else {\n            return this._getActiveElement(shadowRootEl);\n        }\n    }\n    /**\n     * Propogates the input value back to the Angular model by triggering the onChange function. It won't do this if writingValue\n     * is true. If that is true it means we are currently in the writeValue function, which is supposed to only update the actual\n     * DOM element based on the Angular model value. It should be a one way process, i.e. writeValue should not be modifying the Angular\n     * model value too. Therefore, we don't trigger onChange in this scenario.\n     * @param inputValue the current form input value\n     */\n    formControlResult(inputValue) {\n        if (this.writingValue || (!this.triggerOnMaskChange && this.maskChanged)) {\n            this.triggerOnMaskChange && this.maskChanged\n                ? this.onChange(this.outputTransformFn(this._toNumber(this._checkSymbols(this._removeSuffix(this._removePrefix(inputValue))))))\n                : '';\n            this.maskChanged = false;\n            return;\n        }\n        if (Array.isArray(this.dropSpecialCharacters)) {\n            this.onChange(this.outputTransformFn(this._toNumber(this._checkSymbols(this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.dropSpecialCharacters)))));\n        }\n        else if (this.dropSpecialCharacters ||\n            (!this.dropSpecialCharacters && this.prefix === inputValue)) {\n            this.onChange(this.outputTransformFn(this._toNumber(this._checkSymbols(this._removeSuffix(this._removePrefix(inputValue))))));\n        }\n        else {\n            this.onChange(this.outputTransformFn(this._toNumber(inputValue)));\n        }\n    }\n    _toNumber(value) {\n        if (!this.isNumberValue || value === \"\" /* MaskExpression.EMPTY_STRING */) {\n            return value;\n        }\n        if (this.maskExpression.startsWith(\"separator\" /* MaskExpression.SEPARATOR */) &&\n            (this.leadZero || !this.dropSpecialCharacters)) {\n            return value;\n        }\n        if (String(value).length > 16 && this.separatorLimit.length > 14) {\n            return String(value);\n        }\n        const num = Number(value);\n        if (this.maskExpression.startsWith(\"separator\" /* MaskExpression.SEPARATOR */) && Number.isNaN(num)) {\n            const val = String(value).replace(',', '.');\n            return Number(val);\n        }\n        return Number.isNaN(num) ? value : num;\n    }\n    _removeMask(value, specialCharactersForRemove) {\n        if (this.maskExpression.startsWith(\"percent\" /* MaskExpression.PERCENT */) &&\n            value.includes(\".\" /* MaskExpression.DOT */)) {\n            return value;\n        }\n        return value\n            ? value.replace(this._regExpForRemove(specialCharactersForRemove), \"\" /* MaskExpression.EMPTY_STRING */)\n            : value;\n    }\n    _removePrefix(value) {\n        if (!this.prefix) {\n            return value;\n        }\n        return value ? value.replace(this.prefix, \"\" /* MaskExpression.EMPTY_STRING */) : value;\n    }\n    _removeSuffix(value) {\n        if (!this.suffix) {\n            return value;\n        }\n        return value ? value.replace(this.suffix, \"\" /* MaskExpression.EMPTY_STRING */) : value;\n    }\n    _retrieveSeparatorValue(result) {\n        let specialCharacters = Array.isArray(this.dropSpecialCharacters)\n            ? this.specialCharacters.filter((v) => {\n                return this.dropSpecialCharacters.includes(v);\n            })\n            : this.specialCharacters;\n        if (!this.deletedSpecialCharacter &&\n            this._checkPatternForSpace() &&\n            result.includes(\" \" /* MaskExpression.WHITE_SPACE */) &&\n            this.maskExpression.includes(\"*\" /* MaskExpression.SYMBOL_STAR */)) {\n            specialCharacters = specialCharacters.filter((char) => char !== \" \" /* MaskExpression.WHITE_SPACE */);\n        }\n        return this._removeMask(result, specialCharacters);\n    }\n    _regExpForRemove(specialCharactersForRemove) {\n        return new RegExp(specialCharactersForRemove.map((item) => `\\\\${item}`).join('|'), 'gi');\n    }\n    _replaceDecimalMarkerToDot(value) {\n        const markers = Array.isArray(this.decimalMarker)\n            ? this.decimalMarker\n            : [this.decimalMarker];\n        return value.replace(this._regExpForRemove(markers), \".\" /* MaskExpression.DOT */);\n    }\n    _checkSymbols(result) {\n        if (result === \"\" /* MaskExpression.EMPTY_STRING */) {\n            return result;\n        }\n        if (this.maskExpression.startsWith(\"percent\" /* MaskExpression.PERCENT */) &&\n            this.decimalMarker === \",\" /* MaskExpression.COMMA */) {\n            // eslint-disable-next-line no-param-reassign\n            result = result.replace(\",\" /* MaskExpression.COMMA */, \".\" /* MaskExpression.DOT */);\n        }\n        const separatorPrecision = this._retrieveSeparatorPrecision(this.maskExpression);\n        const separatorValue = this._replaceDecimalMarkerToDot(this._retrieveSeparatorValue(result));\n        if (!this.isNumberValue) {\n            return separatorValue;\n        }\n        if (separatorPrecision) {\n            if (result === this.decimalMarker) {\n                return null;\n            }\n            if (this.separatorLimit.length > 14) {\n                return String(separatorValue);\n            }\n            return this._checkPrecision(this.maskExpression, separatorValue);\n        }\n        else {\n            return separatorValue;\n        }\n    }\n    _checkPatternForSpace() {\n        for (const key in this.patterns) {\n            // eslint-disable-next-line no-prototype-builtins\n            if (this.patterns[key] && this.patterns[key]?.hasOwnProperty('pattern')) {\n                const patternString = this.patterns[key]?.pattern.toString();\n                const pattern = this.patterns[key]?.pattern;\n                if (patternString?.includes(\" \" /* MaskExpression.WHITE_SPACE */) &&\n                    pattern?.test(this.maskExpression)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    // TODO should think about helpers or separting decimal precision to own property\n    _retrieveSeparatorPrecision(maskExpretion) {\n        const matcher = maskExpretion.match(new RegExp(`^separator\\\\.([^d]*)`));\n        return matcher ? Number(matcher[1]) : null;\n    }\n    _checkPrecision(separatorExpression, separatorValue) {\n        const separatorPrecision = separatorExpression.slice(10, 11);\n        if (separatorExpression.indexOf('2') > 0 ||\n            (this.leadZero && Number(separatorPrecision) > 0)) {\n            if (this.decimalMarker === \",\" /* MaskExpression.COMMA */ && this.leadZero) {\n                // eslint-disable-next-line no-param-reassign\n                separatorValue = separatorValue.replace(',', '.');\n            }\n            return this.leadZero\n                ? Number(separatorValue).toFixed(Number(separatorPrecision))\n                : Number(separatorValue).toFixed(2);\n        }\n        return this.numberToString(separatorValue);\n    }\n    _repeatPatternSymbols(maskExp) {\n        return ((maskExp.match(/{[0-9]+}/) &&\n            maskExp\n                .split(\"\" /* MaskExpression.EMPTY_STRING */)\n                .reduce((accum, currVal, index) => {\n                this._start =\n                    currVal === \"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */ ? index : this._start;\n                if (currVal !== \"}\" /* MaskExpression.CURLY_BRACKETS_RIGHT */) {\n                    return this._findSpecialChar(currVal) ? accum + currVal : accum;\n                }\n                this._end = index;\n                const repeatNumber = Number(maskExp.slice(this._start + 1, this._end));\n                const replaceWith = new Array(repeatNumber + 1).join(maskExp[this._start - 1]);\n                if (maskExp.slice(0, this._start).length > 1 &&\n                    maskExp.includes(\"S\" /* MaskExpression.LETTER_S */)) {\n                    const symbols = maskExp.slice(0, this._start - 1);\n                    return symbols.includes(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */)\n                        ? accum + replaceWith\n                        : symbols + accum + replaceWith;\n                }\n                else {\n                    return accum + replaceWith;\n                }\n            }, '')) ||\n            maskExp);\n    }\n    currentLocaleDecimalMarker() {\n        return (1.1).toLocaleString().substring(1, 2);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.8\", ngImport: i0, type: NgxMaskService, deps: null, target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.3.8\", ngImport: i0, type: NgxMaskService }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.8\", ngImport: i0, type: NgxMaskService, decorators: [{\n            type: Injectable\n        }] });\n\n/**\n * @internal\n */\nfunction _configFactory() {\n    const initConfig = inject(INITIAL_CONFIG);\n    const configValue = inject(NEW_CONFIG);\n    return configValue instanceof Function\n        ? { ...initConfig, ...configValue() }\n        : { ...initConfig, ...configValue };\n}\nfunction provideNgxMask(configValue) {\n    return [\n        {\n            provide: NEW_CONFIG,\n            useValue: configValue,\n        },\n        {\n            provide: INITIAL_CONFIG,\n            useValue: initialConfig,\n        },\n        {\n            provide: NGX_MASK_CONFIG,\n            useFactory: _configFactory,\n        },\n        NgxMaskService,\n    ];\n}\nfunction provideEnvironmentNgxMask(configValue) {\n    return makeEnvironmentProviders(provideNgxMask(configValue));\n}\n\nclass NgxMaskDirective {\n    constructor() {\n        this.maskExpression = '';\n        this.specialCharacters = [];\n        this.patterns = {};\n        this.prefix = '';\n        this.suffix = '';\n        this.thousandSeparator = ' ';\n        this.decimalMarker = '.';\n        this.dropSpecialCharacters = null;\n        this.hiddenInput = null;\n        this.showMaskTyped = null;\n        this.placeHolderCharacter = null;\n        this.shownMaskExpression = null;\n        this.showTemplate = null;\n        this.clearIfNotMatch = null;\n        this.validation = null;\n        this.separatorLimit = null;\n        this.allowNegativeNumbers = null;\n        this.leadZeroDateTime = null;\n        this.leadZero = null;\n        this.triggerOnMaskChange = null;\n        this.apm = null;\n        this.inputTransformFn = null;\n        this.outputTransformFn = null;\n        this.keepCharacterPositions = null;\n        this.maskFilled = new EventEmitter();\n        this._maskValue = '';\n        this._position = null;\n        this._maskExpressionArray = [];\n        this._allowFewMaskChangeMask = false;\n        this._justPasted = false;\n        this._isFocused = false;\n        /**For IME composition event */\n        this._isComposing = false;\n        this.document = inject(DOCUMENT);\n        this._maskService = inject(NgxMaskService, { self: true });\n        this._config = inject(NGX_MASK_CONFIG);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.onChange = (_) => { };\n        this.onTouch = () => { };\n    }\n    ngOnChanges(changes) {\n        const { maskExpression, specialCharacters, patterns, prefix, suffix, thousandSeparator, decimalMarker, dropSpecialCharacters, hiddenInput, showMaskTyped, placeHolderCharacter, shownMaskExpression, showTemplate, clearIfNotMatch, validation, separatorLimit, allowNegativeNumbers, leadZeroDateTime, leadZero, triggerOnMaskChange, apm, inputTransformFn, outputTransformFn, keepCharacterPositions, } = changes;\n        if (maskExpression) {\n            if (maskExpression.currentValue !== maskExpression.previousValue &&\n                !maskExpression.firstChange) {\n                this._maskService.maskChanged = true;\n            }\n            if (maskExpression.currentValue &&\n                maskExpression.currentValue.split(\"||\" /* MaskExpression.OR */).length > 1) {\n                this._maskExpressionArray = maskExpression.currentValue\n                    .split(\"||\" /* MaskExpression.OR */)\n                    .sort((a, b) => {\n                    return a.length - b.length;\n                });\n                this._setMask();\n            }\n            else {\n                this._maskExpressionArray = [];\n                this._maskValue = maskExpression.currentValue || \"\" /* MaskExpression.EMPTY_STRING */;\n                this._maskService.maskExpression = this._maskValue;\n            }\n        }\n        if (specialCharacters) {\n            if (!specialCharacters.currentValue || !Array.isArray(specialCharacters.currentValue)) {\n                return;\n            }\n            else {\n                this._maskService.specialCharacters = specialCharacters.currentValue || [];\n            }\n        }\n        if (allowNegativeNumbers) {\n            this._maskService.allowNegativeNumbers = allowNegativeNumbers.currentValue;\n            if (this._maskService.allowNegativeNumbers) {\n                this._maskService.specialCharacters = this._maskService.specialCharacters.filter((c) => c !== \"-\" /* MaskExpression.MINUS */);\n            }\n        }\n        // Only overwrite the mask available patterns if a pattern has actually been passed in\n        if (patterns && patterns.currentValue) {\n            this._maskService.patterns = patterns.currentValue;\n        }\n        if (apm && apm.currentValue) {\n            this._maskService.apm = apm.currentValue;\n        }\n        if (prefix) {\n            this._maskService.prefix = prefix.currentValue;\n        }\n        if (suffix) {\n            this._maskService.suffix = suffix.currentValue;\n        }\n        if (thousandSeparator) {\n            this._maskService.thousandSeparator = thousandSeparator.currentValue;\n        }\n        if (decimalMarker) {\n            this._maskService.decimalMarker = decimalMarker.currentValue;\n        }\n        if (dropSpecialCharacters) {\n            this._maskService.dropSpecialCharacters = dropSpecialCharacters.currentValue;\n        }\n        if (hiddenInput) {\n            this._maskService.hiddenInput = hiddenInput.currentValue;\n        }\n        if (showMaskTyped) {\n            this._maskService.showMaskTyped = showMaskTyped.currentValue;\n            if (showMaskTyped.previousValue === false &&\n                showMaskTyped.currentValue === true &&\n                this._isFocused) {\n                requestAnimationFrame(() => {\n                    this._maskService._elementRef?.nativeElement.click();\n                });\n            }\n        }\n        if (placeHolderCharacter) {\n            this._maskService.placeHolderCharacter = placeHolderCharacter.currentValue;\n        }\n        if (shownMaskExpression) {\n            this._maskService.shownMaskExpression = shownMaskExpression.currentValue;\n        }\n        if (showTemplate) {\n            this._maskService.showTemplate = showTemplate.currentValue;\n        }\n        if (clearIfNotMatch) {\n            this._maskService.clearIfNotMatch = clearIfNotMatch.currentValue;\n        }\n        if (validation) {\n            this._maskService.validation = validation.currentValue;\n        }\n        if (separatorLimit) {\n            this._maskService.separatorLimit = separatorLimit.currentValue;\n        }\n        if (leadZeroDateTime) {\n            this._maskService.leadZeroDateTime = leadZeroDateTime.currentValue;\n        }\n        if (leadZero) {\n            this._maskService.leadZero = leadZero.currentValue;\n        }\n        if (triggerOnMaskChange) {\n            this._maskService.triggerOnMaskChange = triggerOnMaskChange.currentValue;\n        }\n        if (inputTransformFn) {\n            this._maskService.inputTransformFn = inputTransformFn.currentValue;\n        }\n        if (outputTransformFn) {\n            this._maskService.outputTransformFn = outputTransformFn.currentValue;\n        }\n        if (keepCharacterPositions) {\n            this._maskService.keepCharacterPositions = keepCharacterPositions.currentValue;\n        }\n        this._applyMask();\n    }\n    validate({ value }) {\n        if (!this._maskService.validation || !this._maskValue) {\n            return null;\n        }\n        if (this._maskService.ipError) {\n            return this._createValidationError(value);\n        }\n        if (this._maskService.cpfCnpjError) {\n            return this._createValidationError(value);\n        }\n        if (this._maskValue.startsWith(\"separator\" /* MaskExpression.SEPARATOR */)) {\n            return null;\n        }\n        if (withoutValidation.includes(this._maskValue)) {\n            return null;\n        }\n        if (this._maskService.clearIfNotMatch) {\n            return null;\n        }\n        if (timeMasks.includes(this._maskValue)) {\n            return this._validateTime(value);\n        }\n        if (value && value.toString().length >= 1) {\n            let counterOfOpt = 0;\n            if (this._maskValue.includes(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */) &&\n                this._maskValue.includes(\"}\" /* MaskExpression.CURLY_BRACKETS_RIGHT */)) {\n                const lengthInsideCurlyBrackets = this._maskValue.slice(this._maskValue.indexOf(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */) + 1, this._maskValue.indexOf(\"}\" /* MaskExpression.CURLY_BRACKETS_RIGHT */));\n                return lengthInsideCurlyBrackets === String(value.length)\n                    ? null\n                    : this._createValidationError(value);\n            }\n            if (this._maskValue.startsWith(\"percent\" /* MaskExpression.PERCENT */)) {\n                return null;\n            }\n            for (const key in this._maskService.patterns) {\n                if (this._maskService.patterns[key]?.optional) {\n                    if (this._maskValue.indexOf(key) !== this._maskValue.lastIndexOf(key)) {\n                        const opt = this._maskValue\n                            .split(\"\" /* MaskExpression.EMPTY_STRING */)\n                            .filter((i) => i === key)\n                            .join(\"\" /* MaskExpression.EMPTY_STRING */);\n                        counterOfOpt += opt.length;\n                    }\n                    else if (this._maskValue.indexOf(key) !== -1) {\n                        counterOfOpt++;\n                    }\n                    if (this._maskValue.indexOf(key) !== -1 &&\n                        value.toString().length >= this._maskValue.indexOf(key)) {\n                        return null;\n                    }\n                    if (counterOfOpt === this._maskValue.length) {\n                        return null;\n                    }\n                }\n            }\n            if ((this._maskValue.indexOf(\"*\" /* MaskExpression.SYMBOL_STAR */) > 1 &&\n                value.toString().length <\n                    this._maskValue.indexOf(\"*\" /* MaskExpression.SYMBOL_STAR */)) ||\n                (this._maskValue.indexOf(\"?\" /* MaskExpression.SYMBOL_QUESTION */) > 1 &&\n                    value.toString().length <\n                        this._maskValue.indexOf(\"?\" /* MaskExpression.SYMBOL_QUESTION */))) {\n                return this._createValidationError(value);\n            }\n            if (this._maskValue.indexOf(\"*\" /* MaskExpression.SYMBOL_STAR */) === -1 ||\n                this._maskValue.indexOf(\"?\" /* MaskExpression.SYMBOL_QUESTION */) === -1) {\n                // eslint-disable-next-line no-param-reassign\n                value = typeof value === 'number' ? String(value) : value;\n                const array = this._maskValue.split('*');\n                const length = this._maskService.dropSpecialCharacters\n                    ? this._maskValue.length -\n                        this._maskService.checkDropSpecialCharAmount(this._maskValue) -\n                        counterOfOpt\n                    : this.prefix\n                        ? this._maskValue.length + this.prefix.length - counterOfOpt\n                        : this._maskValue.length - counterOfOpt;\n                if (array.length === 1) {\n                    if (value.toString().length < length) {\n                        return this._createValidationError(value);\n                    }\n                }\n                if (array.length > 1) {\n                    const lastIndexArray = array[array.length - 1];\n                    if (lastIndexArray &&\n                        this._maskService.specialCharacters.includes(lastIndexArray[0]) &&\n                        String(value).includes(lastIndexArray[0] ?? '') &&\n                        !this.dropSpecialCharacters) {\n                        const special = value.split(lastIndexArray[0]);\n                        return special[special.length - 1].length === lastIndexArray.length - 1\n                            ? null\n                            : this._createValidationError(value);\n                    }\n                    else if (((lastIndexArray &&\n                        !this._maskService.specialCharacters.includes(lastIndexArray[0])) ||\n                        !lastIndexArray ||\n                        this._maskService.dropSpecialCharacters) &&\n                        value.length >= length - 1) {\n                        return null;\n                    }\n                    else {\n                        return this._createValidationError(value);\n                    }\n                }\n            }\n            if (this._maskValue.indexOf(\"*\" /* MaskExpression.SYMBOL_STAR */) === 1 ||\n                this._maskValue.indexOf(\"?\" /* MaskExpression.SYMBOL_QUESTION */) === 1) {\n                return null;\n            }\n        }\n        if (value) {\n            this.maskFilled.emit();\n            return null;\n        }\n        return null;\n    }\n    onPaste() {\n        this._justPasted = true;\n    }\n    onFocus() {\n        this._isFocused = true;\n    }\n    onModelChange(value) {\n        // on form reset we need to update the actualValue\n        if ((value === \"\" /* MaskExpression.EMPTY_STRING */ || value === null || value === undefined) &&\n            this._maskService.actualValue) {\n            this._maskService.actualValue = this._maskService.getActualValue(\"\" /* MaskExpression.EMPTY_STRING */);\n        }\n    }\n    onInput(e) {\n        // If IME is composing text, we wait for the composed text.\n        if (this._isComposing)\n            return;\n        const el = e.target;\n        const transformedValue = this._maskService.inputTransformFn(el.value);\n        if (el.type !== 'number') {\n            if (typeof transformedValue === 'string' || typeof transformedValue === 'number') {\n                el.value = transformedValue.toString();\n                this._inputValue = el.value;\n                this._setMask();\n                if (!this._maskValue) {\n                    this.onChange(el.value);\n                    return;\n                }\n                let position = el.selectionStart === 1\n                    ? el.selectionStart + this._maskService.prefix.length\n                    : el.selectionStart;\n                if (this.showMaskTyped &&\n                    this.keepCharacterPositions &&\n                    this._maskService.placeHolderCharacter.length === 1) {\n                    const inputSymbol = el.value.slice(position - 1, position);\n                    const prefixLength = this.prefix.length;\n                    const checkSymbols = this._maskService._checkSymbolMask(inputSymbol, this._maskService.maskExpression[position - 1 - prefixLength] ??\n                        \"\" /* MaskExpression.EMPTY_STRING */);\n                    const checkSpecialCharacter = this._maskService._checkSymbolMask(inputSymbol, this._maskService.maskExpression[position + 1 - prefixLength] ??\n                        \"\" /* MaskExpression.EMPTY_STRING */);\n                    const selectRangeBackspace = this._maskService.selStart === this._maskService.selEnd;\n                    const selStart = Number(this._maskService.selStart) - prefixLength;\n                    const selEnd = Number(this._maskService.selEnd) - prefixLength;\n                    if (this._code === \"Backspace\" /* MaskExpression.BACKSPACE */) {\n                        if (!selectRangeBackspace) {\n                            if (this._maskService.selStart === prefixLength) {\n                                this._maskService.actualValue = `${this.prefix}${this._maskService.maskIsShown.slice(0, selEnd)}${this._inputValue.split(this.prefix).join('')}`;\n                            }\n                            else if (this._maskService.selStart ===\n                                this._maskService.maskIsShown.length + prefixLength) {\n                                this._maskService.actualValue = `${this._inputValue}${this._maskService.maskIsShown.slice(selStart, selEnd)}`;\n                            }\n                            else {\n                                this._maskService.actualValue = `${this.prefix}${this._inputValue\n                                    .split(this.prefix)\n                                    .join('')\n                                    .slice(0, selStart)}${this._maskService.maskIsShown.slice(selStart, selEnd)}${this._maskService.actualValue.slice(selEnd + prefixLength, this._maskService.maskIsShown.length + prefixLength)}${this.suffix}`;\n                            }\n                        }\n                        else if (!this._maskService.specialCharacters.includes(this._maskService.maskExpression.slice(position - this.prefix.length, position + 1 - this.prefix.length)) &&\n                            selectRangeBackspace) {\n                            if (selStart === 1 && this.prefix) {\n                                this._maskService.actualValue = `${this.prefix}${this._maskService.placeHolderCharacter}${el.value\n                                    .split(this.prefix)\n                                    .join('')\n                                    .split(this.suffix)\n                                    .join('')}${this.suffix}`;\n                                position = position - 1;\n                            }\n                            else {\n                                const part1 = el.value.substring(0, position);\n                                const part2 = el.value.substring(position);\n                                this._maskService.actualValue = `${part1}${this._maskService.placeHolderCharacter}${part2}`;\n                            }\n                        }\n                    }\n                    if (this._code !== \"Backspace\" /* MaskExpression.BACKSPACE */) {\n                        if (!checkSymbols && !checkSpecialCharacter && selectRangeBackspace) {\n                            position = Number(el.selectionStart) - 1;\n                        }\n                        else if (this._maskService.specialCharacters.includes(el.value.slice(position, position + 1)) &&\n                            checkSpecialCharacter &&\n                            !this._maskService.specialCharacters.includes(el.value.slice(position + 1, position + 2))) {\n                            this._maskService.actualValue = `${el.value.slice(0, position - 1)}${el.value.slice(position, position + 1)}${inputSymbol}${el.value.slice(position + 2)}`;\n                            position = position + 1;\n                        }\n                        else if (checkSymbols) {\n                            if (el.value.length === 1 && position === 1) {\n                                this._maskService.actualValue = `${this.prefix}${inputSymbol}${this._maskService.maskIsShown.slice(1, this._maskService.maskIsShown.length)}${this.suffix}`;\n                            }\n                            else {\n                                this._maskService.actualValue = `${el.value.slice(0, position - 1)}${inputSymbol}${el.value\n                                    .slice(position + 1)\n                                    .split(this.suffix)\n                                    .join('')}${this.suffix}`;\n                            }\n                        }\n                        else if (this.prefix &&\n                            el.value.length === 1 &&\n                            position - prefixLength === 1 &&\n                            this._maskService._checkSymbolMask(el.value, this._maskService.maskExpression[position - 1 - prefixLength] ??\n                                \"\" /* MaskExpression.EMPTY_STRING */)) {\n                            this._maskService.actualValue = `${this.prefix}${el.value}${this._maskService.maskIsShown.slice(1, this._maskService.maskIsShown.length)}${this.suffix}`;\n                        }\n                    }\n                }\n                let caretShift = 0;\n                let backspaceShift = false;\n                if (this._code === \"Delete\" /* MaskExpression.DELETE */ && \"separator\" /* MaskExpression.SEPARATOR */) {\n                    this._maskService.deletedSpecialCharacter = true;\n                }\n                if (this._inputValue.length >= this._maskService.maskExpression.length - 1 &&\n                    this._code !== \"Backspace\" /* MaskExpression.BACKSPACE */ &&\n                    this._maskService.maskExpression === \"d0/M0/0000\" /* MaskExpression.DAYS_MONTHS_YEARS */ &&\n                    position < 10) {\n                    const inputSymbol = this._inputValue.slice(position - 1, position);\n                    el.value =\n                        this._inputValue.slice(0, position - 1) +\n                            inputSymbol +\n                            this._inputValue.slice(position + 1);\n                }\n                if (this._maskService.maskExpression === \"d0/M0/0000\" /* MaskExpression.DAYS_MONTHS_YEARS */ &&\n                    this.leadZeroDateTime) {\n                    if ((position < 3 && Number(el.value) > 31 && Number(el.value) < 40) ||\n                        (position === 5 && Number(el.value.slice(3, 5)) > 12)) {\n                        position = position + 2;\n                    }\n                }\n                if (this._maskService.maskExpression === \"Hh:m0:s0\" /* MaskExpression.HOURS_MINUTES_SECONDS */ &&\n                    this.apm) {\n                    if (this._justPasted && el.value.slice(0, 2) === \"00\" /* MaskExpression.DOUBLE_ZERO */) {\n                        el.value = el.value.slice(1, 2) + el.value.slice(2, el.value.length);\n                    }\n                    el.value =\n                        el.value === \"00\" /* MaskExpression.DOUBLE_ZERO */\n                            ? \"0\" /* MaskExpression.NUMBER_ZERO */\n                            : el.value;\n                }\n                this._maskService.applyValueChanges(position, this._justPasted, this._code === \"Backspace\" /* MaskExpression.BACKSPACE */ || this._code === \"Delete\" /* MaskExpression.DELETE */, (shift, _backspaceShift) => {\n                    this._justPasted = false;\n                    caretShift = shift;\n                    backspaceShift = _backspaceShift;\n                });\n                // only set the selection if the element is active\n                if (this._getActiveElement() !== el) {\n                    return;\n                }\n                if (this._maskService.plusOnePosition) {\n                    position = position + 1;\n                    this._maskService.plusOnePosition = false;\n                }\n                // update position after applyValueChanges to prevent cursor on wrong position when it has an array of maskExpression\n                if (this._maskExpressionArray.length) {\n                    if (this._code === \"Backspace\" /* MaskExpression.BACKSPACE */) {\n                        const specialChartMinusOne = this.specialCharacters.includes(this._maskService.actualValue.slice(position - 1, position));\n                        const specialChartPlusOne = this.specialCharacters.includes(this._maskService.actualValue.slice(position, position + 1));\n                        if (this._allowFewMaskChangeMask && !specialChartPlusOne) {\n                            position = el.selectionStart + 1;\n                            this._allowFewMaskChangeMask = false;\n                        }\n                        else {\n                            position = specialChartMinusOne ? position - 1 : position;\n                        }\n                    }\n                    else {\n                        position =\n                            el.selectionStart === 1\n                                ? el.selectionStart + this._maskService.prefix.length\n                                : el.selectionStart;\n                    }\n                }\n                this._position =\n                    this._position === 1 && this._inputValue.length === 1 ? null : this._position;\n                let positionToApply = this._position\n                    ? this._inputValue.length + position + caretShift\n                    : position +\n                        (this._code === \"Backspace\" /* MaskExpression.BACKSPACE */ && !backspaceShift ? 0 : caretShift);\n                if (positionToApply > this._getActualInputLength()) {\n                    positionToApply =\n                        el.value === this._maskService.decimalMarker && el.value.length === 1\n                            ? this._getActualInputLength() + 1\n                            : this._getActualInputLength();\n                }\n                if (positionToApply < 0) {\n                    positionToApply = 0;\n                }\n                el.setSelectionRange(positionToApply, positionToApply);\n                this._position = null;\n            }\n            else {\n                console.warn('Ngx-mask writeValue work with string | number, your current value:', typeof transformedValue);\n            }\n        }\n        else {\n            if (!this._maskValue) {\n                this.onChange(el.value);\n                return;\n            }\n            this._maskService.applyValueChanges(el.value.length, this._justPasted, this._code === \"Backspace\" /* MaskExpression.BACKSPACE */ || this._code === \"Delete\" /* MaskExpression.DELETE */);\n        }\n    }\n    // IME starts\n    onCompositionStart() {\n        this._isComposing = true;\n    }\n    // IME completes\n    onCompositionEnd(e) {\n        this._isComposing = false;\n        this._justPasted = true;\n        this.onInput(e);\n    }\n    onBlur(e) {\n        if (this._maskValue) {\n            const el = e.target;\n            if (this.leadZero && el.value.length > 0 && typeof this.decimalMarker === 'string') {\n                const maskExpression = this._maskService.maskExpression;\n                const precision = Number(this._maskService.maskExpression.slice(maskExpression.length - 1, maskExpression.length));\n                if (precision > 0) {\n                    el.value = this.suffix ? el.value.split(this.suffix).join('') : el.value;\n                    const decimalPart = el.value.split(this.decimalMarker)[1];\n                    el.value = el.value.includes(this.decimalMarker)\n                        ? el.value +\n                            \"0\" /* MaskExpression.NUMBER_ZERO */.repeat(precision - decimalPart.length) +\n                            this.suffix\n                        : el.value +\n                            this.decimalMarker +\n                            \"0\" /* MaskExpression.NUMBER_ZERO */.repeat(precision) +\n                            this.suffix;\n                    this._maskService.actualValue = el.value;\n                }\n            }\n            this._maskService.clearIfNotMatchFn();\n        }\n        this._isFocused = false;\n        this.onTouch();\n    }\n    onClick(e) {\n        if (!this._maskValue) {\n            return;\n        }\n        const el = e.target;\n        const posStart = 0;\n        const posEnd = 0;\n        if (el !== null &&\n            el.selectionStart !== null &&\n            el.selectionStart === el.selectionEnd &&\n            el.selectionStart > this._maskService.prefix.length &&\n            // eslint-disable-next-line\n            e.keyCode !== 38) {\n            if (this._maskService.showMaskTyped && !this.keepCharacterPositions) {\n                // We are showing the mask in the input\n                this._maskService.maskIsShown = this._maskService.showMaskInInput();\n                if (el.setSelectionRange &&\n                    this._maskService.prefix + this._maskService.maskIsShown === el.value) {\n                    // the input ONLY contains the mask, so position the cursor at the start\n                    el.focus();\n                    el.setSelectionRange(posStart, posEnd);\n                }\n                else {\n                    // the input contains some characters already\n                    if (el.selectionStart > this._maskService.actualValue.length) {\n                        // if the user clicked beyond our value's length, position the cursor at the end of our value\n                        el.setSelectionRange(this._maskService.actualValue.length, this._maskService.actualValue.length);\n                    }\n                }\n            }\n        }\n        const nextValue = el &&\n            (el.value === this._maskService.prefix\n                ? this._maskService.prefix + this._maskService.maskIsShown\n                : el.value);\n        /** Fix of cursor position jumping to end in most browsers no matter where cursor is inserted onFocus */\n        if (el && el.value !== nextValue) {\n            el.value = nextValue;\n        }\n        /** fix of cursor position with prefix when mouse click occur */\n        if (el &&\n            el.type !== 'number' &&\n            (el.selectionStart || el.selectionEnd) <=\n                this._maskService.prefix.length) {\n            el.selectionStart = this._maskService.prefix.length;\n            return;\n        }\n        /** select only inserted text */\n        if (el && el.selectionEnd > this._getActualInputLength()) {\n            el.selectionEnd = this._getActualInputLength();\n        }\n    }\n    onKeyDown(e) {\n        if (!this._maskValue) {\n            return;\n        }\n        if (this._isComposing) {\n            // User finalize their choice from IME composition, so trigger onInput() for the composed text.\n            if (e.key === 'Enter')\n                this.onCompositionEnd(e);\n            return;\n        }\n        this._code = e.code ? e.code : e.key;\n        const el = e.target;\n        this._inputValue = el.value;\n        this._setMask();\n        if (el.type !== 'number') {\n            if (e.key === \"ArrowUp\" /* MaskExpression.ARROW_UP */) {\n                e.preventDefault();\n            }\n            if (e.key === \"ArrowLeft\" /* MaskExpression.ARROW_LEFT */ ||\n                e.key === \"Backspace\" /* MaskExpression.BACKSPACE */ ||\n                e.key === \"Delete\" /* MaskExpression.DELETE */) {\n                if (e.key === \"Backspace\" /* MaskExpression.BACKSPACE */ && el.value.length === 0) {\n                    el.selectionStart = el.selectionEnd;\n                }\n                if (e.key === \"Backspace\" /* MaskExpression.BACKSPACE */ && el.selectionStart !== 0) {\n                    // If specialChars is false, (shouldn't ever happen) then set to the defaults\n                    this.specialCharacters = this.specialCharacters?.length\n                        ? this.specialCharacters\n                        : this._config.specialCharacters;\n                    if (this.prefix.length > 1 &&\n                        el.selectionStart <= this.prefix.length) {\n                        el.setSelectionRange(this.prefix.length, el.selectionEnd);\n                    }\n                    else {\n                        if (this._inputValue.length !== el.selectionStart &&\n                            el.selectionStart !== 1) {\n                            while (this.specialCharacters.includes((this._inputValue[el.selectionStart - 1] ??\n                                \"\" /* MaskExpression.EMPTY_STRING */).toString()) &&\n                                ((this.prefix.length >= 1 &&\n                                    el.selectionStart > this.prefix.length) ||\n                                    this.prefix.length === 0)) {\n                                el.setSelectionRange(el.selectionStart - 1, el.selectionEnd);\n                            }\n                        }\n                    }\n                }\n                this.checkSelectionOnDeletion(el);\n                if (this._maskService.prefix.length &&\n                    el.selectionStart <= this._maskService.prefix.length &&\n                    el.selectionEnd <= this._maskService.prefix.length) {\n                    e.preventDefault();\n                }\n                const cursorStart = el.selectionStart;\n                if (e.key === \"Backspace\" /* MaskExpression.BACKSPACE */ &&\n                    !el.readOnly &&\n                    cursorStart === 0 &&\n                    el.selectionEnd === el.value.length &&\n                    el.value.length !== 0) {\n                    this._position = this._maskService.prefix ? this._maskService.prefix.length : 0;\n                    this._maskService.applyMask(this._maskService.prefix, this._maskService.maskExpression, this._position);\n                }\n            }\n            if (!!this.suffix &&\n                this.suffix.length > 1 &&\n                this._inputValue.length - this.suffix.length < el.selectionStart) {\n                el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n            }\n            else if ((e.code === 'KeyA' && e.ctrlKey) ||\n                (e.code === 'KeyA' && e.metaKey) // Cmd + A (Mac)\n            ) {\n                el.setSelectionRange(0, this._getActualInputLength());\n                e.preventDefault();\n            }\n            this._maskService.selStart = el.selectionStart;\n            this._maskService.selEnd = el.selectionEnd;\n        }\n    }\n    /** It writes the value in the input */\n    async writeValue(controlValue) {\n        if (typeof controlValue === 'object' && controlValue !== null && 'value' in controlValue) {\n            if ('disable' in controlValue) {\n                this.setDisabledState(Boolean(controlValue.disable));\n            }\n            // eslint-disable-next-line no-param-reassign\n            controlValue = controlValue.value;\n        }\n        if (controlValue !== null) {\n            // eslint-disable-next-line no-param-reassign\n            controlValue = this.inputTransformFn\n                ? this.inputTransformFn(controlValue)\n                : controlValue;\n        }\n        if (typeof controlValue === 'string' ||\n            typeof controlValue === 'number' ||\n            controlValue === null ||\n            controlValue === undefined) {\n            if (controlValue === null || controlValue === undefined || controlValue === '') {\n                this._maskService._currentValue = '';\n                this._maskService._previousValue = '';\n            }\n            let inputValue = controlValue;\n            if (typeof inputValue === 'number' ||\n                this._maskValue.startsWith(\"separator\" /* MaskExpression.SEPARATOR */)) {\n                inputValue = String(inputValue);\n                const localeDecimalMarker = this._maskService.currentLocaleDecimalMarker();\n                if (!Array.isArray(this._maskService.decimalMarker)) {\n                    inputValue =\n                        this._maskService.decimalMarker !== localeDecimalMarker\n                            ? inputValue.replace(localeDecimalMarker, this._maskService.decimalMarker)\n                            : inputValue;\n                }\n                if (this._maskService.leadZero &&\n                    inputValue &&\n                    this.maskExpression &&\n                    this.dropSpecialCharacters !== false) {\n                    inputValue = this._maskService._checkPrecision(this._maskService.maskExpression, inputValue);\n                }\n                if (this.decimalMarker === \",\" /* MaskExpression.COMMA */ ||\n                    (Array.isArray(this._maskService.decimalMarker) &&\n                        this.thousandSeparator === \".\" /* MaskExpression.DOT */)) {\n                    inputValue = inputValue\n                        .toString()\n                        .replace(\".\" /* MaskExpression.DOT */, \",\" /* MaskExpression.COMMA */);\n                }\n                if (this.maskExpression?.startsWith(\"separator\" /* MaskExpression.SEPARATOR */) && this.leadZero) {\n                    requestAnimationFrame(() => {\n                        this._maskService.applyMask(inputValue?.toString() ?? '', this._maskService.maskExpression);\n                    });\n                }\n                this._maskService.isNumberValue = true;\n            }\n            if (typeof inputValue !== 'string') {\n                inputValue = '';\n            }\n            this._inputValue = inputValue;\n            this._setMask();\n            if ((inputValue && this._maskService.maskExpression) ||\n                (this._maskService.maskExpression &&\n                    (this._maskService.prefix || this._maskService.showMaskTyped))) {\n                // Let the service we know we are writing value so that triggering onChange function won't happen during applyMask\n                typeof this.inputTransformFn !== 'function'\n                    ? (this._maskService.writingValue = true)\n                    : '';\n                this._maskService.formElementProperty = [\n                    'value',\n                    this._maskService.applyMask(inputValue, this._maskService.maskExpression),\n                ];\n                // Let the service know we've finished writing value\n                typeof this.inputTransformFn !== 'function'\n                    ? (this._maskService.writingValue = false)\n                    : '';\n            }\n            else {\n                this._maskService.formElementProperty = ['value', inputValue];\n            }\n            this._inputValue = inputValue;\n        }\n        else {\n            console.warn('Ngx-mask writeValue work with string | number, your current value:', typeof controlValue);\n        }\n    }\n    registerOnChange(fn) {\n        this._maskService.onChange = this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouch = fn;\n    }\n    _getActiveElement(document = this.document) {\n        const shadowRootEl = document?.activeElement?.shadowRoot;\n        if (!shadowRootEl?.activeElement) {\n            return document.activeElement;\n        }\n        else {\n            return this._getActiveElement(shadowRootEl);\n        }\n    }\n    checkSelectionOnDeletion(el) {\n        el.selectionStart = Math.min(Math.max(this.prefix.length, el.selectionStart), this._inputValue.length - this.suffix.length);\n        el.selectionEnd = Math.min(Math.max(this.prefix.length, el.selectionEnd), this._inputValue.length - this.suffix.length);\n    }\n    /** It disables the input element */\n    setDisabledState(isDisabled) {\n        this._maskService.formElementProperty = ['disabled', isDisabled];\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _applyMask() {\n        this._maskService.maskExpression = this._maskService._repeatPatternSymbols(this._maskValue || '');\n        this._maskService.formElementProperty = [\n            'value',\n            this._maskService.applyMask(this._inputValue, this._maskService.maskExpression),\n        ];\n    }\n    _validateTime(value) {\n        const rowMaskLen = this._maskValue\n            .split(\"\" /* MaskExpression.EMPTY_STRING */)\n            .filter((s) => s !== ':').length;\n        if (!value) {\n            return null; // Don't validate empty values to allow for optional form control\n        }\n        if ((+(value[value.length - 1] ?? -1) === 0 && value.length < rowMaskLen) ||\n            value.length <= rowMaskLen - 2) {\n            return this._createValidationError(value);\n        }\n        return null;\n    }\n    _getActualInputLength() {\n        return (this._maskService.actualValue.length ||\n            this._maskService.actualValue.length + this._maskService.prefix.length);\n    }\n    _createValidationError(actualValue) {\n        return {\n            mask: {\n                requiredMask: this._maskValue,\n                actualValue,\n            },\n        };\n    }\n    _setMask() {\n        this._maskExpressionArray.some((mask) => {\n            const specialChart = mask\n                .split(\"\" /* MaskExpression.EMPTY_STRING */)\n                .some((char) => this._maskService.specialCharacters.includes(char));\n            if ((specialChart &&\n                this._inputValue &&\n                this._areAllCharactersInEachStringSame(this._maskExpressionArray)) ||\n                mask.includes(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */)) {\n                const test = this._maskService.removeMask(this._inputValue)?.length <=\n                    this._maskService.removeMask(mask)?.length;\n                if (test) {\n                    this._maskValue =\n                        this.maskExpression =\n                            this._maskService.maskExpression =\n                                mask.includes(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */)\n                                    ? this._maskService._repeatPatternSymbols(mask)\n                                    : mask;\n                    return test;\n                }\n                else {\n                    if (this._code === \"Backspace\" /* MaskExpression.BACKSPACE */) {\n                        this._allowFewMaskChangeMask = true;\n                    }\n                    const expression = this._maskExpressionArray[this._maskExpressionArray.length - 1] ??\n                        \"\" /* MaskExpression.EMPTY_STRING */;\n                    this._maskValue =\n                        this.maskExpression =\n                            this._maskService.maskExpression =\n                                expression.includes(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */)\n                                    ? this._maskService._repeatPatternSymbols(expression)\n                                    : expression;\n                }\n            }\n            else {\n                const check = this._maskService\n                    .removeMask(this._inputValue)\n                    ?.split(\"\" /* MaskExpression.EMPTY_STRING */)\n                    .every((character, index) => {\n                    const indexMask = mask.charAt(index);\n                    return this._maskService._checkSymbolMask(character, indexMask);\n                });\n                if (check || this._justPasted) {\n                    this._maskValue = this.maskExpression = this._maskService.maskExpression = mask;\n                    return check;\n                }\n            }\n        });\n    }\n    _areAllCharactersInEachStringSame(array) {\n        const specialCharacters = this._maskService.specialCharacters;\n        function removeSpecialCharacters(str) {\n            const regex = new RegExp(`[${specialCharacters.map((ch) => `\\\\${ch}`).join('')}]`, 'g');\n            return str.replace(regex, '');\n        }\n        const processedArr = array.map(removeSpecialCharacters);\n        return processedArr.every((str) => {\n            const uniqueCharacters = new Set(str);\n            return uniqueCharacters.size === 1;\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.8\", ngImport: i0, type: NgxMaskDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.3.8\", type: NgxMaskDirective, isStandalone: true, selector: \"input[mask], textarea[mask]\", inputs: { maskExpression: [\"mask\", \"maskExpression\"], specialCharacters: \"specialCharacters\", patterns: \"patterns\", prefix: \"prefix\", suffix: \"suffix\", thousandSeparator: \"thousandSeparator\", decimalMarker: \"decimalMarker\", dropSpecialCharacters: \"dropSpecialCharacters\", hiddenInput: \"hiddenInput\", showMaskTyped: \"showMaskTyped\", placeHolderCharacter: \"placeHolderCharacter\", shownMaskExpression: \"shownMaskExpression\", showTemplate: \"showTemplate\", clearIfNotMatch: \"clearIfNotMatch\", validation: \"validation\", separatorLimit: \"separatorLimit\", allowNegativeNumbers: \"allowNegativeNumbers\", leadZeroDateTime: \"leadZeroDateTime\", leadZero: \"leadZero\", triggerOnMaskChange: \"triggerOnMaskChange\", apm: \"apm\", inputTransformFn: \"inputTransformFn\", outputTransformFn: \"outputTransformFn\", keepCharacterPositions: \"keepCharacterPositions\" }, outputs: { maskFilled: \"maskFilled\" }, host: { listeners: { \"paste\": \"onPaste()\", \"focus\": \"onFocus($event)\", \"ngModelChange\": \"onModelChange($event)\", \"input\": \"onInput($event)\", \"compositionstart\": \"onCompositionStart($event)\", \"compositionend\": \"onCompositionEnd($event)\", \"blur\": \"onBlur($event)\", \"click\": \"onClick($event)\", \"keydown\": \"onKeyDown($event)\" } }, providers: [\n            {\n                provide: NG_VALUE_ACCESSOR,\n                useExisting: NgxMaskDirective,\n                multi: true,\n            },\n            {\n                provide: NG_VALIDATORS,\n                useExisting: NgxMaskDirective,\n                multi: true,\n            },\n            NgxMaskService,\n        ], exportAs: [\"mask\", \"ngxMask\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.8\", ngImport: i0, type: NgxMaskDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[mask], textarea[mask]',\n                    standalone: true,\n                    providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: NgxMaskDirective,\n                            multi: true,\n                        },\n                        {\n                            provide: NG_VALIDATORS,\n                            useExisting: NgxMaskDirective,\n                            multi: true,\n                        },\n                        NgxMaskService,\n                    ],\n                    exportAs: 'mask,ngxMask',\n                }]\n        }], propDecorators: { maskExpression: [{\n                type: Input,\n                args: ['mask']\n            }], specialCharacters: [{\n                type: Input\n            }], patterns: [{\n                type: Input\n            }], prefix: [{\n                type: Input\n            }], suffix: [{\n                type: Input\n            }], thousandSeparator: [{\n                type: Input\n            }], decimalMarker: [{\n                type: Input\n            }], dropSpecialCharacters: [{\n                type: Input\n            }], hiddenInput: [{\n                type: Input\n            }], showMaskTyped: [{\n                type: Input\n            }], placeHolderCharacter: [{\n                type: Input\n            }], shownMaskExpression: [{\n                type: Input\n            }], showTemplate: [{\n                type: Input\n            }], clearIfNotMatch: [{\n                type: Input\n            }], validation: [{\n                type: Input\n            }], separatorLimit: [{\n                type: Input\n            }], allowNegativeNumbers: [{\n                type: Input\n            }], leadZeroDateTime: [{\n                type: Input\n            }], leadZero: [{\n                type: Input\n            }], triggerOnMaskChange: [{\n                type: Input\n            }], apm: [{\n                type: Input\n            }], inputTransformFn: [{\n                type: Input\n            }], outputTransformFn: [{\n                type: Input\n            }], keepCharacterPositions: [{\n                type: Input\n            }], maskFilled: [{\n                type: Output\n            }], onPaste: [{\n                type: HostListener,\n                args: ['paste']\n            }], onFocus: [{\n                type: HostListener,\n                args: ['focus', ['$event']]\n            }], onModelChange: [{\n                type: HostListener,\n                args: ['ngModelChange', ['$event']]\n            }], onInput: [{\n                type: HostListener,\n                args: ['input', ['$event']]\n            }], onCompositionStart: [{\n                type: HostListener,\n                args: ['compositionstart', ['$event']]\n            }], onCompositionEnd: [{\n                type: HostListener,\n                args: ['compositionend', ['$event']]\n            }], onBlur: [{\n                type: HostListener,\n                args: ['blur', ['$event']]\n            }], onClick: [{\n                type: HostListener,\n                args: ['click', ['$event']]\n            }], onKeyDown: [{\n                type: HostListener,\n                args: ['keydown', ['$event']]\n            }] } });\n\nclass NgxMaskPipe {\n    constructor() {\n        this.defaultOptions = inject(NGX_MASK_CONFIG);\n        this._maskService = inject(NgxMaskService);\n        this._maskExpressionArray = [];\n        this.mask = '';\n    }\n    transform(value, mask, { patterns, ...config } = {}) {\n        const currentConfig = {\n            maskExpression: mask,\n            ...this.defaultOptions,\n            ...config,\n            patterns: {\n                ...this._maskService.patterns,\n                ...patterns,\n            },\n        };\n        Object.entries(currentConfig).forEach(([key, value]) => {\n            //eslint-disable-next-line  @typescript-eslint/no-explicit-any\n            this._maskService[key] = value;\n        });\n        if (mask.includes('||')) {\n            if (mask.split('||').length > 1) {\n                this._maskExpressionArray = mask.split('||').sort((a, b) => {\n                    return a.length - b.length;\n                });\n                this._setMask(value);\n                return this._maskService.applyMask(`${value}`, this.mask);\n            }\n            else {\n                this._maskExpressionArray = [];\n                return this._maskService.applyMask(`${value}`, this.mask);\n            }\n        }\n        if (mask.includes(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */)) {\n            return this._maskService.applyMask(`${value}`, this._maskService._repeatPatternSymbols(mask));\n        }\n        if (mask.startsWith(\"separator\" /* MaskExpression.SEPARATOR */)) {\n            if (config.decimalMarker) {\n                this._maskService.decimalMarker = config.decimalMarker;\n            }\n            if (config.thousandSeparator) {\n                this._maskService.thousandSeparator = config.thousandSeparator;\n            }\n            if (config.leadZero) {\n                // eslint-disable-next-line no-param-reassign\n                this._maskService.leadZero = config.leadZero;\n            }\n            // eslint-disable-next-line no-param-reassign\n            value = String(value);\n            const localeDecimalMarker = this._maskService.currentLocaleDecimalMarker();\n            if (!Array.isArray(this._maskService.decimalMarker)) {\n                // eslint-disable-next-line no-param-reassign\n                value =\n                    this._maskService.decimalMarker !== localeDecimalMarker\n                        ? value.replace(localeDecimalMarker, this._maskService.decimalMarker)\n                        : value;\n            }\n            if (this._maskService.leadZero &&\n                value &&\n                this._maskService.dropSpecialCharacters !== false) {\n                // eslint-disable-next-line no-param-reassign\n                value = this._maskService._checkPrecision(mask, value);\n            }\n            if (this._maskService.decimalMarker === \",\" /* MaskExpression.COMMA */) {\n                // eslint-disable-next-line no-param-reassign\n                value = value.toString().replace(\".\" /* MaskExpression.DOT */, \",\" /* MaskExpression.COMMA */);\n            }\n            this._maskService.isNumberValue = true;\n        }\n        if (value === null || value === undefined) {\n            return this._maskService.applyMask('', mask);\n        }\n        return this._maskService.applyMask(`${value}`, mask);\n    }\n    _setMask(value) {\n        if (this._maskExpressionArray.length > 0) {\n            this._maskExpressionArray.some((mask) => {\n                const test = this._maskService.removeMask(value)?.length <=\n                    this._maskService.removeMask(mask)?.length;\n                if (value && test) {\n                    this.mask = mask;\n                    return test;\n                }\n                else {\n                    const expression = this._maskExpressionArray[this._maskExpressionArray.length - 1] ??\n                        \"\" /* MaskExpression.EMPTY_STRING */;\n                    this.mask = expression;\n                }\n            });\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.8\", ngImport: i0, type: NgxMaskPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }\n    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"17.3.8\", ngImport: i0, type: NgxMaskPipe, isStandalone: true, name: \"mask\" }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.8\", ngImport: i0, type: NgxMaskPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'mask',\n                    pure: true,\n                    standalone: true,\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { INITIAL_CONFIG, NEW_CONFIG, NGX_MASK_CONFIG, NgxMaskDirective, NgxMaskPipe, NgxMaskService, initialConfig, provideEnvironmentNgxMask, provideNgxMask, timeMasks, withoutValidation };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}