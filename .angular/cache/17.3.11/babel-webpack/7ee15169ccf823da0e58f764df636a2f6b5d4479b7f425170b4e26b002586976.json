{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../service/auth.service\";\nexport class JwtInterceptor {\n  constructor(authenticationService) {\n    this.authenticationService = authenticationService;\n  }\n  intercept(request, next) {\n    // add authorization header with jwt token if available\n    const currentUser = this.authenticationService.currentUserValue;\n    if (currentUser && currentUser.token) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${currentUser.token}`\n        }\n      });\n    }\n    return next.handle(request);\n  }\n  static {\n    this.ɵfac = function JwtInterceptor_Factory(t) {\n      return new (t || JwtInterceptor)(i0.ɵɵinject(i1.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: JwtInterceptor,\n      factory: JwtInterceptor.ɵfac\n    });\n  }\n}","map":{"version":3,"names":["JwtInterceptor","constructor","authenticationService","intercept","request","next","currentUser","currentUserValue","token","clone","setHeaders","Authorization","handle","i0","ɵɵinject","i1","AuthService","factory","ɵfac"],"sources":["/home/hugo/Documentos/TF-594345-hdelboy/themeforest-jtUTY/smart/source/main/src/app/core/interceptor/jwt.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpInterceptor,\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from '../service/auth.service';\r\n\r\n@Injectable()\r\nexport class JwtInterceptor implements HttpInterceptor {\r\n  constructor(private authenticationService: AuthService) { }\r\n\r\n  intercept(\r\n    request: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    // add authorization header with jwt token if available\r\n    const currentUser = this.authenticationService.currentUserValue;\r\n    if (currentUser && currentUser.token) {\r\n      request = request.clone({\r\n        setHeaders: {\r\n          Authorization: `Bearer ${currentUser.token}`,\r\n        },\r\n      });\r\n    }\r\n\r\n    return next.handle(request);\r\n  }\r\n}\r\n"],"mappings":";;AAWA,OAAM,MAAOA,cAAc;EACzBC,YAAoBC,qBAAkC;IAAlC,KAAAA,qBAAqB,GAArBA,qBAAqB;EAAiB;EAE1DC,SAASA,CACPC,OAAyB,EACzBC,IAAiB;IAEjB;IACA,MAAMC,WAAW,GAAG,IAAI,CAACJ,qBAAqB,CAACK,gBAAgB;IAC/D,IAAID,WAAW,IAAIA,WAAW,CAACE,KAAK,EAAE;MACpCJ,OAAO,GAAGA,OAAO,CAACK,KAAK,CAAC;QACtBC,UAAU,EAAE;UACVC,aAAa,EAAE,UAAUL,WAAW,CAACE,KAAK;;OAE7C,CAAC;;IAGJ,OAAOH,IAAI,CAACO,MAAM,CAACR,OAAO,CAAC;EAC7B;;;uBAlBWJ,cAAc,EAAAa,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA;IAAA;EAAA;;;aAAdhB,cAAc;MAAAiB,OAAA,EAAdjB,cAAc,CAAAkB;IAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}